
WatchDog_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002374  00002408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080006c  0080006c  00002414  2**0
                  ALLOC
  3 .stab         00001cbc  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001015  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000050e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005225  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005395  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__vector_4>
      14:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_5>
      18:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__vector_6>
      1c:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_7>
      20:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__vector_8>
      24:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__vector_9>
      28:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_10>
      2c:	0c 94 58 0f 	jmp	0x1eb0	; 0x1eb0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <main>
      8a:	0c 94 b8 11 	jmp	0x2370	; 0x2370 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 11 	jmp	0x233a	; 0x233a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	08 f0       	brcs	.+2      	; 0xb6c <DIO_enumSetPinDirection+0x26>
     b6a:	f1 c0       	rjmp	.+482    	; 0xd4e <DIO_enumSetPinDirection+0x208>
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	88 30       	cpi	r24, 0x08	; 8
     b70:	08 f0       	brcs	.+2      	; 0xb74 <DIO_enumSetPinDirection+0x2e>
     b72:	ed c0       	rjmp	.+474    	; 0xd4e <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <DIO_enumSetPinDirection+0x36>
     b7a:	6f c0       	rjmp	.+222    	; 0xc5a <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	38 87       	std	Y+8, r19	; 0x08
     b84:	2f 83       	std	Y+7, r18	; 0x07
     b86:	8f 81       	ldd	r24, Y+7	; 0x07
     b88:	98 85       	ldd	r25, Y+8	; 0x08
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	49 f1       	breq	.+82     	; 0xbe2 <DIO_enumSetPinDirection+0x9c>
     b90:	2f 81       	ldd	r18, Y+7	; 0x07
     b92:	38 85       	ldd	r19, Y+8	; 0x08
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	2c f4       	brge	.+10     	; 0xba4 <DIO_enumSetPinDirection+0x5e>
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	61 f0       	breq	.+24     	; 0xbba <DIO_enumSetPinDirection+0x74>
     ba2:	d6 c0       	rjmp	.+428    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
     ba4:	2f 81       	ldd	r18, Y+7	; 0x07
     ba6:	38 85       	ldd	r19, Y+8	; 0x08
     ba8:	22 30       	cpi	r18, 0x02	; 2
     baa:	31 05       	cpc	r19, r1
     bac:	71 f1       	breq	.+92     	; 0xc0a <DIO_enumSetPinDirection+0xc4>
     bae:	8f 81       	ldd	r24, Y+7	; 0x07
     bb0:	98 85       	ldd	r25, Y+8	; 0x08
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	e9 f1       	breq	.+122    	; 0xc32 <DIO_enumSetPinDirection+0xec>
     bb8:	cb c0       	rjmp	.+406    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
     bba:	aa e3       	ldi	r26, 0x3A	; 58
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e3       	ldi	r30, 0x3A	; 58
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_enumSetPinDirection+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_enumSetPinDirection+0x8e>
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	b7 c0       	rjmp	.+366    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
     be2:	a7 e3       	ldi	r26, 0x37	; 55
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e3       	ldi	r30, 0x37	; 55
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 2e       	mov	r0, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <DIO_enumSetPinDirection+0xba>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	0a 94       	dec	r0
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <DIO_enumSetPinDirection+0xb6>
     c04:	84 2b       	or	r24, r20
     c06:	8c 93       	st	X, r24
     c08:	a3 c0       	rjmp	.+326    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
     c0a:	a4 e3       	ldi	r26, 0x34	; 52
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e4 e3       	ldi	r30, 0x34	; 52
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_enumSetPinDirection+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_enumSetPinDirection+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	8f c0       	rjmp	.+286    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
     c32:	a1 e3       	ldi	r26, 0x31	; 49
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e1 e3       	ldi	r30, 0x31	; 49
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_enumSetPinDirection+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_enumSetPinDirection+0x106>
     c54:	84 2b       	or	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	7b c0       	rjmp	.+246    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	88 23       	and	r24, r24
     c5e:	09 f0       	breq	.+2      	; 0xc62 <DIO_enumSetPinDirection+0x11c>
     c60:	74 c0       	rjmp	.+232    	; 0xd4a <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	3e 83       	std	Y+6, r19	; 0x06
     c6a:	2d 83       	std	Y+5, r18	; 0x05
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	91 05       	cpc	r25, r1
     c74:	59 f1       	breq	.+86     	; 0xccc <DIO_enumSetPinDirection+0x186>
     c76:	2d 81       	ldd	r18, Y+5	; 0x05
     c78:	3e 81       	ldd	r19, Y+6	; 0x06
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	2c f4       	brge	.+10     	; 0xc8a <DIO_enumSetPinDirection+0x144>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	69 f0       	breq	.+26     	; 0xca2 <DIO_enumSetPinDirection+0x15c>
     c88:	63 c0       	rjmp	.+198    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
     c8a:	2d 81       	ldd	r18, Y+5	; 0x05
     c8c:	3e 81       	ldd	r19, Y+6	; 0x06
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	31 05       	cpc	r19, r1
     c92:	89 f1       	breq	.+98     	; 0xcf6 <DIO_enumSetPinDirection+0x1b0>
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <DIO_enumSetPinDirection+0x15a>
     c9e:	40 c0       	rjmp	.+128    	; 0xd20 <DIO_enumSetPinDirection+0x1da>
     ca0:	57 c0       	rjmp	.+174    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
     ca2:	aa e3       	ldi	r26, 0x3A	; 58
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enumSetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_enumSetPinDirection+0x176>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	42 c0       	rjmp	.+132    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_enumSetPinDirection+0x1a4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_enumSetPinDirection+0x1a0>
     cee:	80 95       	com	r24
     cf0:	84 23       	and	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	2d c0       	rjmp	.+90     	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_enumSetPinDirection+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_enumSetPinDirection+0x1ca>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	18 c0       	rjmp	.+48     	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
     d20:	a1 e3       	ldi	r26, 0x31	; 49
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e1 e3       	ldi	r30, 0x31	; 49
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_enumSetPinDirection+0x1f8>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_enumSetPinDirection+0x1f4>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     d4e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     d50:	89 81       	ldd	r24, Y+1	; 0x01

}
     d52:	28 96       	adiw	r28, 0x08	; 8
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	28 97       	sbiw	r28, 0x08	; 8
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6b 83       	std	Y+3, r22	; 0x03
     d7c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	84 30       	cpi	r24, 0x04	; 4
     d86:	08 f0       	brcs	.+2      	; 0xd8a <DIO_enumSetPinValue+0x26>
     d88:	f1 c0       	rjmp	.+482    	; 0xf6c <DIO_enumSetPinValue+0x208>
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 30       	cpi	r24, 0x08	; 8
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <DIO_enumSetPinValue+0x2e>
     d90:	ed c0       	rjmp	.+474    	; 0xf6c <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	09 f0       	breq	.+2      	; 0xd9a <DIO_enumSetPinValue+0x36>
     d98:	6f c0       	rjmp	.+222    	; 0xe78 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	38 87       	std	Y+8, r19	; 0x08
     da2:	2f 83       	std	Y+7, r18	; 0x07
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	49 f1       	breq	.+82     	; 0xe00 <DIO_enumSetPinValue+0x9c>
     dae:	2f 81       	ldd	r18, Y+7	; 0x07
     db0:	38 85       	ldd	r19, Y+8	; 0x08
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	2c f4       	brge	.+10     	; 0xdc2 <DIO_enumSetPinValue+0x5e>
     db8:	8f 81       	ldd	r24, Y+7	; 0x07
     dba:	98 85       	ldd	r25, Y+8	; 0x08
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <DIO_enumSetPinValue+0x74>
     dc0:	d6 c0       	rjmp	.+428    	; 0xf6e <DIO_enumSetPinValue+0x20a>
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	38 85       	ldd	r19, Y+8	; 0x08
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	71 f1       	breq	.+92     	; 0xe28 <DIO_enumSetPinValue+0xc4>
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	98 85       	ldd	r25, Y+8	; 0x08
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	91 05       	cpc	r25, r1
     dd4:	e9 f1       	breq	.+122    	; 0xe50 <DIO_enumSetPinValue+0xec>
     dd6:	cb c0       	rjmp	.+406    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
     dd8:	ab e3       	ldi	r26, 0x3B	; 59
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e3       	ldi	r30, 0x3B	; 59
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_enumSetPinValue+0x92>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_enumSetPinValue+0x8e>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	b7 c0       	rjmp	.+366    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
     e00:	a8 e3       	ldi	r26, 0x38	; 56
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e3       	ldi	r30, 0x38	; 56
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_enumSetPinValue+0xba>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_enumSetPinValue+0xb6>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	a3 c0       	rjmp	.+326    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
     e28:	a5 e3       	ldi	r26, 0x35	; 53
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e3       	ldi	r30, 0x35	; 53
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_enumSetPinValue+0xe2>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_enumSetPinValue+0xde>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	8f c0       	rjmp	.+286    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
     e50:	a2 e3       	ldi	r26, 0x32	; 50
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e2 e3       	ldi	r30, 0x32	; 50
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_enumSetPinValue+0x10a>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_enumSetPinValue+0x106>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	7b c0       	rjmp	.+246    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	88 23       	and	r24, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <DIO_enumSetPinValue+0x11c>
     e7e:	74 c0       	rjmp	.+232    	; 0xf68 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	3e 83       	std	Y+6, r19	; 0x06
     e88:	2d 83       	std	Y+5, r18	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	59 f1       	breq	.+86     	; 0xeea <DIO_enumSetPinValue+0x186>
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_enumSetPinValue+0x144>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f0       	breq	.+26     	; 0xec0 <DIO_enumSetPinValue+0x15c>
     ea6:	63 c0       	rjmp	.+198    	; 0xf6e <DIO_enumSetPinValue+0x20a>
     ea8:	2d 81       	ldd	r18, Y+5	; 0x05
     eaa:	3e 81       	ldd	r19, Y+6	; 0x06
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	89 f1       	breq	.+98     	; 0xf14 <DIO_enumSetPinValue+0x1b0>
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_enumSetPinValue+0x15a>
     ebc:	40 c0       	rjmp	.+128    	; 0xf3e <DIO_enumSetPinValue+0x1da>
     ebe:	57 c0       	rjmp	.+174    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
     ec0:	ab e3       	ldi	r26, 0x3B	; 59
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	eb e3       	ldi	r30, 0x3B	; 59
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_enumSetPinValue+0x17a>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_enumSetPinValue+0x176>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	42 c0       	rjmp	.+132    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_enumSetPinValue+0x1a4>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_enumSetPinValue+0x1a0>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	2d c0       	rjmp	.+90     	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
     f14:	a5 e3       	ldi	r26, 0x35	; 53
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_enumSetPinValue+0x1ce>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_enumSetPinValue+0x1ca>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	18 c0       	rjmp	.+48     	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_enumSetPinValue+0x1f8>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_enumSetPinValue+0x1f4>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     f68:	19 82       	std	Y+1, r1	; 0x01
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     f6c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01

}
     f70:	28 96       	adiw	r28, 0x08	; 8
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	27 97       	sbiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	6b 83       	std	Y+3, r22	; 0x03
     f9a:	5d 83       	std	Y+5, r21	; 0x05
     f9c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <DIO_enumGetPinValue+0x28>
     fa8:	a6 c0       	rjmp	.+332    	; 0x10f6 <DIO_enumGetPinValue+0x174>
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <DIO_enumGetPinValue+0x30>
     fb0:	a2 c0       	rjmp	.+324    	; 0x10f6 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3f 83       	std	Y+7, r19	; 0x07
     fba:	2e 83       	std	Y+6, r18	; 0x06
     fbc:	4e 81       	ldd	r20, Y+6	; 0x06
     fbe:	5f 81       	ldd	r21, Y+7	; 0x07
     fc0:	41 30       	cpi	r20, 0x01	; 1
     fc2:	51 05       	cpc	r21, r1
     fc4:	c1 f1       	breq	.+112    	; 0x1036 <DIO_enumGetPinValue+0xb4>
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	9f 81       	ldd	r25, Y+7	; 0x07
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	34 f4       	brge	.+12     	; 0xfdc <DIO_enumGetPinValue+0x5a>
     fd0:	2e 81       	ldd	r18, Y+6	; 0x06
     fd2:	3f 81       	ldd	r19, Y+7	; 0x07
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	71 f0       	breq	.+28     	; 0xff6 <DIO_enumGetPinValue+0x74>
     fda:	8e c0       	rjmp	.+284    	; 0x10f8 <DIO_enumGetPinValue+0x176>
     fdc:	4e 81       	ldd	r20, Y+6	; 0x06
     fde:	5f 81       	ldd	r21, Y+7	; 0x07
     fe0:	42 30       	cpi	r20, 0x02	; 2
     fe2:	51 05       	cpc	r21, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <DIO_enumGetPinValue+0x66>
     fe6:	47 c0       	rjmp	.+142    	; 0x1076 <DIO_enumGetPinValue+0xf4>
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	9f 81       	ldd	r25, Y+7	; 0x07
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_enumGetPinValue+0x72>
     ff2:	61 c0       	rjmp	.+194    	; 0x10b6 <DIO_enumGetPinValue+0x134>
     ff4:	81 c0       	rjmp	.+258    	; 0x10f8 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
     ff6:	e9 e3       	ldi	r30, 0x39	; 57
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_enumGetPinValue+0x8e>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	2a 95       	dec	r18
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_enumGetPinValue+0x8a>
    1014:	9a 01       	movw	r18, r20
    1016:	28 23       	and	r18, r24
    1018:	39 23       	and	r19, r25
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_enumGetPinValue+0xa6>
    1024:	55 95       	asr	r21
    1026:	47 95       	ror	r20
    1028:	8a 95       	dec	r24
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_enumGetPinValue+0xa2>
    102c:	ca 01       	movw	r24, r20
    102e:	ec 81       	ldd	r30, Y+4	; 0x04
    1030:	fd 81       	ldd	r31, Y+5	; 0x05
    1032:	80 83       	st	Z, r24
    1034:	61 c0       	rjmp	.+194    	; 0x10f8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    1036:	e6 e3       	ldi	r30, 0x36	; 54
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_enumGetPinValue+0xce>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	2a 95       	dec	r18
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_enumGetPinValue+0xca>
    1054:	9a 01       	movw	r18, r20
    1056:	28 23       	and	r18, r24
    1058:	39 23       	and	r19, r25
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a9 01       	movw	r20, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_enumGetPinValue+0xe6>
    1064:	55 95       	asr	r21
    1066:	47 95       	ror	r20
    1068:	8a 95       	dec	r24
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_enumGetPinValue+0xe2>
    106c:	ca 01       	movw	r24, r20
    106e:	ec 81       	ldd	r30, Y+4	; 0x04
    1070:	fd 81       	ldd	r31, Y+5	; 0x05
    1072:	80 83       	st	Z, r24
    1074:	41 c0       	rjmp	.+130    	; 0x10f8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    1076:	e3 e3       	ldi	r30, 0x33	; 51
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_enumGetPinValue+0x10e>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	2a 95       	dec	r18
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_enumGetPinValue+0x10a>
    1094:	9a 01       	movw	r18, r20
    1096:	28 23       	and	r18, r24
    1098:	39 23       	and	r19, r25
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a9 01       	movw	r20, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_enumGetPinValue+0x126>
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_enumGetPinValue+0x122>
    10ac:	ca 01       	movw	r24, r20
    10ae:	ec 81       	ldd	r30, Y+4	; 0x04
    10b0:	fd 81       	ldd	r31, Y+5	; 0x05
    10b2:	80 83       	st	Z, r24
    10b4:	21 c0       	rjmp	.+66     	; 0x10f8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    10b6:	e0 e3       	ldi	r30, 0x30	; 48
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_enumGetPinValue+0x14e>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	2a 95       	dec	r18
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_enumGetPinValue+0x14a>
    10d4:	9a 01       	movw	r18, r20
    10d6:	28 23       	and	r18, r24
    10d8:	39 23       	and	r19, r25
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_enumGetPinValue+0x166>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_enumGetPinValue+0x162>
    10ec:	ca 01       	movw	r24, r20
    10ee:	ec 81       	ldd	r30, Y+4	; 0x04
    10f0:	fd 81       	ldd	r31, Y+5	; 0x05
    10f2:	80 83       	st	Z, r24
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    10f6:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fa:	27 96       	adiw	r28, 0x07	; 7
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <DIO_enumTogglePinValue+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <DIO_enumTogglePinValue+0x8>
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	8a 83       	std	Y+2, r24	; 0x02
    111c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 30       	cpi	r24, 0x08	; 8
    1126:	08 f0       	brcs	.+2      	; 0x112a <DIO_enumTogglePinValue+0x1e>
    1128:	6f c0       	rjmp	.+222    	; 0x1208 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3d 83       	std	Y+5, r19	; 0x05
    1132:	2c 83       	std	Y+4, r18	; 0x04
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	49 f1       	breq	.+82     	; 0x1190 <DIO_enumTogglePinValue+0x84>
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	2c f4       	brge	.+10     	; 0x1152 <DIO_enumTogglePinValue+0x46>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	61 f0       	breq	.+24     	; 0x1168 <DIO_enumTogglePinValue+0x5c>
    1150:	5c c0       	rjmp	.+184    	; 0x120a <DIO_enumTogglePinValue+0xfe>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	71 f1       	breq	.+92     	; 0x11b8 <DIO_enumTogglePinValue+0xac>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	91 05       	cpc	r25, r1
    1164:	e9 f1       	breq	.+122    	; 0x11e0 <DIO_enumTogglePinValue+0xd4>
    1166:	51 c0       	rjmp	.+162    	; 0x120a <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    1168:	ab e3       	ldi	r26, 0x3B	; 59
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	eb e3       	ldi	r30, 0x3B	; 59
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_enumTogglePinValue+0x7a>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_enumTogglePinValue+0x76>
    118a:	84 27       	eor	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	3d c0       	rjmp	.+122    	; 0x120a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    1190:	a8 e3       	ldi	r26, 0x38	; 56
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e8 e3       	ldi	r30, 0x38	; 56
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_enumTogglePinValue+0xa2>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_enumTogglePinValue+0x9e>
    11b2:	84 27       	eor	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	29 c0       	rjmp	.+82     	; 0x120a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    11b8:	a5 e3       	ldi	r26, 0x35	; 53
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e3       	ldi	r30, 0x35	; 53
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_enumTogglePinValue+0xca>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_enumTogglePinValue+0xc6>
    11da:	84 27       	eor	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	15 c0       	rjmp	.+42     	; 0x120a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_enumTogglePinValue+0xf2>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_enumTogglePinValue+0xee>
    1202:	84 27       	eor	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	01 c0       	rjmp	.+2      	; 0x120a <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    1208:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_enumConnectPullup+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_enumConnectPullup+0x8>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <DIO_enumConnectPullup+0xa>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
    122e:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	08 f0       	brcs	.+2      	; 0x123c <DIO_enumConnectPullup+0x20>
    123a:	3e c1       	rjmp	.+636    	; 0x14b8 <DIO_enumConnectPullup+0x29c>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	08 f0       	brcs	.+2      	; 0x1244 <DIO_enumConnectPullup+0x28>
    1242:	3a c1       	rjmp	.+628    	; 0x14b8 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3e 83       	std	Y+6, r19	; 0x06
    124c:	2d 83       	std	Y+5, r18	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <DIO_enumConnectPullup+0x3e>
    1258:	5d c0       	rjmp	.+186    	; 0x1314 <DIO_enumConnectPullup+0xf8>
    125a:	2d 81       	ldd	r18, Y+5	; 0x05
    125c:	3e 81       	ldd	r19, Y+6	; 0x06
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	2c f4       	brge	.+10     	; 0x126e <DIO_enumConnectPullup+0x52>
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	71 f0       	breq	.+28     	; 0x1288 <DIO_enumConnectPullup+0x6c>
    126c:	26 c1       	rjmp	.+588    	; 0x14ba <DIO_enumConnectPullup+0x29e>
    126e:	2d 81       	ldd	r18, Y+5	; 0x05
    1270:	3e 81       	ldd	r19, Y+6	; 0x06
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <DIO_enumConnectPullup+0x5e>
    1278:	93 c0       	rjmp	.+294    	; 0x13a0 <DIO_enumConnectPullup+0x184>
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <DIO_enumConnectPullup+0x6a>
    1284:	d3 c0       	rjmp	.+422    	; 0x142c <DIO_enumConnectPullup+0x210>
    1286:	19 c1       	rjmp	.+562    	; 0x14ba <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	71 f5       	brne	.+92     	; 0x12ea <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    128e:	a0 e5       	ldi	r26, 0x50	; 80
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e0 e5       	ldi	r30, 0x50	; 80
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8b 7f       	andi	r24, 0xFB	; 251
    129a:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_enumConnectPullup+0x9c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	2a 95       	dec	r18
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_enumConnectPullup+0x98>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_enumConnectPullup+0xc4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_enumConnectPullup+0xc0>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	e8 c0       	rjmp	.+464    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_enumConnectPullup+0xec>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_enumConnectPullup+0xe8>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	d3 c0       	rjmp	.+422    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	71 f5       	brne	.+92     	; 0x1376 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    131a:	a0 e5       	ldi	r26, 0x50	; 80
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e0 e5       	ldi	r30, 0x50	; 80
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8b 7f       	andi	r24, 0xFB	; 251
    1326:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    1328:	a7 e3       	ldi	r26, 0x37	; 55
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e7 e3       	ldi	r30, 0x37	; 55
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_enumConnectPullup+0x128>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	2a 95       	dec	r18
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_enumConnectPullup+0x124>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    134e:	a8 e3       	ldi	r26, 0x38	; 56
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_enumConnectPullup+0x150>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_enumConnectPullup+0x14c>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	a2 c0       	rjmp	.+324    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    1376:	a8 e3       	ldi	r26, 0x38	; 56
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_enumConnectPullup+0x178>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_enumConnectPullup+0x174>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	8d c0       	rjmp	.+282    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	71 f5       	brne	.+92     	; 0x1402 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    13a6:	a0 e5       	ldi	r26, 0x50	; 80
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e0 e5       	ldi	r30, 0x50	; 80
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8b 7f       	andi	r24, 0xFB	; 251
    13b2:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    13b4:	a4 e3       	ldi	r26, 0x34	; 52
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e4 e3       	ldi	r30, 0x34	; 52
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enumConnectPullup+0x1b4>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	2a 95       	dec	r18
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enumConnectPullup+0x1b0>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    13da:	a5 e3       	ldi	r26, 0x35	; 53
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enumConnectPullup+0x1dc>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enumConnectPullup+0x1d8>
    13fc:	84 2b       	or	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	5c c0       	rjmp	.+184    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    1402:	a5 e3       	ldi	r26, 0x35	; 53
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e5 e3       	ldi	r30, 0x35	; 53
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enumConnectPullup+0x204>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_enumConnectPullup+0x200>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	47 c0       	rjmp	.+142    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	71 f5       	brne	.+92     	; 0x148e <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    1432:	a0 e5       	ldi	r26, 0x50	; 80
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e0 e5       	ldi	r30, 0x50	; 80
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8b 7f       	andi	r24, 0xFB	; 251
    143e:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    1440:	a1 e3       	ldi	r26, 0x31	; 49
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e1 e3       	ldi	r30, 0x31	; 49
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_enumConnectPullup+0x240>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	2a 95       	dec	r18
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_enumConnectPullup+0x23c>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    1466:	a2 e3       	ldi	r26, 0x32	; 50
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_enumConnectPullup+0x268>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_enumConnectPullup+0x264>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    148e:	a2 e3       	ldi	r26, 0x32	; 50
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e2 e3       	ldi	r30, 0x32	; 50
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_enumConnectPullup+0x290>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_enumConnectPullup+0x28c>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    14b8:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01


}
    14bc:	26 96       	adiw	r28, 0x06	; 6
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_enumSetPortDirection+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_enumSetPortDirection+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	a8 f5       	brcc	.+106    	; 0x1554 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3d 83       	std	Y+5, r19	; 0x05
    14f2:	2c 83       	std	Y+4, r18	; 0x04
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	d1 f0       	breq	.+52     	; 0x1532 <DIO_enumSetPortDirection+0x64>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <DIO_enumSetPortDirection+0x44>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 f0       	breq	.+24     	; 0x1528 <DIO_enumSetPortDirection+0x5a>
    1510:	1f c0       	rjmp	.+62     	; 0x1550 <DIO_enumSetPortDirection+0x82>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	81 f0       	breq	.+32     	; 0x153c <DIO_enumSetPortDirection+0x6e>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	81 f0       	breq	.+32     	; 0x1546 <DIO_enumSetPortDirection+0x78>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    1528:	ea e3       	ldi	r30, 0x3A	; 58
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	80 83       	st	Z, r24
    1530:	12 c0       	rjmp	.+36     	; 0x1556 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    1532:	e7 e3       	ldi	r30, 0x37	; 55
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	80 83       	st	Z, r24
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    153c:	e4 e3       	ldi	r30, 0x34	; 52
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	80 83       	st	Z, r24
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    1546:	e1 e3       	ldi	r30, 0x31	; 49
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	80 83       	st	Z, r24
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    1550:	19 82       	std	Y+1, r1	; 0x01
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1554:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_enumSetPortValue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_enumSetPortValue+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	a8 f5       	brcc	.+106    	; 0x15ee <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	3d 83       	std	Y+5, r19	; 0x05
    158c:	2c 83       	std	Y+4, r18	; 0x04
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	d1 f0       	breq	.+52     	; 0x15cc <DIO_enumSetPortValue+0x64>
    1598:	2c 81       	ldd	r18, Y+4	; 0x04
    159a:	3d 81       	ldd	r19, Y+5	; 0x05
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	31 05       	cpc	r19, r1
    15a0:	2c f4       	brge	.+10     	; 0x15ac <DIO_enumSetPortValue+0x44>
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	61 f0       	breq	.+24     	; 0x15c2 <DIO_enumSetPortValue+0x5a>
    15aa:	1f c0       	rjmp	.+62     	; 0x15ea <DIO_enumSetPortValue+0x82>
    15ac:	2c 81       	ldd	r18, Y+4	; 0x04
    15ae:	3d 81       	ldd	r19, Y+5	; 0x05
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	81 f0       	breq	.+32     	; 0x15d6 <DIO_enumSetPortValue+0x6e>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	81 f0       	breq	.+32     	; 0x15e0 <DIO_enumSetPortValue+0x78>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    15c2:	eb e3       	ldi	r30, 0x3B	; 59
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	80 83       	st	Z, r24
    15ca:	12 c0       	rjmp	.+36     	; 0x15f0 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	80 83       	st	Z, r24
    15d4:	0d c0       	rjmp	.+26     	; 0x15f0 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    15d6:	e5 e3       	ldi	r30, 0x35	; 53
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	80 83       	st	Z, r24
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    15e0:	e2 e3       	ldi	r30, 0x32	; 50
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	80 83       	st	Z, r24
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    15ea:	19 82       	std	Y+1, r1	; 0x01
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    15ee:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_enumTogglePortValue+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_enumTogglePortValue+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	08 f0       	brcs	.+2      	; 0x161c <DIO_enumTogglePortValue+0x1a>
    161a:	3f c0       	rjmp	.+126    	; 0x169a <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3c 83       	std	Y+4, r19	; 0x04
    1624:	2b 83       	std	Y+3, r18	; 0x03
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	e9 f0       	breq	.+58     	; 0x166a <DIO_enumTogglePortValue+0x68>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <DIO_enumTogglePortValue+0x42>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	61 f0       	breq	.+24     	; 0x165a <DIO_enumTogglePortValue+0x58>
    1642:	2c c0       	rjmp	.+88     	; 0x169c <DIO_enumTogglePortValue+0x9a>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	b1 f0       	breq	.+44     	; 0x167a <DIO_enumTogglePortValue+0x78>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	c9 f0       	breq	.+50     	; 0x168a <DIO_enumTogglePortValue+0x88>
    1658:	21 c0       	rjmp	.+66     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    165a:	ab e3       	ldi	r26, 0x3B	; 59
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	eb e3       	ldi	r30, 0x3B	; 59
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	80 95       	com	r24
    1666:	8c 93       	st	X, r24
    1668:	19 c0       	rjmp	.+50     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    166a:	a8 e3       	ldi	r26, 0x38	; 56
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e8 e3       	ldi	r30, 0x38	; 56
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 95       	com	r24
    1676:	8c 93       	st	X, r24
    1678:	11 c0       	rjmp	.+34     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 95       	com	r24
    1686:	8c 93       	st	X, r24
    1688:	09 c0       	rjmp	.+18     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    168a:	a2 e3       	ldi	r26, 0x32	; 50
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e2 e3       	ldi	r30, 0x32	; 50
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 95       	com	r24
    1696:	8c 93       	st	X, r24
    1698:	01 c0       	rjmp	.+2      	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    169a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_enumGetPortValue+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_enumGetPortValue+0x8>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_enumGetPortValue+0xa>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	7c 83       	std	Y+4, r23	; 0x04
    16be:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	e8 f5       	brcc	.+122    	; 0x1744 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3e 83       	std	Y+6, r19	; 0x06
    16d2:	2d 83       	std	Y+5, r18	; 0x05
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	e1 f0       	breq	.+56     	; 0x1716 <DIO_enumGetPortValue+0x6a>
    16de:	2d 81       	ldd	r18, Y+5	; 0x05
    16e0:	3e 81       	ldd	r19, Y+6	; 0x06
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <DIO_enumGetPortValue+0x46>
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	61 f0       	breq	.+24     	; 0x1708 <DIO_enumGetPortValue+0x5c>
    16f0:	27 c0       	rjmp	.+78     	; 0x1740 <DIO_enumGetPortValue+0x94>
    16f2:	2d 81       	ldd	r18, Y+5	; 0x05
    16f4:	3e 81       	ldd	r19, Y+6	; 0x06
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	a1 f0       	breq	.+40     	; 0x1724 <DIO_enumGetPortValue+0x78>
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	b1 f0       	breq	.+44     	; 0x1732 <DIO_enumGetPortValue+0x86>
    1706:	1c c0       	rjmp	.+56     	; 0x1740 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    1708:	e9 e3       	ldi	r30, 0x39	; 57
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	eb 81       	ldd	r30, Y+3	; 0x03
    1710:	fc 81       	ldd	r31, Y+4	; 0x04
    1712:	80 83       	st	Z, r24
    1714:	18 c0       	rjmp	.+48     	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    1716:	e6 e3       	ldi	r30, 0x36	; 54
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	eb 81       	ldd	r30, Y+3	; 0x03
    171e:	fc 81       	ldd	r31, Y+4	; 0x04
    1720:	80 83       	st	Z, r24
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    1724:	e3 e3       	ldi	r30, 0x33	; 51
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	eb 81       	ldd	r30, Y+3	; 0x03
    172c:	fc 81       	ldd	r31, Y+4	; 0x04
    172e:	80 83       	st	Z, r24
    1730:	0a c0       	rjmp	.+20     	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	eb 81       	ldd	r30, Y+3	; 0x03
    173a:	fc 81       	ldd	r31, Y+4	; 0x04
    173c:	80 83       	st	Z, r24
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    1740:	19 82       	std	Y+1, r1	; 0x01
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1744:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
}
    1748:	26 96       	adiw	r28, 0x06	; 6
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <DIO_voidWriteHighNibbles+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <DIO_voidWriteHighNibbles+0x8>
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	08 f0       	brcs	.+2      	; 0x1778 <DIO_voidWriteHighNibbles+0x1e>
    1776:	63 c0       	rjmp	.+198    	; 0x183e <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	82 95       	swap	r24
    177c:	80 7f       	andi	r24, 0xF0	; 240
    177e:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3d 83       	std	Y+5, r19	; 0x05
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	29 f1       	breq	.+74     	; 0x17de <DIO_voidWriteHighNibbles+0x84>
    1794:	2c 81       	ldd	r18, Y+4	; 0x04
    1796:	3d 81       	ldd	r19, Y+5	; 0x05
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <DIO_voidWriteHighNibbles+0x4e>
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <DIO_voidWriteHighNibbles+0x64>
    17a6:	4c c0       	rjmp	.+152    	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	31 f1       	breq	.+76     	; 0x17fe <DIO_voidWriteHighNibbles+0xa4>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	89 f1       	breq	.+98     	; 0x181e <DIO_voidWriteHighNibbles+0xc4>
    17bc:	41 c0       	rjmp	.+130    	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    17be:	ab e3       	ldi	r26, 0x3B	; 59
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 70       	andi	r24, 0x0F	; 15
    17ca:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    17cc:	ab e3       	ldi	r26, 0x3B	; 59
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	eb e3       	ldi	r30, 0x3B	; 59
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	90 81       	ld	r25, Z
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	89 2b       	or	r24, r25
    17da:	8c 93       	st	X, r24
    17dc:	31 c0       	rjmp	.+98     	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    17de:	a8 e3       	ldi	r26, 0x38	; 56
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e8 e3       	ldi	r30, 0x38	; 56
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 70       	andi	r24, 0x0F	; 15
    17ea:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    17ec:	a8 e3       	ldi	r26, 0x38	; 56
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e8 e3       	ldi	r30, 0x38	; 56
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	89 2b       	or	r24, r25
    17fa:	8c 93       	st	X, r24
    17fc:	21 c0       	rjmp	.+66     	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8f 70       	andi	r24, 0x0F	; 15
    180a:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    180c:	a5 e3       	ldi	r26, 0x35	; 53
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e5 e3       	ldi	r30, 0x35	; 53
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	90 81       	ld	r25, Z
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	89 2b       	or	r24, r25
    181a:	8c 93       	st	X, r24
    181c:	11 c0       	rjmp	.+34     	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    181e:	a2 e3       	ldi	r26, 0x32	; 50
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8f 70       	andi	r24, 0x0F	; 15
    182a:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    182c:	a2 e3       	ldi	r26, 0x32	; 50
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e2 e3       	ldi	r30, 0x32	; 50
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	90 81       	ld	r25, Z
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	89 2b       	or	r24, r25
    183a:	8c 93       	st	X, r24
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    183e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1840:	89 81       	ldd	r24, Y+1	; 0x01

}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <DIO_voidWriteLowNibbles+0x6>
    1858:	00 d0       	rcall	.+0      	; 0x185a <DIO_voidWriteLowNibbles+0x8>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	84 30       	cpi	r24, 0x04	; 4
    186c:	08 f0       	brcs	.+2      	; 0x1870 <DIO_voidWriteLowNibbles+0x1e>
    186e:	62 c0       	rjmp	.+196    	; 0x1934 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	8f 70       	andi	r24, 0x0F	; 15
    1874:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3d 83       	std	Y+5, r19	; 0x05
    187e:	2c 83       	std	Y+4, r18	; 0x04
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	29 f1       	breq	.+74     	; 0x18d4 <DIO_voidWriteLowNibbles+0x82>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	2c f4       	brge	.+10     	; 0x189e <DIO_voidWriteLowNibbles+0x4c>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	61 f0       	breq	.+24     	; 0x18b4 <DIO_voidWriteLowNibbles+0x62>
    189c:	4c c0       	rjmp	.+152    	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
    189e:	2c 81       	ldd	r18, Y+4	; 0x04
    18a0:	3d 81       	ldd	r19, Y+5	; 0x05
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	31 f1       	breq	.+76     	; 0x18f4 <DIO_voidWriteLowNibbles+0xa2>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	89 f1       	breq	.+98     	; 0x1914 <DIO_voidWriteLowNibbles+0xc2>
    18b2:	41 c0       	rjmp	.+130    	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    18b4:	ab e3       	ldi	r26, 0x3B	; 59
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	eb e3       	ldi	r30, 0x3B	; 59
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 7f       	andi	r24, 0xF0	; 240
    18c0:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	90 81       	ld	r25, Z
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	89 2b       	or	r24, r25
    18d0:	8c 93       	st	X, r24
    18d2:	31 c0       	rjmp	.+98     	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    18d4:	a8 e3       	ldi	r26, 0x38	; 56
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e8 e3       	ldi	r30, 0x38	; 56
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 7f       	andi	r24, 0xF0	; 240
    18e0:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
    18e2:	a8 e3       	ldi	r26, 0x38	; 56
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	90 81       	ld	r25, Z
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	89 2b       	or	r24, r25
    18f0:	8c 93       	st	X, r24
    18f2:	21 c0       	rjmp	.+66     	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    18f4:	a5 e3       	ldi	r26, 0x35	; 53
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e3       	ldi	r30, 0x35	; 53
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 7f       	andi	r24, 0xF0	; 240
    1900:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
    1902:	a5 e3       	ldi	r26, 0x35	; 53
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	90 81       	ld	r25, Z
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	89 2b       	or	r24, r25
    1910:	8c 93       	st	X, r24
    1912:	11 c0       	rjmp	.+34     	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    1914:	a2 e3       	ldi	r26, 0x32	; 50
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e2 e3       	ldi	r30, 0x32	; 50
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	80 7f       	andi	r24, 0xF0	; 240
    1920:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	90 81       	ld	r25, Z
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	89 2b       	or	r24, r25
    1930:	8c 93       	st	X, r24
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
    1934:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1936:	89 81       	ldd	r24, Y+1	; 0x01

}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <LED_voidInit>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidInit( LED_Type LED_Configuration )
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <LED_voidInit+0x6>
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	69 83       	std	Y+1, r22	; 0x01
    1956:	7a 83       	std	Y+2, r23	; 0x02
    1958:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	69 2f       	mov	r22, r25
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
	
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LED_voidOn>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidOn  ( LED_Type LED_Configuration )
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <LED_voidOn+0x6>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	69 83       	std	Y+1, r22	; 0x01
    1980:	7a 83       	std	Y+2, r23	; 0x02
    1982:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	39 f4       	brne	.+14     	; 0x1998 <LED_voidOn+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	69 2f       	mov	r22, r25
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <LED_voidOn+0x38>
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 23       	and	r24, r24
    199c:	31 f4       	brne	.+12     	; 0x19aa <LED_voidOn+0x38>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	69 2f       	mov	r22, r25
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
		
	}
	
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <LED_voidOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidOff ( LED_Type LED_Configuration )
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <LED_voidOff+0x6>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	69 83       	std	Y+1, r22	; 0x01
    19c4:	7a 83       	std	Y+2, r23	; 0x02
    19c6:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	39 f4       	brne	.+14     	; 0x19dc <LED_voidOff+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	69 2f       	mov	r22, r25
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
    19da:	09 c0       	rjmp	.+18     	; 0x19ee <LED_voidOff+0x38>
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 23       	and	r24, r24
    19e0:	31 f4       	brne	.+12     	; 0x19ee <LED_voidOff+0x38>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	69 2f       	mov	r22, r25
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
		
	}
	
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <LED_voidToggle>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidToggle      ( LED_Type LED_Configuration )
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <LED_voidToggle+0x6>
    1a00:	0f 92       	push	r0
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	69 83       	std	Y+1, r22	; 0x01
    1a08:	7a 83       	std	Y+2, r23	; 0x02
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue  ( LED_Configuration.Port , LED_Configuration.Pin );
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	69 2f       	mov	r22, r25
    1a12:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_enumTogglePinValue>
}
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    1a2a:	a3 e5       	ldi	r26, 0x53	; 83
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e3 e5       	ldi	r30, 0x53	; 83
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 7b       	andi	r24, 0xBF	; 191
    1a36:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    1a38:	a3 e5       	ldi	r26, 0x53	; 83
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e3 e5       	ldi	r30, 0x53	; 83
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	87 7f       	andi	r24, 0xF7	; 247
    1a44:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    1a46:	e2 e5       	ldi	r30, 0x52	; 82
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 ec       	ldi	r24, 0xC0	; 192
    1a4c:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    1a4e:	a9 e5       	ldi	r26, 0x59	; 89
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e9 e5       	ldi	r30, 0x59	; 89
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	81 60       	ori	r24, 0x01	; 1
    1a5a:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1a5c:	a3 e5       	ldi	r26, 0x53	; 83
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e3 e5       	ldi	r30, 0x53	; 83
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	88 7f       	andi	r24, 0xF8	; 248
    1a68:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    1a6a:	a3 e5       	ldi	r26, 0x53	; 83
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e3 e5       	ldi	r30, 0x53	; 83
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	82 60       	ori	r24, 0x02	; 2
    1a76:	8c 93       	st	X, r24
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1a86:	af e4       	ldi	r26, 0x4F	; 79
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	ef e4       	ldi	r30, 0x4F	; 79
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8e 7f       	andi	r24, 0xFE	; 254
    1a92:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1a94:	af e4       	ldi	r26, 0x4F	; 79
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	ef e4       	ldi	r30, 0x4F	; 79
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	82 60       	ori	r24, 0x02	; 2
    1aa0:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    1aa2:	ae e4       	ldi	r26, 0x4E	; 78
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ee e4       	ldi	r30, 0x4E	; 78
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 60       	ori	r24, 0x08	; 8
    1aae:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    1ab0:	ae e4       	ldi	r26, 0x4E	; 78
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ee e4       	ldi	r30, 0x4E	; 78
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 61       	ori	r24, 0x10	; 16
    1abc:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    1abe:	ea e4       	ldi	r30, 0x4A	; 74
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	84 ef       	ldi	r24, 0xF4	; 244
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    1aca:	e8 e4       	ldi	r30, 0x48	; 72
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	11 82       	std	Z+1, r1	; 0x01
    1ad0:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    1ad2:	e6 e4       	ldi	r30, 0x46	; 70
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 e2       	ldi	r24, 0x20	; 32
    1ad8:	9e e4       	ldi	r25, 0x4E	; 78
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    1ade:	ae e4       	ldi	r26, 0x4E	; 78
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	ee e4       	ldi	r30, 0x4E	; 78
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 64       	ori	r24, 0x40	; 64
    1aea:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    1aec:	af e4       	ldi	r26, 0x4F	; 79
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	ef e4       	ldi	r30, 0x4F	; 79
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	8f 7b       	andi	r24, 0xBF	; 191
    1af8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1afa:	af e4       	ldi	r26, 0x4F	; 79
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	ef e4       	ldi	r30, 0x4F	; 79
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 68       	ori	r24, 0x80	; 128
    1b06:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1b08:	af e4       	ldi	r26, 0x4F	; 79
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ef e4       	ldi	r30, 0x4F	; 79
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	8f 7e       	andi	r24, 0xEF	; 239
    1b14:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1b16:	af e4       	ldi	r26, 0x4F	; 79
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	ef e4       	ldi	r30, 0x4F	; 79
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 62       	ori	r24, 0x20	; 32
    1b22:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1b24:	a9 e5       	ldi	r26, 0x59	; 89
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e9 e5       	ldi	r30, 0x59	; 89
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8b 7f       	andi	r24, 0xFB	; 251
    1b30:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1b32:	a9 e5       	ldi	r26, 0x59	; 89
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e9 e5       	ldi	r30, 0x59	; 89
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8f 7e       	andi	r24, 0xEF	; 239
    1b3e:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    1b40:	a9 e5       	ldi	r26, 0x59	; 89
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e9 e5       	ldi	r30, 0x59	; 89
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	87 7f       	andi	r24, 0xF7	; 247
    1b4c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    1b4e:	a9 e5       	ldi	r26, 0x59	; 89
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e9 e5       	ldi	r30, 0x59	; 89
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8f 7d       	andi	r24, 0xDF	; 223
    1b5a:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    1b5c:	ae e4       	ldi	r26, 0x4E	; 78
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ee e4       	ldi	r30, 0x4E	; 78
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	88 7f       	andi	r24, 0xF8	; 248
    1b68:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    1b6a:	ae e4       	ldi	r26, 0x4E	; 78
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	ee e4       	ldi	r30, 0x4E	; 78
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	82 60       	ori	r24, 0x02	; 2
    1b76:	8c 93       	st	X, r24


}
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1b86:	a5 e4       	ldi	r26, 0x45	; 69
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e5 e4       	ldi	r30, 0x45	; 69
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	8f 7b       	andi	r24, 0xBF	; 191
    1b92:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    1b94:	a5 e4       	ldi	r26, 0x45	; 69
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e5 e4       	ldi	r30, 0x45	; 69
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	88 60       	ori	r24, 0x08	; 8
    1ba0:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    1ba2:	e3 e4       	ldi	r30, 0x43	; 67
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8d e7       	ldi	r24, 0x7D	; 125
    1ba8:	80 83       	st	Z, r24

			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    1baa:	a9 e5       	ldi	r26, 0x59	; 89
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e9 e5       	ldi	r30, 0x59	; 89
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 68       	ori	r24, 0x80	; 128
    1bb6:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1bb8:	a5 e4       	ldi	r26, 0x45	; 69
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e5 e4       	ldi	r30, 0x45	; 69
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 7f       	andi	r24, 0xF8	; 248
    1bc4:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1bc6:	a5 e4       	ldi	r26, 0x45	; 69
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e5 e4       	ldi	r30, 0x45	; 69
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	83 60       	ori	r24, 0x03	; 3
    1bd2:	8c 93       	st	X, r24
}
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	0f 92       	push	r0
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1be6:	e2 e5       	ldi	r30, 0x52	; 82
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	80 83       	st	Z, r24
}
    1bee:	0f 90       	pop	r0
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <TIMER1_voidSetPreload+0x6>
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1c04:	ec e4       	ldi	r30, 0x4C	; 76
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	0f 92       	push	r0
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
    1c24:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1c26:	e4 e4       	ldi	r30, 0x44	; 68
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	80 83       	st	Z, r24
}
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	0f 92       	push	r0
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    1c42:	ec e5       	ldi	r30, 0x5C	; 92
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	80 83       	st	Z, r24
}
    1c4a:	0f 90       	pop	r0
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <TIMER1_voidSetCTCA+0x6>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	9a 83       	std	Y+2, r25	; 0x02
    1c5e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    1c60:	ea e4       	ldi	r30, 0x4A	; 74
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	9a 81       	ldd	r25, Y+2	; 0x02
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
}
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <TIMER1_voidSetCTCB+0x6>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	9a 83       	std	Y+2, r25	; 0x02
    1c82:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    1c84:	e8 e4       	ldi	r30, 0x48	; 72
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	0f 92       	push	r0
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1ca6:	e3 e4       	ldi	r30, 0x43	; 67
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	80 83       	st	Z, r24
}
    1cae:	0f 90       	pop	r0
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <TIMER1_voidSetICR1+0x6>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1cc4:	e6 e4       	ldi	r30, 0x46	; 70
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	9a 81       	ldd	r25, Y+2	; 0x02
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    1ce2:	e2 e5       	ldi	r30, 0x52	; 82
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1cf6:	ec e4       	ldi	r30, 0x4C	; 76
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1d0c:	e4 e4       	ldi	r30, 0x44	; 68
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
}
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <TIMER_voidSetPWM+0x6>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1d26:	ea e4       	ldi	r30, 0x4A	; 74
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2e:	91 83       	std	Z+1, r25	; 0x01
    1d30:	80 83       	st	Z, r24
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1d44:	ae e4       	ldi	r26, 0x4E	; 78
    1d46:	b0 e0       	ldi	r27, 0x00	; 0
    1d48:	ee e4       	ldi	r30, 0x4E	; 78
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	80 64       	ori	r24, 0x40	; 64
    1d50:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1d52:	a9 e5       	ldi	r26, 0x59	; 89
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e9 e5       	ldi	r30, 0x59	; 89
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	80 62       	ori	r24, 0x20	; 32
    1d5e:	8c 93       	st	X, r24
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <TIMER_voidICUSetTriggerEdge+0x6>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    1d72:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	41 f4       	brne	.+16     	; 0x1d8a <TIMER_voidICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1d7a:	ae e4       	ldi	r26, 0x4E	; 78
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	ee e4       	ldi	r30, 0x4E	; 78
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	80 64       	ori	r24, 0x40	; 64
    1d86:	8c 93       	st	X, r24
    1d88:	0d c0       	rjmp	.+26     	; 0x1da4 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	88 23       	and	r24, r24
    1d8e:	41 f4       	brne	.+16     	; 0x1da0 <TIMER_voidICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1d90:	ae e4       	ldi	r26, 0x4E	; 78
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ee e4       	ldi	r30, 0x4E	; 78
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8f 7b       	andi	r24, 0xBF	; 191
    1d9c:	8c 93       	st	X, r24
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1db8:	a9 e5       	ldi	r26, 0x59	; 89
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e9 e5       	ldi	r30, 0x59	; 89
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	80 62       	ori	r24, 0x20	; 32
    1dc4:	8c 93       	st	X, r24
}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1dd4:	a9 e5       	ldi	r26, 0x59	; 89
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e9 e5       	ldi	r30, 0x59	; 89
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	8f 7d       	andi	r24, 0xDF	; 223
    1de0:	8c 93       	st	X, r24
}
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1df0:	e6 e4       	ldi	r30, 0x46	; 70
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	91 81       	ldd	r25, Z+1	; 0x01
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <TIMER_voidWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1e06:	a1 e4       	ldi	r26, 0x41	; 65
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e1 e4       	ldi	r30, 0x41	; 65
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	88 7f       	andi	r24, 0xF8	; 248
    1e12:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1e14:	a1 e4       	ldi	r26, 0x41	; 65
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e1 e4       	ldi	r30, 0x41	; 65
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	86 60       	ori	r24, 0x06	; 6
    1e20:	8c 93       	st	X, r24
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    1e30:	a1 e4       	ldi	r26, 0x41	; 65
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e1 e4       	ldi	r30, 0x41	; 65
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	88 60       	ori	r24, 0x08	; 8
    1e3c:	8c 93       	st	X, r24
}
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1e4c:	a1 e4       	ldi	r26, 0x41	; 65
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e1 e4       	ldi	r30, 0x41	; 65
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 61       	ori	r24, 0x18	; 24
    1e58:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1e5a:	e1 e4       	ldi	r30, 0x41	; 65
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	10 82       	st	Z, r1
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	08 95       	ret

00001e66 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <TIMER_u8SetCallBack+0x6>
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <TIMER_u8SetCallBack+0x8>
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	9b 83       	std	Y+3, r25	; 0x03
    1e74:	8a 83       	std	Y+2, r24	; 0x02
    1e76:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    1e78:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	69 f0       	breq	.+26     	; 0x1e9c <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	e4 59       	subi	r30, 0x94	; 148
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	91 83       	std	Z+1, r25	; 0x01
    1e98:	80 83       	st	Z, r24
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1eb0:	1f 92       	push	r1
    1eb2:	0f 92       	push	r0
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	0f 92       	push	r0
    1eb8:	11 24       	eor	r1, r1
    1eba:	2f 93       	push	r18
    1ebc:	3f 93       	push	r19
    1ebe:	4f 93       	push	r20
    1ec0:	5f 93       	push	r21
    1ec2:	6f 93       	push	r22
    1ec4:	7f 93       	push	r23
    1ec6:	8f 93       	push	r24
    1ec8:	9f 93       	push	r25
    1eca:	af 93       	push	r26
    1ecc:	bf 93       	push	r27
    1ece:	ef 93       	push	r30
    1ed0:	ff 93       	push	r31
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    1eda:	80 91 82 00 	lds	r24, 0x0082
    1ede:	90 91 83 00 	lds	r25, 0x0083
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	29 f0       	breq	.+10     	; 0x1ef0 <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1ee6:	e0 91 82 00 	lds	r30, 0x0082
    1eea:	f0 91 83 00 	lds	r31, 0x0083
    1eee:	09 95       	icall
	}
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	bf 91       	pop	r27
    1efa:	af 91       	pop	r26
    1efc:	9f 91       	pop	r25
    1efe:	8f 91       	pop	r24
    1f00:	7f 91       	pop	r23
    1f02:	6f 91       	pop	r22
    1f04:	5f 91       	pop	r21
    1f06:	4f 91       	pop	r20
    1f08:	3f 91       	pop	r19
    1f0a:	2f 91       	pop	r18
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	0f 90       	pop	r0
    1f12:	1f 90       	pop	r1
    1f14:	18 95       	reti

00001f16 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    1f40:	80 91 80 00 	lds	r24, 0x0080
    1f44:	90 91 81 00 	lds	r25, 0x0081
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	29 f0       	breq	.+10     	; 0x1f56 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    1f4c:	e0 91 80 00 	lds	r30, 0x0080
    1f50:	f0 91 81 00 	lds	r31, 0x0081
    1f54:	09 95       	icall
	}
}
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	ff 91       	pop	r31
    1f5c:	ef 91       	pop	r30
    1f5e:	bf 91       	pop	r27
    1f60:	af 91       	pop	r26
    1f62:	9f 91       	pop	r25
    1f64:	8f 91       	pop	r24
    1f66:	7f 91       	pop	r23
    1f68:	6f 91       	pop	r22
    1f6a:	5f 91       	pop	r21
    1f6c:	4f 91       	pop	r20
    1f6e:	3f 91       	pop	r19
    1f70:	2f 91       	pop	r18
    1f72:	0f 90       	pop	r0
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	0f 90       	pop	r0
    1f78:	1f 90       	pop	r1
    1f7a:	18 95       	reti

00001f7c <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    1f7c:	1f 92       	push	r1
    1f7e:	0f 92       	push	r0
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	0f 92       	push	r0
    1f84:	11 24       	eor	r1, r1
    1f86:	2f 93       	push	r18
    1f88:	3f 93       	push	r19
    1f8a:	4f 93       	push	r20
    1f8c:	5f 93       	push	r21
    1f8e:	6f 93       	push	r22
    1f90:	7f 93       	push	r23
    1f92:	8f 93       	push	r24
    1f94:	9f 93       	push	r25
    1f96:	af 93       	push	r26
    1f98:	bf 93       	push	r27
    1f9a:	ef 93       	push	r30
    1f9c:	ff 93       	push	r31
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1fa6:	80 91 7e 00 	lds	r24, 0x007E
    1faa:	90 91 7f 00 	lds	r25, 0x007F
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	29 f0       	breq	.+10     	; 0x1fbc <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1fb2:	e0 91 7e 00 	lds	r30, 0x007E
    1fb6:	f0 91 7f 00 	lds	r31, 0x007F
    1fba:	09 95       	icall
	}
}
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	7f 91       	pop	r23
    1fce:	6f 91       	pop	r22
    1fd0:	5f 91       	pop	r21
    1fd2:	4f 91       	pop	r20
    1fd4:	3f 91       	pop	r19
    1fd6:	2f 91       	pop	r18
    1fd8:	0f 90       	pop	r0
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	0f 90       	pop	r0
    1fde:	1f 90       	pop	r1
    1fe0:	18 95       	reti

00001fe2 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1fe2:	1f 92       	push	r1
    1fe4:	0f 92       	push	r0
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	0f 92       	push	r0
    1fea:	11 24       	eor	r1, r1
    1fec:	2f 93       	push	r18
    1fee:	3f 93       	push	r19
    1ff0:	4f 93       	push	r20
    1ff2:	5f 93       	push	r21
    1ff4:	6f 93       	push	r22
    1ff6:	7f 93       	push	r23
    1ff8:	8f 93       	push	r24
    1ffa:	9f 93       	push	r25
    1ffc:	af 93       	push	r26
    1ffe:	bf 93       	push	r27
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    200c:	80 91 7c 00 	lds	r24, 0x007C
    2010:	90 91 7d 00 	lds	r25, 0x007D
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	29 f0       	breq	.+10     	; 0x2022 <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    2018:	e0 91 7c 00 	lds	r30, 0x007C
    201c:	f0 91 7d 00 	lds	r31, 0x007D
    2020:	09 95       	icall
	}
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	ff 91       	pop	r31
    2028:	ef 91       	pop	r30
    202a:	bf 91       	pop	r27
    202c:	af 91       	pop	r26
    202e:	9f 91       	pop	r25
    2030:	8f 91       	pop	r24
    2032:	7f 91       	pop	r23
    2034:	6f 91       	pop	r22
    2036:	5f 91       	pop	r21
    2038:	4f 91       	pop	r20
    203a:	3f 91       	pop	r19
    203c:	2f 91       	pop	r18
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	2f 93       	push	r18
    2054:	3f 93       	push	r19
    2056:	4f 93       	push	r20
    2058:	5f 93       	push	r21
    205a:	6f 93       	push	r22
    205c:	7f 93       	push	r23
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	ef 93       	push	r30
    2068:	ff 93       	push	r31
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    2072:	80 91 7a 00 	lds	r24, 0x007A
    2076:	90 91 7b 00 	lds	r25, 0x007B
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	29 f0       	breq	.+10     	; 0x2088 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    207e:	e0 91 7a 00 	lds	r30, 0x007A
    2082:	f0 91 7b 00 	lds	r31, 0x007B
    2086:	09 95       	icall
	}
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	ff 91       	pop	r31
    208e:	ef 91       	pop	r30
    2090:	bf 91       	pop	r27
    2092:	af 91       	pop	r26
    2094:	9f 91       	pop	r25
    2096:	8f 91       	pop	r24
    2098:	7f 91       	pop	r23
    209a:	6f 91       	pop	r22
    209c:	5f 91       	pop	r21
    209e:	4f 91       	pop	r20
    20a0:	3f 91       	pop	r19
    20a2:	2f 91       	pop	r18
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	0f 90       	pop	r0
    20aa:	1f 90       	pop	r1
    20ac:	18 95       	reti

000020ae <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    20ae:	1f 92       	push	r1
    20b0:	0f 92       	push	r0
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	0f 92       	push	r0
    20b6:	11 24       	eor	r1, r1
    20b8:	2f 93       	push	r18
    20ba:	3f 93       	push	r19
    20bc:	4f 93       	push	r20
    20be:	5f 93       	push	r21
    20c0:	6f 93       	push	r22
    20c2:	7f 93       	push	r23
    20c4:	8f 93       	push	r24
    20c6:	9f 93       	push	r25
    20c8:	af 93       	push	r26
    20ca:	bf 93       	push	r27
    20cc:	ef 93       	push	r30
    20ce:	ff 93       	push	r31
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    20d8:	80 91 78 00 	lds	r24, 0x0078
    20dc:	90 91 79 00 	lds	r25, 0x0079
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	29 f0       	breq	.+10     	; 0x20ee <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    20e4:	e0 91 78 00 	lds	r30, 0x0078
    20e8:	f0 91 79 00 	lds	r31, 0x0079
    20ec:	09 95       	icall
	}
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	ff 91       	pop	r31
    20f4:	ef 91       	pop	r30
    20f6:	bf 91       	pop	r27
    20f8:	af 91       	pop	r26
    20fa:	9f 91       	pop	r25
    20fc:	8f 91       	pop	r24
    20fe:	7f 91       	pop	r23
    2100:	6f 91       	pop	r22
    2102:	5f 91       	pop	r21
    2104:	4f 91       	pop	r20
    2106:	3f 91       	pop	r19
    2108:	2f 91       	pop	r18
    210a:	0f 90       	pop	r0
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	0f 90       	pop	r0
    2110:	1f 90       	pop	r1
    2112:	18 95       	reti

00002114 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    213e:	80 91 76 00 	lds	r24, 0x0076
    2142:	90 91 77 00 	lds	r25, 0x0077
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	29 f0       	breq	.+10     	; 0x2154 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    214a:	e0 91 76 00 	lds	r30, 0x0076
    214e:	f0 91 77 00 	lds	r31, 0x0077
    2152:	09 95       	icall
	}
}
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	ff 91       	pop	r31
    215a:	ef 91       	pop	r30
    215c:	bf 91       	pop	r27
    215e:	af 91       	pop	r26
    2160:	9f 91       	pop	r25
    2162:	8f 91       	pop	r24
    2164:	7f 91       	pop	r23
    2166:	6f 91       	pop	r22
    2168:	5f 91       	pop	r21
    216a:	4f 91       	pop	r20
    216c:	3f 91       	pop	r19
    216e:	2f 91       	pop	r18
    2170:	0f 90       	pop	r0
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	0f 90       	pop	r0
    2176:	1f 90       	pop	r1
    2178:	18 95       	reti

0000217a <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    217a:	1f 92       	push	r1
    217c:	0f 92       	push	r0
    217e:	0f b6       	in	r0, 0x3f	; 63
    2180:	0f 92       	push	r0
    2182:	11 24       	eor	r1, r1
    2184:	2f 93       	push	r18
    2186:	3f 93       	push	r19
    2188:	4f 93       	push	r20
    218a:	5f 93       	push	r21
    218c:	6f 93       	push	r22
    218e:	7f 93       	push	r23
    2190:	8f 93       	push	r24
    2192:	9f 93       	push	r25
    2194:	af 93       	push	r26
    2196:	bf 93       	push	r27
    2198:	ef 93       	push	r30
    219a:	ff 93       	push	r31
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    21a4:	80 91 74 00 	lds	r24, 0x0074
    21a8:	90 91 75 00 	lds	r25, 0x0075
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	29 f0       	breq	.+10     	; 0x21ba <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    21b0:	e0 91 74 00 	lds	r30, 0x0074
    21b4:	f0 91 75 00 	lds	r31, 0x0075
    21b8:	09 95       	icall
	}
}
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	ff 91       	pop	r31
    21c0:	ef 91       	pop	r30
    21c2:	bf 91       	pop	r27
    21c4:	af 91       	pop	r26
    21c6:	9f 91       	pop	r25
    21c8:	8f 91       	pop	r24
    21ca:	7f 91       	pop	r23
    21cc:	6f 91       	pop	r22
    21ce:	5f 91       	pop	r21
    21d0:	4f 91       	pop	r20
    21d2:	3f 91       	pop	r19
    21d4:	2f 91       	pop	r18
    21d6:	0f 90       	pop	r0
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	0f 90       	pop	r0
    21dc:	1f 90       	pop	r1
    21de:	18 95       	reti

000021e0 <main>:
#include <util/delay.h>

LED_Type MY_LED = {LED_PORTA,LED_PIN0,ACTIVE_HIGH};

int main(void)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	2e 97       	sbiw	r28, 0x0e	; 14
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
	LED_voidInit(MY_LED);
    21f4:	60 91 68 00 	lds	r22, 0x0068
    21f8:	70 91 69 00 	lds	r23, 0x0069
    21fc:	80 91 6a 00 	lds	r24, 0x006A
    2200:	0e 94 a4 0c 	call	0x1948	; 0x1948 <LED_voidInit>
	TIMER_voidWDTSleep();
    2204:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TIMER_voidWDTSleep>
	TIMER_voidWDTEnable();
    2208:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <TIMER_voidWDTEnable>

	while (1)
	{
		LED_voidToggle(MY_LED);
    220c:	60 91 68 00 	lds	r22, 0x0068
    2210:	70 91 69 00 	lds	r23, 0x0069
    2214:	80 91 6a 00 	lds	r24, 0x006A
    2218:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LED_voidToggle>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	aa e7       	ldi	r26, 0x7A	; 122
    2222:	b4 e4       	ldi	r27, 0x44	; 68
    2224:	8b 87       	std	Y+11, r24	; 0x0b
    2226:	9c 87       	std	Y+12, r25	; 0x0c
    2228:	ad 87       	std	Y+13, r26	; 0x0d
    222a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a ef       	ldi	r20, 0xFA	; 250
    223a:	54 e4       	ldi	r21, 0x44	; 68
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8f 83       	std	Y+7, r24	; 0x07
    2246:	98 87       	std	Y+8, r25	; 0x08
    2248:	a9 87       	std	Y+9, r26	; 0x09
    224a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <main+0x8e>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <main+0x10c>
	else if (__tmp > 65535)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6b 85       	ldd	r22, Y+11	; 0x0b
    2288:	7c 85       	ldd	r23, Y+12	; 0x0c
    228a:	8d 85       	ldd	r24, Y+13	; 0x0d
    228c:	9e 85       	ldd	r25, Y+14	; 0x0e
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <main+0xee>
    22b0:	88 ec       	ldi	r24, 0xC8	; 200
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <main+0xdc>
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <main+0xd0>
    22d6:	9a cf       	rjmp	.-204    	; 0x220c <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	8d 83       	std	Y+5, r24	; 0x05
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <main+0x118>
    22fc:	9a 83       	std	Y+2, r25	; 0x02
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	85 cf       	rjmp	.-246    	; 0x220c <main+0x2c>

00002302 <__prologue_saves__>:
    2302:	2f 92       	push	r2
    2304:	3f 92       	push	r3
    2306:	4f 92       	push	r4
    2308:	5f 92       	push	r5
    230a:	6f 92       	push	r6
    230c:	7f 92       	push	r7
    230e:	8f 92       	push	r8
    2310:	9f 92       	push	r9
    2312:	af 92       	push	r10
    2314:	bf 92       	push	r11
    2316:	cf 92       	push	r12
    2318:	df 92       	push	r13
    231a:	ef 92       	push	r14
    231c:	ff 92       	push	r15
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	ca 1b       	sub	r28, r26
    232c:	db 0b       	sbc	r29, r27
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	09 94       	ijmp

0000233a <__epilogue_restores__>:
    233a:	2a 88       	ldd	r2, Y+18	; 0x12
    233c:	39 88       	ldd	r3, Y+17	; 0x11
    233e:	48 88       	ldd	r4, Y+16	; 0x10
    2340:	5f 84       	ldd	r5, Y+15	; 0x0f
    2342:	6e 84       	ldd	r6, Y+14	; 0x0e
    2344:	7d 84       	ldd	r7, Y+13	; 0x0d
    2346:	8c 84       	ldd	r8, Y+12	; 0x0c
    2348:	9b 84       	ldd	r9, Y+11	; 0x0b
    234a:	aa 84       	ldd	r10, Y+10	; 0x0a
    234c:	b9 84       	ldd	r11, Y+9	; 0x09
    234e:	c8 84       	ldd	r12, Y+8	; 0x08
    2350:	df 80       	ldd	r13, Y+7	; 0x07
    2352:	ee 80       	ldd	r14, Y+6	; 0x06
    2354:	fd 80       	ldd	r15, Y+5	; 0x05
    2356:	0c 81       	ldd	r16, Y+4	; 0x04
    2358:	1b 81       	ldd	r17, Y+3	; 0x03
    235a:	aa 81       	ldd	r26, Y+2	; 0x02
    235c:	b9 81       	ldd	r27, Y+1	; 0x01
    235e:	ce 0f       	add	r28, r30
    2360:	d1 1d       	adc	r29, r1
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	ed 01       	movw	r28, r26
    236e:	08 95       	ret

00002370 <_exit>:
    2370:	f8 94       	cli

00002372 <__stop_program>:
    2372:	ff cf       	rjmp	.-2      	; 0x2372 <__stop_program>
