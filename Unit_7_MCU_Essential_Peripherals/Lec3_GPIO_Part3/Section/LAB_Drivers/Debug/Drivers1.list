
Drivers1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000be0  08000be0  00010be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c0c  08000c0c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000c0c  08000c0c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c0c  08000c0c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000020  08000c34  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  08000c34  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030d1  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000817  00000000  00000000  0002311a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007cc  00000000  00000000  00023931  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000158  00000000  00000000  00024100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fb9  00000000  00000000  00024368  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a3c  00000000  00000000  00026321  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007b30  00000000  00000000  00027d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f88d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000414  00000000  00000000  0002f908  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bc8 	.word	0x08000bc8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000bc8 	.word	0x08000bc8

08000170 <clock_init>:
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	RCC_GPIOB_CLK_EN();
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000

08000198 <GPIO_init>:
void GPIO_init() {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
//	MCAL_GPIO_Init(GPIOA, &PinCfg);

//PB1 (output PUSH pull Mode)
//01: Output mode, max speed 10 MHz.
//CNF 00: General purpose output push-pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800019e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001a2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a4:	2304      	movs	r3, #4
 80001a6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	4619      	mov	r1, r3
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <GPIO_init+0xb8>)
 80001b2:	f000 fc2a 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80001b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	4821      	ldr	r0, [pc, #132]	; (8000250 <GPIO_init+0xb8>)
 80001ca:	f000 fc1e 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001d2:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d4:	2304      	movs	r3, #4
 80001d6:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001d8:	2301      	movs	r3, #1
 80001da:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	481b      	ldr	r0, [pc, #108]	; (8000250 <GPIO_init+0xb8>)
 80001e2:	f000 fc12 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 80001e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ea:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001ec:	2304      	movs	r3, #4
 80001ee:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001f0:	2301      	movs	r3, #1
 80001f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4815      	ldr	r0, [pc, #84]	; (8000250 <GPIO_init+0xb8>)
 80001fa:	f000 fc06 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 80001fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000202:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000208:	2301      	movs	r3, #1
 800020a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	4619      	mov	r1, r3
 8000210:	480f      	ldr	r0, [pc, #60]	; (8000250 <GPIO_init+0xb8>)
 8000212:	f000 fbfa 	bl	8000a0a <MCAL_GPIO_Init>

	//============================

	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000216:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800021a:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800021c:	2304      	movs	r3, #4
 800021e:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000220:	2301      	movs	r3, #1
 8000222:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <GPIO_init+0xb8>)
 800022a:	f000 fbee 	bl	8000a0a <MCAL_GPIO_Init>

	//PB13 (output PUSH pull Mode)
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000234:	2304      	movs	r3, #4
 8000236:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000238:	2301      	movs	r3, #1
 800023a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4803      	ldr	r0, [pc, #12]	; (8000250 <GPIO_init+0xb8>)
 8000242:	f000 fbe2 	bl	8000a0a <MCAL_GPIO_Init>

}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <wait_ms>:
void wait_ms(uint32_t time) {
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e00b      	b.n	800027a <wait_ms+0x26>
		for (j = 0; j < 255; j++)
 8000262:	2300      	movs	r3, #0
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	e002      	b.n	800026e <wait_ms+0x1a>
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	3301      	adds	r3, #1
 800026c:	60bb      	str	r3, [r7, #8]
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	2bfe      	cmp	r3, #254	; 0xfe
 8000272:	d9f9      	bls.n	8000268 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3301      	adds	r3, #1
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	429a      	cmp	r2, r3
 8000280:	d3ef      	bcc.n	8000262 <wait_ms+0xe>
			;
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <main>:
int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0

	clock_init();
 8000292:	f7ff ff6d 	bl	8000170 <clock_init>
	LCD_INIT();
 8000296:	f000 facb 	bl	8000830 <LCD_INIT>
	unsigned char key_pressed;
	LCD_WRITE_STRING("HEY");
 800029a:	482e      	ldr	r0, [pc, #184]	; (8000354 <main+0xc8>)
 800029c:	f000 fb26 	bl	80008ec <LCD_WRITE_STRING>
	wait_ms(30);
 80002a0:	201e      	movs	r0, #30
 80002a2:	f7ff ffd7 	bl	8000254 <wait_ms>
	LCD_clear_screen();
 80002a6:	f000 fa81 	bl	80007ac <LCD_clear_screen>
	GPIO_init();
 80002aa:	f7ff ff75 	bl	8000198 <GPIO_init>
	unsigned char LCD_DISPLAY [11] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'};
 80002ae:	4a2a      	ldr	r2, [pc, #168]	; (8000358 <main+0xcc>)
 80002b0:	f107 0310 	add.w	r3, r7, #16
 80002b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80002b6:	c303      	stmia	r3!, {r0, r1}
 80002b8:	801a      	strh	r2, [r3, #0]
 80002ba:	3302      	adds	r3, #2
 80002bc:	0c12      	lsrs	r2, r2, #16
 80002be:	701a      	strb	r2, [r3, #0]
	unsigned char DISPLAY [11] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, ZERO};
 80002c0:	4a26      	ldr	r2, [pc, #152]	; (800035c <main+0xd0>)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c6:	c303      	stmia	r3!, {r0, r1}
 80002c8:	801a      	strh	r2, [r3, #0]
 80002ca:	3302      	adds	r3, #2
 80002cc:	0c12      	lsrs	r2, r2, #16
 80002ce:	701a      	strb	r2, [r3, #0]
	for (unsigned char i = 0; i < 11; i++) {
 80002d0:	2300      	movs	r3, #0
 80002d2:	77fb      	strb	r3, [r7, #31]
 80002d4:	e01b      	b.n	800030e <main+0x82>
		LCD_WRITE_CHAR(LCD_DISPLAY[i]);
 80002d6:	7ffb      	ldrb	r3, [r7, #31]
 80002d8:	f107 0220 	add.w	r2, r7, #32
 80002dc:	4413      	add	r3, r2
 80002de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fae0 	bl	80008a8 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, DISPLAY[i] << 9); /* write data on to the LED port */
 80002e8:	7ffb      	ldrb	r3, [r7, #31]
 80002ea:	f107 0220 	add.w	r2, r7, #32
 80002ee:	4413      	add	r3, r2
 80002f0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	025b      	lsls	r3, r3, #9
 80002f8:	b29b      	uxth	r3, r3
 80002fa:	4619      	mov	r1, r3
 80002fc:	4818      	ldr	r0, [pc, #96]	; (8000360 <main+0xd4>)
 80002fe:	f000 fc31 	bl	8000b64 <MCAL_GPIO_WritePort>
		wait_ms(100);
 8000302:	2064      	movs	r0, #100	; 0x64
 8000304:	f7ff ffa6 	bl	8000254 <wait_ms>
	for (unsigned char i = 0; i < 11; i++) {
 8000308:	7ffb      	ldrb	r3, [r7, #31]
 800030a:	3301      	adds	r3, #1
 800030c:	77fb      	strb	r3, [r7, #31]
 800030e:	7ffb      	ldrb	r3, [r7, #31]
 8000310:	2b0a      	cmp	r3, #10
 8000312:	d9e0      	bls.n	80002d6 <main+0x4a>
		/* wait for 1 second */
	}
//	MCAL_GPIO_WritePort(GPIOB, 0xDE);
//	wait_ms(100);
	LCD_clear_screen();
 8000314:	f000 fa4a 	bl	80007ac <LCD_clear_screen>
	Keypad_init();
 8000318:	f000 f850 	bl	80003bc <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 800031c:	4811      	ldr	r0, [pc, #68]	; (8000364 <main+0xd8>)
 800031e:	f000 fae5 	bl	80008ec <LCD_WRITE_STRING>
	wait_ms(30);
 8000322:	201e      	movs	r0, #30
 8000324:	f7ff ff96 	bl	8000254 <wait_ms>
	LCD_clear_screen();
 8000328:	f000 fa40 	bl	80007ac <LCD_clear_screen>

	while (1) {

		key_pressed = Keypad_getkey();
 800032c:	f000 f8ac 	bl	8000488 <Keypad_getkey>
 8000330:	4603      	mov	r3, r0
 8000332:	77bb      	strb	r3, [r7, #30]
		switch (key_pressed) {
 8000334:	7fbb      	ldrb	r3, [r7, #30]
 8000336:	2b3f      	cmp	r3, #63	; 0x3f
 8000338:	d002      	beq.n	8000340 <main+0xb4>
 800033a:	2b41      	cmp	r3, #65	; 0x41
 800033c:	d008      	beq.n	8000350 <main+0xc4>
 800033e:	e002      	b.n	8000346 <main+0xba>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000340:	f000 fa34 	bl	80007ac <LCD_clear_screen>
			break;
 8000344:	e005      	b.n	8000352 <main+0xc6>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000346:	7fbb      	ldrb	r3, [r7, #30]
 8000348:	4618      	mov	r0, r3
 800034a:	f000 faad 	bl	80008a8 <LCD_WRITE_CHAR>
			break;
 800034e:	e000      	b.n	8000352 <main+0xc6>
			break;
 8000350:	bf00      	nop
		key_pressed = Keypad_getkey();
 8000352:	e7eb      	b.n	800032c <main+0xa0>
 8000354:	08000be0 	.word	0x08000be0
 8000358:	08000bf4 	.word	0x08000bf4
 800035c:	08000c00 	.word	0x08000c00
 8000360:	40010c00 	.word	0x40010c00
 8000364:	08000be4 	.word	0x08000be4

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 fbf3 	bl	8000b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff77 	bl	800028c <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003ac:	08000c14 	.word	0x08000c14
  ldr r2, =_sbss
 80003b0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003b4:	20000040 	.word	0x20000040

080003b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC1_2_IRQHandler>
	...

080003bc <Keypad_init>:
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
//	KEYPAD_PORT = 0xFF;
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R0;
 80003c2:	2301      	movs	r3, #1
 80003c4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c6:	2304      	movs	r3, #4
 80003c8:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ca:	2301      	movs	r3, #1
 80003cc:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	482c      	ldr	r0, [pc, #176]	; (8000484 <Keypad_init+0xc8>)
 80003d4:	f000 fb19 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 80003d8:	2302      	movs	r3, #2
 80003da:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003dc:	2304      	movs	r3, #4
 80003de:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003e0:	2301      	movs	r3, #1
 80003e2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4619      	mov	r1, r3
 80003e8:	4826      	ldr	r0, [pc, #152]	; (8000484 <Keypad_init+0xc8>)
 80003ea:	f000 fb0e 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 80003ee:	2308      	movs	r3, #8
 80003f0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003f2:	2304      	movs	r3, #4
 80003f4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003f6:	2301      	movs	r3, #1
 80003f8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4619      	mov	r1, r3
 80003fe:	4821      	ldr	r0, [pc, #132]	; (8000484 <Keypad_init+0xc8>)
 8000400:	f000 fb03 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 8000404:	2310      	movs	r3, #16
 8000406:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000408:	2304      	movs	r3, #4
 800040a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800040c:	2301      	movs	r3, #1
 800040e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	4619      	mov	r1, r3
 8000414:	481b      	ldr	r0, [pc, #108]	; (8000484 <Keypad_init+0xc8>)
 8000416:	f000 faf8 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 800041a:	2320      	movs	r3, #32
 800041c:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800041e:	2304      	movs	r3, #4
 8000420:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000422:	2301      	movs	r3, #1
 8000424:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	4816      	ldr	r0, [pc, #88]	; (8000484 <Keypad_init+0xc8>)
 800042c:	f000 faed 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000434:	2304      	movs	r3, #4
 8000436:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000438:	2301      	movs	r3, #1
 800043a:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4619      	mov	r1, r3
 8000440:	4810      	ldr	r0, [pc, #64]	; (8000484 <Keypad_init+0xc8>)
 8000442:	f000 fae2 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800044a:	2304      	movs	r3, #4
 800044c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800044e:	2301      	movs	r3, #1
 8000450:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4619      	mov	r1, r3
 8000456:	480b      	ldr	r0, [pc, #44]	; (8000484 <Keypad_init+0xc8>)
 8000458:	f000 fad7 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3;
 800045c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000460:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000462:	2304      	movs	r3, #4
 8000464:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000466:	2301      	movs	r3, #1
 8000468:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <Keypad_init+0xc8>)
 8000470:	f000 facb 	bl	8000a0a <MCAL_GPIO_Init>
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000474:	21ff      	movs	r1, #255	; 0xff
 8000476:	4803      	ldr	r0, [pc, #12]	; (8000484 <Keypad_init+0xc8>)
 8000478:	f000 fb74 	bl	8000b64 <MCAL_GPIO_WritePort>

}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40010c00 	.word	0x40010c00

08000488 <Keypad_getkey>:

char Keypad_getkey() {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < 4; i++) {
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	e0b4      	b.n	80005fe <Keypad_getkey+0x176>
//		KEYPAD_PORT |= ((1 << Key_padCol[0]) | (1 << Key_padCol[1])
//				| (1 << Key_padCol[2]) | (1 << Key_padCol[3]));
//		KEYPAD_PORT &= ~(1 << Key_padCol[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 8000494:	4b5e      	ldr	r3, [pc, #376]	; (8000610 <Keypad_getkey+0x188>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	2201      	movs	r2, #1
 800049c:	4619      	mov	r1, r3
 800049e:	485d      	ldr	r0, [pc, #372]	; (8000614 <Keypad_getkey+0x18c>)
 80004a0:	f000 fb49 	bl	8000b36 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 80004a4:	4b5a      	ldr	r3, [pc, #360]	; (8000610 <Keypad_getkey+0x188>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	2201      	movs	r2, #1
 80004ac:	4619      	mov	r1, r3
 80004ae:	4859      	ldr	r0, [pc, #356]	; (8000614 <Keypad_getkey+0x18c>)
 80004b0:	f000 fb41 	bl	8000b36 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 80004b4:	4b56      	ldr	r3, [pc, #344]	; (8000610 <Keypad_getkey+0x188>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	2201      	movs	r2, #1
 80004bc:	4619      	mov	r1, r3
 80004be:	4855      	ldr	r0, [pc, #340]	; (8000614 <Keypad_getkey+0x18c>)
 80004c0:	f000 fb39 	bl	8000b36 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 80004c4:	4b52      	ldr	r3, [pc, #328]	; (8000610 <Keypad_getkey+0x188>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	4851      	ldr	r0, [pc, #324]	; (8000614 <Keypad_getkey+0x18c>)
 80004d0:	f000 fb31 	bl	8000b36 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 80004d4:	4a4e      	ldr	r2, [pc, #312]	; (8000610 <Keypad_getkey+0x188>)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	484c      	ldr	r0, [pc, #304]	; (8000614 <Keypad_getkey+0x18c>)
 80004e4:	f000 fb27 	bl	8000b36 <MCAL_GPIO_WritePin>
		for (j = 0; j < 4; j++) {
 80004e8:	2300      	movs	r3, #0
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	e080      	b.n	80005f0 <Keypad_getkey+0x168>
			if (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0) {
 80004ee:	4a4a      	ldr	r2, [pc, #296]	; (8000618 <Keypad_getkey+0x190>)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	4619      	mov	r1, r3
 80004fa:	4846      	ldr	r0, [pc, #280]	; (8000614 <Keypad_getkey+0x18c>)
 80004fc:	f000 fb04 	bl	8000b08 <MCAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d171      	bne.n	80005ea <Keypad_getkey+0x162>
				while (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 8000506:	bf00      	nop
 8000508:	4a43      	ldr	r2, [pc, #268]	; (8000618 <Keypad_getkey+0x190>)
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000510:	b29b      	uxth	r3, r3
 8000512:	4619      	mov	r1, r3
 8000514:	483f      	ldr	r0, [pc, #252]	; (8000614 <Keypad_getkey+0x18c>)
 8000516:	f000 faf7 	bl	8000b08 <MCAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f3      	beq.n	8000508 <Keypad_getkey+0x80>
					;
				switch (i) {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b03      	cmp	r3, #3
 8000524:	d861      	bhi.n	80005ea <Keypad_getkey+0x162>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <Keypad_getkey+0xa4>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	0800053d 	.word	0x0800053d
 8000530:	08000565 	.word	0x08000565
 8000534:	0800058d 	.word	0x0800058d
 8000538:	080005b5 	.word	0x080005b5
				case (0):
					if (j == 0)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d101      	bne.n	8000546 <Keypad_getkey+0xbe>
						return '7';
 8000542:	2337      	movs	r3, #55	; 0x37
 8000544:	e060      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 1)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d101      	bne.n	8000550 <Keypad_getkey+0xc8>
						return '4';
 800054c:	2334      	movs	r3, #52	; 0x34
 800054e:	e05b      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 2)
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d101      	bne.n	800055a <Keypad_getkey+0xd2>
						return '1';
 8000556:	2331      	movs	r3, #49	; 0x31
 8000558:	e056      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 3)
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d13d      	bne.n	80005dc <Keypad_getkey+0x154>
						return '?';
 8000560:	233f      	movs	r3, #63	; 0x3f
 8000562:	e051      	b.n	8000608 <Keypad_getkey+0x180>
					break;
				case (1):
					if (j == 0)
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <Keypad_getkey+0xe6>
						return '8';
 800056a:	2338      	movs	r3, #56	; 0x38
 800056c:	e04c      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 1)
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d101      	bne.n	8000578 <Keypad_getkey+0xf0>
						return '5';
 8000574:	2335      	movs	r3, #53	; 0x35
 8000576:	e047      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 2)
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d101      	bne.n	8000582 <Keypad_getkey+0xfa>
						return '2';
 800057e:	2332      	movs	r3, #50	; 0x32
 8000580:	e042      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 3)
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	2b03      	cmp	r3, #3
 8000586:	d12b      	bne.n	80005e0 <Keypad_getkey+0x158>
						return '0';
 8000588:	2330      	movs	r3, #48	; 0x30
 800058a:	e03d      	b.n	8000608 <Keypad_getkey+0x180>
					break;
				case (2):
					if (j == 0)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <Keypad_getkey+0x10e>
						return '9';
 8000592:	2339      	movs	r3, #57	; 0x39
 8000594:	e038      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 1)
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d101      	bne.n	80005a0 <Keypad_getkey+0x118>
						return '6';
 800059c:	2336      	movs	r3, #54	; 0x36
 800059e:	e033      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 2)
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d101      	bne.n	80005aa <Keypad_getkey+0x122>
						return '3';
 80005a6:	2333      	movs	r3, #51	; 0x33
 80005a8:	e02e      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 3)
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d119      	bne.n	80005e4 <Keypad_getkey+0x15c>
						return '=';
 80005b0:	233d      	movs	r3, #61	; 0x3d
 80005b2:	e029      	b.n	8000608 <Keypad_getkey+0x180>
					break;
				case (3):
					if (j == 0)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <Keypad_getkey+0x136>
						return '/';
 80005ba:	232f      	movs	r3, #47	; 0x2f
 80005bc:	e024      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 1)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d101      	bne.n	80005c8 <Keypad_getkey+0x140>
						return '*';
 80005c4:	232a      	movs	r3, #42	; 0x2a
 80005c6:	e01f      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 2)
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d101      	bne.n	80005d2 <Keypad_getkey+0x14a>
						return '-';
 80005ce:	232d      	movs	r3, #45	; 0x2d
 80005d0:	e01a      	b.n	8000608 <Keypad_getkey+0x180>
					else if (j == 3)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d107      	bne.n	80005e8 <Keypad_getkey+0x160>
						return '+';
 80005d8:	232b      	movs	r3, #43	; 0x2b
 80005da:	e015      	b.n	8000608 <Keypad_getkey+0x180>
					break;
 80005dc:	bf00      	nop
 80005de:	e004      	b.n	80005ea <Keypad_getkey+0x162>
					break;
 80005e0:	bf00      	nop
 80005e2:	e002      	b.n	80005ea <Keypad_getkey+0x162>
					break;
 80005e4:	bf00      	nop
 80005e6:	e000      	b.n	80005ea <Keypad_getkey+0x162>
					break;
 80005e8:	bf00      	nop
		for (j = 0; j < 4; j++) {
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	2b03      	cmp	r3, #3
 80005f4:	f77f af7b 	ble.w	80004ee <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++) {
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3301      	adds	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b03      	cmp	r3, #3
 8000602:	f77f af47 	ble.w	8000494 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 8000606:	2341      	movs	r3, #65	; 0x41
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000010 	.word	0x20000010
 8000614:	40010c00 	.word	0x40010c00
 8000618:	20000000 	.word	0x20000000

0800061c <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e00b      	b.n	8000642 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	e002      	b.n	8000636 <delay_ms+0x1a>
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2bfe      	cmp	r3, #254	; 0xfe
 800063a:	d9f9      	bls.n	8000630 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	429a      	cmp	r2, r3
 8000648:	d3ef      	bcc.n	800062a <delay_ms+0xe>
			;
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000658:	4b52      	ldr	r3, [pc, #328]	; (80007a4 <LCD_GPIO_init+0x150>)
 800065a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800065e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000660:	4b50      	ldr	r3, [pc, #320]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000662:	2204      	movs	r2, #4
 8000664:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000666:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000668:	2201      	movs	r2, #1
 800066a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800066c:	494d      	ldr	r1, [pc, #308]	; (80007a4 <LCD_GPIO_init+0x150>)
 800066e:	484e      	ldr	r0, [pc, #312]	; (80007a8 <LCD_GPIO_init+0x154>)
 8000670:	f000 f9cb 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000674:	4b4b      	ldr	r3, [pc, #300]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800067c:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <LCD_GPIO_init+0x150>)
 800067e:	2204      	movs	r2, #4
 8000680:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000682:	4b48      	ldr	r3, [pc, #288]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000684:	2201      	movs	r2, #1
 8000686:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000688:	4946      	ldr	r1, [pc, #280]	; (80007a4 <LCD_GPIO_init+0x150>)
 800068a:	4847      	ldr	r0, [pc, #284]	; (80007a8 <LCD_GPIO_init+0x154>)
 800068c:	f000 f9bd 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000690:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000692:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000696:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000698:	4b42      	ldr	r3, [pc, #264]	; (80007a4 <LCD_GPIO_init+0x150>)
 800069a:	2204      	movs	r2, #4
 800069c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800069e:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006a4:	493f      	ldr	r1, [pc, #252]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006a6:	4840      	ldr	r0, [pc, #256]	; (80007a8 <LCD_GPIO_init+0x154>)
 80006a8:	f000 f9af 	bl	8000a0a <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006b2:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006be:	4939      	ldr	r1, [pc, #228]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006c0:	4839      	ldr	r0, [pc, #228]	; (80007a8 <LCD_GPIO_init+0x154>)
 80006c2:	f000 f9a2 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80006c6:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006c8:	2202      	movs	r2, #2
 80006ca:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006cc:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006d8:	4932      	ldr	r1, [pc, #200]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006da:	4833      	ldr	r0, [pc, #204]	; (80007a8 <LCD_GPIO_init+0x154>)
 80006dc:	f000 f995 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80006f2:	492c      	ldr	r1, [pc, #176]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006f4:	482c      	ldr	r0, [pc, #176]	; (80007a8 <LCD_GPIO_init+0x154>)
 80006f6:	f000 f988 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <LCD_GPIO_init+0x150>)
 80006fc:	2208      	movs	r2, #8
 80006fe:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000702:	2204      	movs	r2, #4
 8000704:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000708:	2201      	movs	r2, #1
 800070a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800070c:	4925      	ldr	r1, [pc, #148]	; (80007a4 <LCD_GPIO_init+0x150>)
 800070e:	4826      	ldr	r0, [pc, #152]	; (80007a8 <LCD_GPIO_init+0x154>)
 8000710:	f000 f97b 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000716:	2210      	movs	r2, #16
 8000718:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <LCD_GPIO_init+0x150>)
 800071c:	2204      	movs	r2, #4
 800071e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000722:	2201      	movs	r2, #1
 8000724:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000726:	491f      	ldr	r1, [pc, #124]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000728:	481f      	ldr	r0, [pc, #124]	; (80007a8 <LCD_GPIO_init+0x154>)
 800072a:	f000 f96e 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000730:	2220      	movs	r2, #32
 8000732:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000736:	2204      	movs	r2, #4
 8000738:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <LCD_GPIO_init+0x150>)
 800073c:	2201      	movs	r2, #1
 800073e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000740:	4918      	ldr	r1, [pc, #96]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000742:	4819      	ldr	r0, [pc, #100]	; (80007a8 <LCD_GPIO_init+0x154>)
 8000744:	f000 f961 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <LCD_GPIO_init+0x150>)
 800074a:	2240      	movs	r2, #64	; 0x40
 800074c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000750:	2204      	movs	r2, #4
 8000752:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000756:	2201      	movs	r2, #1
 8000758:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800075a:	4912      	ldr	r1, [pc, #72]	; (80007a4 <LCD_GPIO_init+0x150>)
 800075c:	4812      	ldr	r0, [pc, #72]	; (80007a8 <LCD_GPIO_init+0x154>)
 800075e:	f000 f954 	bl	8000a0a <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <LCD_GPIO_init+0x150>)
 800076a:	2204      	movs	r2, #4
 800076c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000770:	2201      	movs	r2, #1
 8000772:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000774:	490b      	ldr	r1, [pc, #44]	; (80007a4 <LCD_GPIO_init+0x150>)
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LCD_GPIO_init+0x154>)
 8000778:	f000 f947 	bl	8000a0a <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <LCD_GPIO_init+0x154>)
 8000784:	f000 f9d7 	bl	8000b36 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <LCD_GPIO_init+0x154>)
 8000790:	f000 f9d1 	bl	8000b36 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800079a:	4803      	ldr	r0, [pc, #12]	; (80007a8 <LCD_GPIO_init+0x154>)
 800079c:	f000 f9cb 	bl	8000b36 <MCAL_GPIO_WritePin>

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	2000003c 	.word	0x2000003c
 80007a8:	40010800 	.word	0x40010800

080007ac <LCD_clear_screen>:

void LCD_clear_screen() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f857 	bl	8000864 <LCD_WRITE_COMMAND>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <LCD_lcd_kick>:

void LCD_lcd_kick() {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <LCD_lcd_kick+0x28>)
 80007c8:	f000 f9b5 	bl	8000b36 <MCAL_GPIO_WritePin>
	delay_ms(50);
 80007cc:	2032      	movs	r0, #50	; 0x32
 80007ce:	f7ff ff25 	bl	800061c <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <LCD_lcd_kick+0x28>)
 80007da:	f000 f9ac 	bl	8000b36 <MCAL_GPIO_WritePin>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010800 	.word	0x40010800

080007e8 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	460a      	mov	r2, r1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	4613      	mov	r3, r2
 80007f6:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d108      	bne.n	8000810 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	d805      	bhi.n	8000810 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	3b80      	subs	r3, #128	; 0x80
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f82a 	bl	8000864 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d108      	bne.n	8000828 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	2b0f      	cmp	r3, #15
 800081a:	d805      	bhi.n	8000828 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	3b40      	subs	r3, #64	; 0x40
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f81e 	bl	8000864 <LCD_WRITE_COMMAND>
		}
	}
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <LCD_INIT>:

void LCD_INIT() {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000834:	2014      	movs	r0, #20
 8000836:	f7ff fef1 	bl	800061c <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 800083a:	f7ff ff0b 	bl	8000654 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 800083e:	200f      	movs	r0, #15
 8000840:	f7ff feec 	bl	800061c <delay_ms>

	LCD_clear_screen();
 8000844:	f7ff ffb2 	bl	80007ac <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000848:	2038      	movs	r0, #56	; 0x38
 800084a:	f000 f80b 	bl	8000864 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800084e:	2006      	movs	r0, #6
 8000850:	f000 f808 	bl	8000864 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000854:	2080      	movs	r0, #128	; 0x80
 8000856:	f000 f805 	bl	8000864 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800085a:	200f      	movs	r0, #15
 800085c:	f000 f802 	bl	8000864 <LCD_WRITE_COMMAND>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	b29b      	uxth	r3, r3
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <LCD_WRITE_COMMAND+0x40>)
 8000876:	f000 f975 	bl	8000b64 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000880:	4808      	ldr	r0, [pc, #32]	; (80008a4 <LCD_WRITE_COMMAND+0x40>)
 8000882:	f000 f958 	bl	8000b36 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <LCD_WRITE_COMMAND+0x40>)
 800088e:	f000 f952 	bl	8000b36 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff fec2 	bl	800061c <delay_ms>
	LCD_lcd_kick();
 8000898:	f7ff ff90 	bl	80007bc <LCD_lcd_kick>

}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40010800 	.word	0x40010800

080008a8 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <LCD_WRITE_CHAR+0x40>)
 80008ba:	f000 f953 	bl	8000b64 <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c4:	4808      	ldr	r0, [pc, #32]	; (80008e8 <LCD_WRITE_CHAR+0x40>)
 80008c6:	f000 f936 	bl	8000b36 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <LCD_WRITE_CHAR+0x40>)
 80008d2:	f000 f930 	bl	8000b36 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fea0 	bl	800061c <delay_ms>
	LCD_lcd_kick();
 80008dc:	f7ff ff6e 	bl	80007bc <LCD_lcd_kick>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40010800 	.word	0x40010800

080008ec <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	int count = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 80008f8:	e01c      	b.n	8000934 <LCD_WRITE_STRING+0x48>
		count++;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffcd 	bl	80008a8 <LCD_WRITE_CHAR>
		if (count == 16) {
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b10      	cmp	r3, #16
 8000912:	d104      	bne.n	800091e <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000914:	2100      	movs	r1, #0
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff ff66 	bl	80007e8 <LCD_GOTO_XY>
 800091c:	e00a      	b.n	8000934 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b20      	cmp	r3, #32
 8000922:	d107      	bne.n	8000934 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000924:	f7ff ff42 	bl	80007ac <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000928:	2100      	movs	r1, #0
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff5c 	bl	80007e8 <LCD_GOTO_XY>
			count = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d1de      	bne.n	80008fa <LCD_WRITE_STRING+0xe>
		}
	}
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <Get_CRLH_Position>:

#include "Stm32_F103C6_gpio_driver.h"


uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	2b80      	cmp	r3, #128	; 0x80
 8000952:	d042      	beq.n	80009da <Get_CRLH_Position+0x96>
 8000954:	2b80      	cmp	r3, #128	; 0x80
 8000956:	dc11      	bgt.n	800097c <Get_CRLH_Position+0x38>
 8000958:	2b08      	cmp	r3, #8
 800095a:	d036      	beq.n	80009ca <Get_CRLH_Position+0x86>
 800095c:	2b08      	cmp	r3, #8
 800095e:	dc06      	bgt.n	800096e <Get_CRLH_Position+0x2a>
 8000960:	2b02      	cmp	r3, #2
 8000962:	d02e      	beq.n	80009c2 <Get_CRLH_Position+0x7e>
 8000964:	2b04      	cmp	r3, #4
 8000966:	d02e      	beq.n	80009c6 <Get_CRLH_Position+0x82>
 8000968:	2b01      	cmp	r3, #1
 800096a:	d028      	beq.n	80009be <Get_CRLH_Position+0x7a>
 800096c:	e047      	b.n	80009fe <Get_CRLH_Position+0xba>
 800096e:	2b20      	cmp	r3, #32
 8000970:	d02f      	beq.n	80009d2 <Get_CRLH_Position+0x8e>
 8000972:	2b40      	cmp	r3, #64	; 0x40
 8000974:	d02f      	beq.n	80009d6 <Get_CRLH_Position+0x92>
 8000976:	2b10      	cmp	r3, #16
 8000978:	d029      	beq.n	80009ce <Get_CRLH_Position+0x8a>
 800097a:	e040      	b.n	80009fe <Get_CRLH_Position+0xba>
 800097c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000980:	d033      	beq.n	80009ea <Get_CRLH_Position+0xa6>
 8000982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000986:	dc09      	bgt.n	800099c <Get_CRLH_Position+0x58>
 8000988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800098c:	d029      	beq.n	80009e2 <Get_CRLH_Position+0x9e>
 800098e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000992:	d028      	beq.n	80009e6 <Get_CRLH_Position+0xa2>
 8000994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000998:	d021      	beq.n	80009de <Get_CRLH_Position+0x9a>
 800099a:	e030      	b.n	80009fe <Get_CRLH_Position+0xba>
 800099c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a0:	d027      	beq.n	80009f2 <Get_CRLH_Position+0xae>
 80009a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a6:	dc03      	bgt.n	80009b0 <Get_CRLH_Position+0x6c>
 80009a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009ac:	d01f      	beq.n	80009ee <Get_CRLH_Position+0xaa>
 80009ae:	e026      	b.n	80009fe <Get_CRLH_Position+0xba>
 80009b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009b4:	d01f      	beq.n	80009f6 <Get_CRLH_Position+0xb2>
 80009b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009ba:	d01e      	beq.n	80009fa <Get_CRLH_Position+0xb6>
 80009bc:	e01f      	b.n	80009fe <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 80009be:	2300      	movs	r3, #0
 80009c0:	e01e      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80009c2:	2304      	movs	r3, #4
 80009c4:	e01c      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_2:
		return 8 ;
 80009c6:	2308      	movs	r3, #8
 80009c8:	e01a      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_3:
		return 12 ;
 80009ca:	230c      	movs	r3, #12
 80009cc:	e018      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80009ce:	2310      	movs	r3, #16
 80009d0:	e016      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80009d2:	2314      	movs	r3, #20
 80009d4:	e014      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80009d6:	2318      	movs	r3, #24
 80009d8:	e012      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80009da:	231c      	movs	r3, #28
 80009dc:	e010      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_8:
		return 0 ;
 80009de:	2300      	movs	r3, #0
 80009e0:	e00e      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80009e2:	2304      	movs	r3, #4
 80009e4:	e00c      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80009e6:	2308      	movs	r3, #8
 80009e8:	e00a      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 80009ea:	230c      	movs	r3, #12
 80009ec:	e008      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 80009ee:	2310      	movs	r3, #16
 80009f0:	e006      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 80009f2:	2314      	movs	r3, #20
 80009f4:	e004      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 80009f6:	2318      	movs	r3, #24
 80009f8:	e002      	b.n	8000a00 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 80009fa:	231c      	movs	r3, #28
 80009fc:	e000      	b.n	8000a00 <Get_CRLH_Position+0xbc>



	}

	return 0 ;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <MCAL_GPIO_Init>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000a0a:	b590      	push	{r4, r7, lr}
 8000a0c:	b085      	sub	sp, #20
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister = NULL ;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0 ;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )?  &GPIOx->CRL : &GPIOx->CRH ;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	2bff      	cmp	r3, #255	; 0xff
 8000a22:	d801      	bhi.n	8000a28 <MCAL_GPIO_Init+0x1e>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	e001      	b.n	8000a2c <MCAL_GPIO_Init+0x22>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff86 	bl	8000944 <Get_CRLH_Position>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	4093      	lsls	r3, r2
 8000a40:	43da      	mvns	r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	401a      	ands	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) )
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	2b07      	cmp	r3, #7
 8000a52:	d00b      	beq.n	8000a6c <MCAL_GPIO_Init+0x62>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	789b      	ldrb	r3, [r3, #2]
 8000a58:	2b06      	cmp	r3, #6
 8000a5a:	d007      	beq.n	8000a6c <MCAL_GPIO_Init+0x62>
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d003      	beq.n	8000a6c <MCAL_GPIO_Init+0x62>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	789b      	ldrb	r3, [r3, #2]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d10e      	bne.n	8000a8a <MCAL_GPIO_Init+0x80>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ( (((PinConfig->GPIO_MODE - 4 ) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f ) ;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	3b04      	subs	r3, #4
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	b25a      	sxtb	r2, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	78db      	ldrb	r3, [r3, #3]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e02c      	b.n	8000ae4 <MCAL_GPIO_Init+0xda>

	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) ||  (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d003      	beq.n	8000a9a <MCAL_GPIO_Init+0x90>
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	789b      	ldrb	r3, [r3, #2]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d107      	bne.n	8000aaa <MCAL_GPIO_Init+0xa0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((PinConfig->GPIO_MODE  ) << 2) | 0x0) & 0x0f ) ;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	789b      	ldrb	r3, [r3, #2]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e01c      	b.n	8000ae4 <MCAL_GPIO_Init+0xda>

		}else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	789b      	ldrb	r3, [r3, #2]
 8000aae:	2b08      	cmp	r3, #8
 8000ab0:	d102      	bne.n	8000ab8 <MCAL_GPIO_Init+0xae>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ( (((GPIO_MODE_INPUT_FLO  ) << 2) | 0x0) & 0x0f ) ;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e015      	b.n	8000ae4 <MCAL_GPIO_Init+0xda>
		}
		else //PU PD Input
		{
			PIN_Config = ( (((GPIO_MODE_INPUT_PU  ) << 2) | 0x0) & 0x0f ) ;
 8000ab8:	2308      	movs	r3, #8
 8000aba:	73fb      	strb	r3, [r7, #15]

			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	789b      	ldrb	r3, [r3, #2]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d107      	bne.n	8000ad4 <MCAL_GPIO_Init+0xca>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	8812      	ldrh	r2, [r2, #0]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	e007      	b.n	8000ae4 <MCAL_GPIO_Init+0xda>

			}else
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	8812      	ldrh	r2, [r2, #0]
 8000adc:	43d2      	mvns	r2, r2
 8000ade:	401a      	ands	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	60da      	str	r2, [r3, #12]

		}

	}
// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber)   );
 8000ae4:	7bfc      	ldrb	r4, [r7, #15]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ff2a 	bl	8000944 <Get_CRLH_Position>
 8000af0:	4603      	mov	r3, r0
 8000af2:	fa04 f203 	lsl.w	r2, r4, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	431a      	orrs	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	601a      	str	r2, [r3, #0]

}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd90      	pop	{r4, r7, pc}

08000b08 <MCAL_GPIO_ReadPin>:
 * @param [in] 	-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval 		-the input pin value (two values based on @ref GPIO_PIN_state )
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef *GPIOx,uint16_t PinNumber )
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if (((GPIOx->IDR) & PinNumber ) !=  (uint32_t)GPIO_PIN_RESET )
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689a      	ldr	r2, [r3, #8]
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <MCAL_GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e001      	b.n	8000b2a <MCAL_GPIO_ReadPin+0x22>
	}else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000b26:	2300      	movs	r3, #0
 8000b28:	73fb      	strb	r3, [r7, #15]
	}
return  bitstatus ;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8000b36:	b480      	push	{r7}
 8000b38:	b083      	sub	sp, #12
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	707b      	strb	r3, [r7, #1]
	if ( Value !=  GPIO_PIN_RESET )
 8000b46:	787b      	ldrb	r3, [r7, #1]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <MCAL_GPIO_WritePin+0x1e>
//		or
//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
//		These bits are write-only and can be accessed in Word mode only.
//		0: No action on the corresponding ODRx bit
//		1: Set the corresponding ODRx bit
		GPIOx->BSRR = (uint32_t)PinNumber ;
 8000b4c:	887a      	ldrh	r2, [r7, #2]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	611a      	str	r2, [r3, #16]
//		0: No action on the corresponding ODRx bit
//		1: Reset the corresponding ODRx bit
		GPIOx->BRR = (uint32_t)PinNumber ;
	}

}
 8000b52:	e002      	b.n	8000b5a <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber ;
 8000b54:	887a      	ldrh	r2, [r7, #2]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	615a      	str	r2, [r3, #20]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort (GPIO_TypeDef *GPIOx , uint16_t Value)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 8000b70:	887a      	ldrh	r2, [r7, #2]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60da      	str	r2, [r3, #12]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <__libc_init_array>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	2500      	movs	r5, #0
 8000b84:	4e0c      	ldr	r6, [pc, #48]	; (8000bb8 <__libc_init_array+0x38>)
 8000b86:	4c0d      	ldr	r4, [pc, #52]	; (8000bbc <__libc_init_array+0x3c>)
 8000b88:	1ba4      	subs	r4, r4, r6
 8000b8a:	10a4      	asrs	r4, r4, #2
 8000b8c:	42a5      	cmp	r5, r4
 8000b8e:	d109      	bne.n	8000ba4 <__libc_init_array+0x24>
 8000b90:	f000 f81a 	bl	8000bc8 <_init>
 8000b94:	2500      	movs	r5, #0
 8000b96:	4e0a      	ldr	r6, [pc, #40]	; (8000bc0 <__libc_init_array+0x40>)
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <__libc_init_array+0x44>)
 8000b9a:	1ba4      	subs	r4, r4, r6
 8000b9c:	10a4      	asrs	r4, r4, #2
 8000b9e:	42a5      	cmp	r5, r4
 8000ba0:	d105      	bne.n	8000bae <__libc_init_array+0x2e>
 8000ba2:	bd70      	pop	{r4, r5, r6, pc}
 8000ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ba8:	4798      	blx	r3
 8000baa:	3501      	adds	r5, #1
 8000bac:	e7ee      	b.n	8000b8c <__libc_init_array+0xc>
 8000bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bb2:	4798      	blx	r3
 8000bb4:	3501      	adds	r5, #1
 8000bb6:	e7f2      	b.n	8000b9e <__libc_init_array+0x1e>
 8000bb8:	08000c0c 	.word	0x08000c0c
 8000bbc:	08000c0c 	.word	0x08000c0c
 8000bc0:	08000c0c 	.word	0x08000c0c
 8000bc4:	08000c10 	.word	0x08000c10

08000bc8 <_init>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	bf00      	nop
 8000bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bce:	bc08      	pop	{r3}
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	4770      	bx	lr

08000bd4 <_fini>:
 8000bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd6:	bf00      	nop
 8000bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bda:	bc08      	pop	{r3}
 8000bdc:	469e      	mov	lr, r3
 8000bde:	4770      	bx	lr
