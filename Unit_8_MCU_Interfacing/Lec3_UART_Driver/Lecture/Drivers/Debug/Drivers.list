
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000998  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000ac8  08000ac8  00010ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ae0  08000ae0  00010ae8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae0  08000ae0  00010ae8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae0  08000ae8  00010ae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae0  08000ae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ae8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000ae8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000ae8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ae8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000410d  00000000  00000000  00010b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a16  00000000  00000000  00014c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a34  00000000  00000000  00015634  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00016068  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00016230  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000013b7  00000000  00000000  000163a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000027e4  00000000  00000000  00017757  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b2d6  00000000  00000000  00019f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025211  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000578  00000000  00000000  0002528c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ab0 	.word	0x08000ab0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ab0 	.word	0x08000ab0

08000170 <UART_IRQ_Callback>:
unsigned int IRQ_Flag = 0 ;
unsigned ch ;


void UART_IRQ_Callback (struct  UART_IRQ_Event* flag)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	MCAL_UART_ReceiveData(USART1, &ch, disable);
 8000178:	2201      	movs	r2, #1
 800017a:	4906      	ldr	r1, [pc, #24]	; (8000194 <UART_IRQ_Callback+0x24>)
 800017c:	4806      	ldr	r0, [pc, #24]	; (8000198 <UART_IRQ_Callback+0x28>)
 800017e:	f000 fbc1 	bl	8000904 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &ch, enable);
 8000182:	2200      	movs	r2, #0
 8000184:	4903      	ldr	r1, [pc, #12]	; (8000194 <UART_IRQ_Callback+0x24>)
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <UART_IRQ_Callback+0x28>)
 8000188:	f000 fba0 	bl	80008cc <MCAL_UART_SendData>

}
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	20000020 	.word	0x20000020
 8000198:	40013800 	.word	0x40013800

0800019c <main>:

int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0

	//Enable CLock
	RCC_GPIOA_CLK_EN();
 80001a2:	4b16      	ldr	r3, [pc, #88]	; (80001fc <main+0x60>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a15      	ldr	r2, [pc, #84]	; (80001fc <main+0x60>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001ae:	4b13      	ldr	r3, [pc, #76]	; (80001fc <main+0x60>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	4a12      	ldr	r2, [pc, #72]	; (80001fc <main+0x60>)
 80001b4:	f043 0308 	orr.w	r3, r3, #8
 80001b8:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80001ba:	4b10      	ldr	r3, [pc, #64]	; (80001fc <main+0x60>)
 80001bc:	699b      	ldr	r3, [r3, #24]
 80001be:	4a0f      	ldr	r2, [pc, #60]	; (80001fc <main+0x60>)
 80001c0:	f043 0301 	orr.w	r3, r3, #1
 80001c4:	6193      	str	r3, [r2, #24]

	UART_Config uartCFG ;
	uartCFG.BaudRate = UART_BaudRate_115200 ;
 80001c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001ca:	60bb      	str	r3, [r7, #8]
	uartCFG.HwFlowCtl = UART_HwFlowCtl_NONE ;
 80001cc:	2300      	movs	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]
	uartCFG.IRQ_Enable = UART_IRQ_Enable_RXNEIE ;
 80001d0:	2320      	movs	r3, #32
 80001d2:	743b      	strb	r3, [r7, #16]
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
 80001d4:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0x64>)
 80001d6:	617b      	str	r3, [r7, #20]
	uartCFG.Parity =UART_Parity__NONE ;
 80001d8:	2300      	movs	r3, #0
 80001da:	737b      	strb	r3, [r7, #13]
	uartCFG.Payload_Length = UART_Payload_Length_8B;
 80001dc:	2300      	movs	r3, #0
 80001de:	733b      	strb	r3, [r7, #12]
	uartCFG.StopBits = UART_StopBits__1 ;
 80001e0:	2300      	movs	r3, #0
 80001e2:	73bb      	strb	r3, [r7, #14]
	uartCFG.USART_Mode = UART_MODE_TX_RX ;
 80001e4:	230c      	movs	r3, #12
 80001e6:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &uartCFG);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	4619      	mov	r1, r3
 80001ec:	4805      	ldr	r0, [pc, #20]	; (8000204 <main+0x68>)
 80001ee:	f000 faab 	bl	8000748 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <main+0x68>)
 80001f4:	f000 fbb4 	bl	8000960 <MCAL_UART_GPIO_Set_Pins>

	/* Loop forever */
	while(1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x5c>
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000
 8000200:	08000171 	.word	0x08000171
 8000204:	40013800 	.word	0x40013800

08000208 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000208:	480d      	ldr	r0, [pc, #52]	; (8000240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800020a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800020c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000210:	480c      	ldr	r0, [pc, #48]	; (8000244 <LoopForever+0x6>)
  ldr r1, =_edata
 8000212:	490d      	ldr	r1, [pc, #52]	; (8000248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000214:	4a0d      	ldr	r2, [pc, #52]	; (800024c <LoopForever+0xe>)
  movs r3, #0
 8000216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000218:	e002      	b.n	8000220 <LoopCopyDataInit>

0800021a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800021a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800021c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021e:	3304      	adds	r3, #4

08000220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000224:	d3f9      	bcc.n	800021a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000226:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000228:	4c0a      	ldr	r4, [pc, #40]	; (8000254 <LoopForever+0x16>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800022c:	e001      	b.n	8000232 <LoopFillZerobss>

0800022e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000230:	3204      	adds	r2, #4

08000232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000234:	d3fb      	bcc.n	800022e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000236:	f000 fc17 	bl	8000a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800023a:	f7ff ffaf 	bl	800019c <main>

0800023e <LoopForever>:

LoopForever:
    b LoopForever
 800023e:	e7fe      	b.n	800023e <LoopForever>
  ldr   r0, =_estack
 8000240:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000248:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800024c:	08000ae8 	.word	0x08000ae8
  ldr r2, =_sbss
 8000250:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000254:	20000060 	.word	0x20000060

08000258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000258:	e7fe      	b.n	8000258 <ADC1_2_IRQHandler>

0800025a <Get_CRLH_Position>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */
uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	4603      	mov	r3, r0
 8000262:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	2b80      	cmp	r3, #128	; 0x80
 8000268:	d042      	beq.n	80002f0 <Get_CRLH_Position+0x96>
 800026a:	2b80      	cmp	r3, #128	; 0x80
 800026c:	dc11      	bgt.n	8000292 <Get_CRLH_Position+0x38>
 800026e:	2b08      	cmp	r3, #8
 8000270:	d036      	beq.n	80002e0 <Get_CRLH_Position+0x86>
 8000272:	2b08      	cmp	r3, #8
 8000274:	dc06      	bgt.n	8000284 <Get_CRLH_Position+0x2a>
 8000276:	2b02      	cmp	r3, #2
 8000278:	d02e      	beq.n	80002d8 <Get_CRLH_Position+0x7e>
 800027a:	2b04      	cmp	r3, #4
 800027c:	d02e      	beq.n	80002dc <Get_CRLH_Position+0x82>
 800027e:	2b01      	cmp	r3, #1
 8000280:	d028      	beq.n	80002d4 <Get_CRLH_Position+0x7a>
 8000282:	e047      	b.n	8000314 <Get_CRLH_Position+0xba>
 8000284:	2b20      	cmp	r3, #32
 8000286:	d02f      	beq.n	80002e8 <Get_CRLH_Position+0x8e>
 8000288:	2b40      	cmp	r3, #64	; 0x40
 800028a:	d02f      	beq.n	80002ec <Get_CRLH_Position+0x92>
 800028c:	2b10      	cmp	r3, #16
 800028e:	d029      	beq.n	80002e4 <Get_CRLH_Position+0x8a>
 8000290:	e040      	b.n	8000314 <Get_CRLH_Position+0xba>
 8000292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000296:	d033      	beq.n	8000300 <Get_CRLH_Position+0xa6>
 8000298:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800029c:	dc09      	bgt.n	80002b2 <Get_CRLH_Position+0x58>
 800029e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002a2:	d029      	beq.n	80002f8 <Get_CRLH_Position+0x9e>
 80002a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002a8:	d028      	beq.n	80002fc <Get_CRLH_Position+0xa2>
 80002aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ae:	d021      	beq.n	80002f4 <Get_CRLH_Position+0x9a>
 80002b0:	e030      	b.n	8000314 <Get_CRLH_Position+0xba>
 80002b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002b6:	d027      	beq.n	8000308 <Get_CRLH_Position+0xae>
 80002b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80002bc:	dc03      	bgt.n	80002c6 <Get_CRLH_Position+0x6c>
 80002be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80002c2:	d01f      	beq.n	8000304 <Get_CRLH_Position+0xaa>
 80002c4:	e026      	b.n	8000314 <Get_CRLH_Position+0xba>
 80002c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80002ca:	d01f      	beq.n	800030c <Get_CRLH_Position+0xb2>
 80002cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80002d0:	d01e      	beq.n	8000310 <Get_CRLH_Position+0xb6>
 80002d2:	e01f      	b.n	8000314 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0 ;
 80002d4:	2300      	movs	r3, #0
 80002d6:	e01e      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_1:
		return 4 ;
 80002d8:	2304      	movs	r3, #4
 80002da:	e01c      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_2:
		return 8 ;
 80002dc:	2308      	movs	r3, #8
 80002de:	e01a      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_3:
		return 12 ;
 80002e0:	230c      	movs	r3, #12
 80002e2:	e018      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_4:
		return 16 ;
 80002e4:	2310      	movs	r3, #16
 80002e6:	e016      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_5:
		return 20 ;
 80002e8:	2314      	movs	r3, #20
 80002ea:	e014      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_6:
		return 24 ;
 80002ec:	2318      	movs	r3, #24
 80002ee:	e012      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_7:
		return 28 ;
 80002f0:	231c      	movs	r3, #28
 80002f2:	e010      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_8:
		return 0 ;
 80002f4:	2300      	movs	r3, #0
 80002f6:	e00e      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;
	case GPIO_PIN_9:
		return 4 ;
 80002f8:	2304      	movs	r3, #4
 80002fa:	e00c      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_10:
		return 8 ;
 80002fc:	2308      	movs	r3, #8
 80002fe:	e00a      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_11:
		return 12 ;
 8000300:	230c      	movs	r3, #12
 8000302:	e008      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_12:
		return 16 ;
 8000304:	2310      	movs	r3, #16
 8000306:	e006      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;


	case GPIO_PIN_13:
		return 20 ;
 8000308:	2314      	movs	r3, #20
 800030a:	e004      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_14:
		return 24 ;
 800030c:	2318      	movs	r3, #24
 800030e:	e002      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;

	case GPIO_PIN_15:
		return 28 ;
 8000310:	231c      	movs	r3, #28
 8000312:	e000      	b.n	8000316 <Get_CRLH_Position+0xbc>
		break ;


	}
return 0 ;
 8000314:	2300      	movs	r3, #0

}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <MCAL_GPIO_Init>:
 * @retval 			-none
 * Note				-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init  (GPIO_TypeDef *GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	volatile uint32_t* configregister = NULL ;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
	uint8_t	PIN_Config = 0 ;
 800032e:	2300      	movs	r3, #0
 8000330:	72fb      	strb	r3, [r7, #11]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	2bff      	cmp	r3, #255	; 0xff
 8000338:	d801      	bhi.n	800033e <MCAL_GPIO_Init+0x1e>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	e001      	b.n	8000342 <MCAL_GPIO_Init+0x22>
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	3304      	adds	r3, #4
 8000342:	60fb      	str	r3, [r7, #12]

	//CNF0[1:0] MODE0[1:0=]   Clear the four Bits
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber) );
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff86 	bl	800025a <Get_CRLH_Position>
 800034e:	4603      	mov	r3, r0
 8000350:	461a      	mov	r2, r3
 8000352:	230f      	movs	r3, #15
 8000354:	4093      	lsls	r3, r2
 8000356:	43da      	mvns	r2, r3
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	401a      	ands	r2, r3
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP ) ||  (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD ) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD ) ||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ))
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	789b      	ldrb	r3, [r3, #2]
 8000366:	2b04      	cmp	r3, #4
 8000368:	d00b      	beq.n	8000382 <MCAL_GPIO_Init+0x62>
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	789b      	ldrb	r3, [r3, #2]
 800036e:	2b05      	cmp	r3, #5
 8000370:	d007      	beq.n	8000382 <MCAL_GPIO_Init+0x62>
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	789b      	ldrb	r3, [r3, #2]
 8000376:	2b07      	cmp	r3, #7
 8000378:	d003      	beq.n	8000382 <MCAL_GPIO_Init+0x62>
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	789b      	ldrb	r3, [r3, #2]
 800037e:	2b06      	cmp	r3, #6
 8000380:	d11c      	bne.n	80003bc <MCAL_GPIO_Init+0x9c>
	{
		PIN_Config  =  (  ( ( (PinConfig->GPIO_MODE - 4) <<2 ) |  PinConfig->GPIO_Output_Speed   ) & 0x0F );
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	789b      	ldrb	r3, [r3, #2]
 8000386:	3b04      	subs	r3, #4
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	b25a      	sxtb	r2, r3
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	78db      	ldrb	r3, [r3, #3]
 8000390:	b25b      	sxtb	r3, r3
 8000392:	4313      	orrs	r3, r2
 8000394:	b25b      	sxtb	r3, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	72fb      	strb	r3, [r7, #11]
		(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 800039e:	7afc      	ldrb	r4, [r7, #11]
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	881b      	ldrh	r3, [r3, #0]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff58 	bl	800025a <Get_CRLH_Position>
 80003aa:	4603      	mov	r3, r0
 80003ac:	fa04 f203 	lsl.w	r2, r4, r3
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	e057      	b.n	800046c <MCAL_GPIO_Init+0x14c>
	}
	//if pin is input
	else //MODE =  00: Input mode (reset state)
	{
		if (  (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) || (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO ) )
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	789b      	ldrb	r3, [r3, #2]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d003      	beq.n	80003cc <MCAL_GPIO_Init+0xac>
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	789b      	ldrb	r3, [r3, #2]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d115      	bne.n	80003f8 <MCAL_GPIO_Init+0xd8>
		{
			PIN_Config  =  (  ( ( PinConfig->GPIO_MODE <<2 ) |  0x0   ) & 0x0F );
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	789b      	ldrb	r3, [r3, #2]
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	f003 030f 	and.w	r3, r3, #15
 80003d8:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 80003da:	7afc      	ldrb	r4, [r7, #11]
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff3a 	bl	800025a <Get_CRLH_Position>
 80003e6:	4603      	mov	r3, r0
 80003e8:	fa04 f203 	lsl.w	r2, r4, r3
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	431a      	orrs	r2, r3
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	e039      	b.n	800046c <MCAL_GPIO_Init+0x14c>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT )
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	789b      	ldrb	r3, [r3, #2]
 80003fc:	2b08      	cmp	r3, #8
 80003fe:	d110      	bne.n	8000422 <MCAL_GPIO_Init+0x102>
		{
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_FLO <<2 ) |  0x0   ) & 0x0F );
 8000400:	2304      	movs	r3, #4
 8000402:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000404:	7afc      	ldrb	r4, [r7, #11]
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff25 	bl	800025a <Get_CRLH_Position>
 8000410:	4603      	mov	r3, r0
 8000412:	fa04 f203 	lsl.w	r2, r4, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	431a      	orrs	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	601a      	str	r2, [r3, #0]
			}

		}
	}

}
 8000420:	e024      	b.n	800046c <MCAL_GPIO_Init+0x14c>
			PIN_Config  =  (  ( ( GPIO_MODE_INPUT_PU <<2 ) |  0x0   ) & 0x0F );
 8000422:	2308      	movs	r3, #8
 8000424:	72fb      	strb	r3, [r7, #11]
			(*configregister) |= (  (  PIN_Config  ) << ( Get_CRLH_Position( PinConfig->GPIO_PinNumber) ) ) ;
 8000426:	7afc      	ldrb	r4, [r7, #11]
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	881b      	ldrh	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff14 	bl	800025a <Get_CRLH_Position>
 8000432:	4603      	mov	r3, r0
 8000434:	fa04 f203 	lsl.w	r2, r4, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	431a      	orrs	r2, r3
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	601a      	str	r2, [r3, #0]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	789b      	ldrb	r3, [r3, #2]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d107      	bne.n	800045a <MCAL_GPIO_Init+0x13a>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	431a      	orrs	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	60da      	str	r2, [r3, #12]
}
 8000458:	e008      	b.n	800046c <MCAL_GPIO_Init+0x14c>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	68db      	ldr	r3, [r3, #12]
 800045e:	683a      	ldr	r2, [r7, #0]
 8000460:	8812      	ldrh	r2, [r2, #0]
 8000462:	43d2      	mvns	r2, r2
 8000464:	401a      	ands	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	60da      	str	r2, [r3, #12]
}
 800046a:	e7ff      	b.n	800046c <MCAL_GPIO_Init+0x14c>
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	bd90      	pop	{r4, r7, pc}

08000474 <EXTI0_IRQHandler>:
///**===========			ISR  Functions        =========================
///**================================================================
// */

void EXTI0_IRQHandler (void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	//cleared by writing a ‘1’ into the bit Pending register (EXTI_PR)
	EXTI->PR |= 1<<0 ;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <EXTI0_IRQHandler+0x1c>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <EXTI0_IRQHandler+0x1c>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000484:	4b03      	ldr	r3, [pc, #12]	; (8000494 <EXTI0_IRQHandler+0x20>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4798      	blx	r3
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40010400 	.word	0x40010400
 8000494:	20000024 	.word	0x20000024

08000498 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<1) ;
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <EXTI1_IRQHandler+0x1c>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <EXTI1_IRQHandler+0x1c>)
 80004a2:	f043 0302 	orr.w	r3, r3, #2
 80004a6:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]() ; }
 80004a8:	4b03      	ldr	r3, [pc, #12]	; (80004b8 <EXTI1_IRQHandler+0x20>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4798      	blx	r3
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40010400 	.word	0x40010400
 80004b8:	20000024 	.word	0x20000024

080004bc <EXTI2_IRQHandler>:


void EXTI2_IRQHandler (void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<2) ;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <EXTI2_IRQHandler+0x1c>)
 80004c2:	695b      	ldr	r3, [r3, #20]
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <EXTI2_IRQHandler+0x1c>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]() ; }
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <EXTI2_IRQHandler+0x20>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	4798      	blx	r3
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40010400 	.word	0x40010400
 80004dc:	20000024 	.word	0x20000024

080004e0 <EXTI3_IRQHandler>:


void EXTI3_IRQHandler (void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<3) ;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <EXTI3_IRQHandler+0x1c>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <EXTI3_IRQHandler+0x1c>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]() ; }
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <EXTI3_IRQHandler+0x20>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	4798      	blx	r3
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40010400 	.word	0x40010400
 8000500:	20000024 	.word	0x20000024

08000504 <EXTI4_IRQHandler>:


void EXTI4_IRQHandler (void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	EXTI->PR |=  (1<<4) ;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <EXTI4_IRQHandler+0x1c>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <EXTI4_IRQHandler+0x1c>)
 800050e:	f043 0310 	orr.w	r3, r3, #16
 8000512:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]() ; }
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <EXTI4_IRQHandler+0x20>)
 8000516:	691b      	ldr	r3, [r3, #16]
 8000518:	4798      	blx	r3
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40010400 	.word	0x40010400
 8000524:	20000024 	.word	0x20000024

08000528 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5 ) {	EXTI->PR |=  (1<<5)    ; GP_IRQ_CallBack[5]() ;   }
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	f003 0320 	and.w	r3, r3, #32
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <EXTI9_5_IRQHandler+0x22>
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b21      	ldr	r3, [pc, #132]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	4798      	blx	r3
	if (EXTI->PR & 1<<6 ) {	EXTI->PR |=  (1<<6)    ; GP_IRQ_CallBack[6]() ;   }
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000552:	2b00      	cmp	r3, #0
 8000554:	d008      	beq.n	8000568 <EXTI9_5_IRQHandler+0x40>
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800055c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4798      	blx	r3
	if (EXTI->PR & 1<<7 ) {	EXTI->PR |=  (1<<7)    ; GP_IRQ_CallBack[7]() ;   }
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <EXTI9_5_IRQHandler+0x5e>
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 800057a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057e:	6153      	str	r3, [r2, #20]
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4798      	blx	r3
	if (EXTI->PR & 1<<8 ) {	EXTI->PR |=  (1<<8)    ; GP_IRQ_CallBack[8]() ;   }
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800058e:	2b00      	cmp	r3, #0
 8000590:	d008      	beq.n	80005a4 <EXTI9_5_IRQHandler+0x7c>
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	4798      	blx	r3
	if (EXTI->PR & 1<<9 ) {	EXTI->PR |=  (1<<9)    ; GP_IRQ_CallBack[9]() ;   }
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <EXTI9_5_IRQHandler+0x9a>
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <EXTI9_5_IRQHandler+0xa0>)
 80005b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ba:	6153      	str	r3, [r2, #20]
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <EXTI9_5_IRQHandler+0xa4>)
 80005be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c0:	4798      	blx	r3

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40010400 	.word	0x40010400
 80005cc:	20000024 	.word	0x20000024

080005d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10 ) {	EXTI->PR |=  (1<<10)    ; GP_IRQ_CallBack[10]() ;   }
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d008      	beq.n	80005f2 <EXTI15_10_IRQHandler+0x22>
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a29      	ldr	r2, [pc, #164]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 80005e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <EXTI15_10_IRQHandler+0xc0>)
 80005ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f0:	4798      	blx	r3
	if (EXTI->PR & 1<<11 ) {	EXTI->PR |=  (1<<11)    ; GP_IRQ_CallBack[11]() ;   }
 80005f2:	4b26      	ldr	r3, [pc, #152]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <EXTI15_10_IRQHandler+0x40>
 80005fe:	4b23      	ldr	r3, [pc, #140]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 8000604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <EXTI15_10_IRQHandler+0xc0>)
 800060c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060e:	4798      	blx	r3
	if (EXTI->PR & 1<<12 ) {	EXTI->PR |=  (1<<12)    ; GP_IRQ_CallBack[12]() ;   }
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000618:	2b00      	cmp	r3, #0
 800061a:	d008      	beq.n	800062e <EXTI15_10_IRQHandler+0x5e>
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a1a      	ldr	r2, [pc, #104]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 8000622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000626:	6153      	str	r3, [r2, #20]
 8000628:	4b19      	ldr	r3, [pc, #100]	; (8000690 <EXTI15_10_IRQHandler+0xc0>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4798      	blx	r3
	if (EXTI->PR & 1<<13 ) {	EXTI->PR |=  (1<<13)    ; GP_IRQ_CallBack[13]() ;   }
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <EXTI15_10_IRQHandler+0x7c>
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 8000640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000644:	6153      	str	r3, [r2, #20]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <EXTI15_10_IRQHandler+0xc0>)
 8000648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064a:	4798      	blx	r3
	if (EXTI->PR & 1<<14 ) {	EXTI->PR |=  (1<<14)    ; GP_IRQ_CallBack[14]() ;   }
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d008      	beq.n	800066a <EXTI15_10_IRQHandler+0x9a>
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6153      	str	r3, [r2, #20]
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <EXTI15_10_IRQHandler+0xc0>)
 8000666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000668:	4798      	blx	r3
	if (EXTI->PR & 1<<15 ) {	EXTI->PR |=  (1<<15)    ; GP_IRQ_CallBack[15]() ;   }
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000672:	2b00      	cmp	r3, #0
 8000674:	d008      	beq.n	8000688 <EXTI15_10_IRQHandler+0xb8>
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <EXTI15_10_IRQHandler+0xbc>)
 800067c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b03      	ldr	r3, [pc, #12]	; (8000690 <EXTI15_10_IRQHandler+0xc0>)
 8000684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000686:	4798      	blx	r3

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40010400 	.word	0x40010400
 8000690:	20000024 	.word	0x20000024

08000694 <MCAL_RCC_GetSYS_CLCKFreq>:
 * 							Generic Functions
 * =======================================================================================
 */

uint32_t MCAL_RCC_GetSYS_CLCKFreq(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
	switch  ( (RCC->CFGR  >> 2  ) & 0b11 )
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MCAL_RCC_GetSYS_CLCKFreq+0x30>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	089b      	lsrs	r3, r3, #2
 800069e:	f003 0303 	and.w	r3, r3, #3
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d006      	beq.n	80006b4 <MCAL_RCC_GetSYS_CLCKFreq+0x20>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d302      	bcc.n	80006b0 <MCAL_RCC_GetSYS_CLCKFreq+0x1c>
 80006aa:	2b02      	cmp	r3, #2
 80006ac:	d004      	beq.n	80006b8 <MCAL_RCC_GetSYS_CLCKFreq+0x24>
 80006ae:	e005      	b.n	80006bc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MCAL_RCC_GetSYS_CLCKFreq+0x34>)
 80006b2:	e003      	b.n	80006bc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 1:

		//todo need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80006b6:	e001      	b.n	80006bc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	case 2:

		//todo need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80006ba:	e7ff      	b.n	80006bc <MCAL_RCC_GetSYS_CLCKFreq+0x28>
		break ;

	}

}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	007a1200 	.word	0x007a1200
 80006cc:	00f42400 	.word	0x00f42400

080006d0 <MCAL_RCC_GetHCLKFreq>:


uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetSYS_CLCKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  ); //the first shift is multiplication}
 80006d4:	f7ff ffde 	bl	8000694 <MCAL_RCC_GetSYS_CLCKFreq>
 80006d8:	4601      	mov	r1, r0
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	091b      	lsrs	r3, r3, #4
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80006e6:	5cd3      	ldrb	r3, [r2, r3]
 80006e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	08000ad0 	.word	0x08000ad0

080006f8 <MCAL_RCC_GetPCLK1Freq>:

//APB Low speed clock (PCLK1).
//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  ); //the first shift is multiplication
 80006fc:	f7ff ffe8 	bl	80006d0 <MCAL_RCC_GetHCLKFreq>
 8000700:	4601      	mov	r1, r0
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	f003 0307 	and.w	r3, r3, #7
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800070e:	5cd3      	ldrb	r3, [r2, r3]
 8000710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	08000ac8 	.word	0x08000ac8

08000720 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  ); //the first shift is multiplication
 8000724:	f7ff ffd4 	bl	80006d0 <MCAL_RCC_GetHCLKFreq>
 8000728:	4601      	mov	r1, r0
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	0adb      	lsrs	r3, r3, #11
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	4a03      	ldr	r2, [pc, #12]	; (8000744 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	08000ac8 	.word	0x08000ac8

08000748 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 8000752:	4a57      	ldr	r2, [pc, #348]	; (80008b0 <MCAL_UART_Init+0x168>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a56      	ldr	r2, [pc, #344]	; (80008b4 <MCAL_UART_Init+0x16c>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000760:	4b55      	ldr	r3, [pc, #340]	; (80008b8 <MCAL_UART_Init+0x170>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a54      	ldr	r2, [pc, #336]	; (80008b8 <MCAL_UART_Init+0x170>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	e014      	b.n	8000798 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a52      	ldr	r2, [pc, #328]	; (80008bc <MCAL_UART_Init+0x174>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <MCAL_UART_Init+0x170>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a4f      	ldr	r2, [pc, #316]	; (80008b8 <MCAL_UART_Init+0x170>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	e009      	b.n	8000798 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a4e      	ldr	r2, [pc, #312]	; (80008c0 <MCAL_UART_Init+0x178>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d105      	bne.n	8000798 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <MCAL_UART_Init+0x170>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4a49      	ldr	r2, [pc, #292]	; (80008b8 <MCAL_UART_Init+0x170>)
 8000792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000796:	61d3      	str	r3, [r2, #28]



	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	7812      	ldrb	r2, [r2, #0]
 80007ac:	431a      	orrs	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	7a12      	ldrb	r2, [r2, #8]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	683a      	ldr	r2, [r7, #0]
 80007c6:	7a52      	ldrb	r2, [r2, #9]
 80007c8:	431a      	orrs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	683a      	ldr	r2, [r7, #0]
 80007d4:	7a92      	ldrb	r2, [r2, #10]
 80007d6:	431a      	orrs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	7ad2      	ldrb	r2, [r2, #11]
 80007e4:	431a      	orrs	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <MCAL_UART_Init+0x16c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d103      	bne.n	80007fa <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 80007f2:	f7ff ff95 	bl	8000720 <MCAL_RCC_GetPCLK2Freq>
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	e002      	b.n	8000800 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 80007fa:	f7ff ff7d 	bl	80006f8 <MCAL_RCC_GetPCLK1Freq>
 80007fe:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	fbb2 f3f3 	udiv	r3, r2, r3
 800080c:	0119      	lsls	r1, r3, #4
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	009a      	lsls	r2, r3, #2
 8000818:	441a      	add	r2, r3
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	fbb2 f2f3 	udiv	r2, r2, r3
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000830:	2064      	movs	r0, #100	; 0x64
 8000832:	fb00 f303 	mul.w	r3, r0, r3
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <MCAL_UART_Init+0x17c>)
 800083c:	fba2 2303 	umull	r2, r3, r2, r3
 8000840:	095b      	lsrs	r3, r3, #5
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	430b      	orrs	r3, r1
 8000848:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	609a      	str	r2, [r3, #8]


	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	7b1b      	ldrb	r3, [r3, #12]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d026      	beq.n	80008a6 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	7b12      	ldrb	r2, [r2, #12]
 8000860:	431a      	orrs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <MCAL_UART_Init+0x16c>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MCAL_UART_Init+0x180>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MCAL_UART_Init+0x180>)
 8000874:	f043 0320 	orr.w	r3, r3, #32
 8000878:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 800087a:	e014      	b.n	80008a6 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <MCAL_UART_Init+0x174>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d106      	bne.n	8000892 <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MCAL_UART_Init+0x180>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MCAL_UART_Init+0x180>)
 800088a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	e009      	b.n	80008a6 <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <MCAL_UART_Init+0x178>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d105      	bne.n	80008a6 <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable ;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MCAL_UART_Init+0x180>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <MCAL_UART_Init+0x180>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6013      	str	r3, [r2, #0]
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000001c 	.word	0x2000001c
 80008b4:	40013800 	.word	0x40013800
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40004800 	.word	0x40004800
 80008c4:	51eb851f 	.word	0x51eb851f
 80008c8:	e000e104 	.word	0xe000e104

080008cc <MCAL_UART_SendData>:
			//			bit

 */

void MCAL_UART_SendData	(USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_mechism PollingEn )
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	71fb      	strb	r3, [r7, #7]
	uint16_t *pdata;

	// wait until TXE flag is set in the SR
	if (PollingEn == enable)
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d106      	bne.n	80008ee <MCAL_UART_SendData+0x22>
		while(! (USARTx->SR & 1<<7 ) );
 80008e0:	bf00      	nop
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d0f9      	beq.n	80008e2 <MCAL_UART_SendData+0x16>
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);

	}else
	{
		//This is 8bit data transfer
		USARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	605a      	str	r2, [r3, #4]
	}




}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
	...

08000904 <MCAL_UART_ReceiveData>:
}



void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	4613      	mov	r3, r2
 8000910:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d106      	bne.n	8000926 <MCAL_UART_ReceiveData+0x22>
	{
		while( ! (USARTx->SR & 1<<5 ));
 8000918:	bf00      	nop
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0f9      	beq.n	800091a <MCAL_UART_ReceiveData+0x16>
		}

	}else
	{
		//This is 8bit data
		if (Global_UART_Config->Parity ==UART_Parity__NONE)
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MCAL_UART_ReceiveData+0x58>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	7a5b      	ldrb	r3, [r3, #9]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d107      	bne.n	8000940 <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	b29b      	uxth	r3, r3
 8000936:	b2db      	uxtb	r3, r3
 8000938:	b29a      	uxth	r2, r3
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	801a      	strh	r2, [r3, #0]

		}
	}


}
 800093e:	e007      	b.n	8000950 <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	b29b      	uxth	r3, r3
 8000946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800094a:	b29a      	uxth	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	801a      	strh	r2, [r3, #0]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000001c 	.word	0x2000001c

08000960 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a2b      	ldr	r2, [pc, #172]	; (8000a18 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d118      	bne.n	80009a2 <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000974:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000976:	2306      	movs	r3, #6
 8000978:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4619      	mov	r1, r3
 8000984:	4825      	ldr	r0, [pc, #148]	; (8000a1c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000986:	f7ff fccb 	bl	8000320 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000990:	2308      	movs	r3, #8
 8000992:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	4820      	ldr	r0, [pc, #128]	; (8000a1c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 800099c:	f7ff fcc0 	bl	8000320 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 80009a0:	e036      	b.n	8000a10 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART2 )
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a1e      	ldr	r2, [pc, #120]	; (8000a20 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d116      	bne.n	80009d8 <MCAL_UART_GPIO_Set_Pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009ae:	2306      	movs	r3, #6
 80009b0:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009b2:	2301      	movs	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009be:	f7ff fcaf 	bl	8000320 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80009c2:	2308      	movs	r3, #8
 80009c4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80009c6:	2308      	movs	r3, #8
 80009c8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80009d2:	f7ff fca5 	bl	8000320 <MCAL_GPIO_Init>
}
 80009d6:	e01b      	b.n	8000a10 <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if ( USARTx == USART3 )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d117      	bne.n	8000a10 <MCAL_UART_GPIO_Set_Pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80009e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e4:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009e6:	2306      	movs	r3, #6
 80009e8:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 80009f6:	f7ff fc93 	bl	8000320 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80009fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fe:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a00:	2308      	movs	r3, #8
 8000a02:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000a0c:	f7ff fc88 	bl	8000320 <MCAL_GPIO_Init>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40013800 	.word	0x40013800
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40010c00 	.word	0x40010c00

08000a2c <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

	Global_UART_Config->P_IRQ_CallBack () ;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <USART1_IRQHandler+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	4798      	blx	r3

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000001c 	.word	0x2000001c

08000a40 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <USART2_IRQHandler+0x10>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	691b      	ldr	r3, [r3, #16]
 8000a4a:	4798      	blx	r3

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000001c 	.word	0x2000001c

08000a54 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <USART3_IRQHandler+0x10>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	4798      	blx	r3


}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000001c 	.word	0x2000001c

08000a68 <__libc_init_array>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	2500      	movs	r5, #0
 8000a6c:	4e0c      	ldr	r6, [pc, #48]	; (8000aa0 <__libc_init_array+0x38>)
 8000a6e:	4c0d      	ldr	r4, [pc, #52]	; (8000aa4 <__libc_init_array+0x3c>)
 8000a70:	1ba4      	subs	r4, r4, r6
 8000a72:	10a4      	asrs	r4, r4, #2
 8000a74:	42a5      	cmp	r5, r4
 8000a76:	d109      	bne.n	8000a8c <__libc_init_array+0x24>
 8000a78:	f000 f81a 	bl	8000ab0 <_init>
 8000a7c:	2500      	movs	r5, #0
 8000a7e:	4e0a      	ldr	r6, [pc, #40]	; (8000aa8 <__libc_init_array+0x40>)
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <__libc_init_array+0x44>)
 8000a82:	1ba4      	subs	r4, r4, r6
 8000a84:	10a4      	asrs	r4, r4, #2
 8000a86:	42a5      	cmp	r5, r4
 8000a88:	d105      	bne.n	8000a96 <__libc_init_array+0x2e>
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a90:	4798      	blx	r3
 8000a92:	3501      	adds	r5, #1
 8000a94:	e7ee      	b.n	8000a74 <__libc_init_array+0xc>
 8000a96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a9a:	4798      	blx	r3
 8000a9c:	3501      	adds	r5, #1
 8000a9e:	e7f2      	b.n	8000a86 <__libc_init_array+0x1e>
 8000aa0:	08000ae0 	.word	0x08000ae0
 8000aa4:	08000ae0 	.word	0x08000ae0
 8000aa8:	08000ae0 	.word	0x08000ae0
 8000aac:	08000ae4 	.word	0x08000ae4

08000ab0 <_init>:
 8000ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab2:	bf00      	nop
 8000ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab6:	bc08      	pop	{r3}
 8000ab8:	469e      	mov	lr, r3
 8000aba:	4770      	bx	lr

08000abc <_fini>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	bf00      	nop
 8000ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac2:	bc08      	pop	{r3}
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	4770      	bx	lr
