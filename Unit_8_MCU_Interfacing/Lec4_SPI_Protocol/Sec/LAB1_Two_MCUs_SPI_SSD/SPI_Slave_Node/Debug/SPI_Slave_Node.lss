
SPI_Slave_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000450  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000008b3  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6f 00 	call	0xde	; 0xde <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SlaveInit>:
#define MOSI 5
#define MISO 6
#define SCK 7

void SPI_SlaveInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output */
	SET_BIT(DDRB,MISO);
  74:	a7 e3       	ldi	r26, 0x37	; 55
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e3       	ldi	r30, 0x37	; 55
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24

	/* Set MOSI, SCK and SS input */
	CLR_BIT(DDRB,MOSI);
  82:	a7 e3       	ldi	r26, 0x37	; 55
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	8c 93       	st	X, r24
	CLR_BIT(DDRB,SCK);
  90:	a7 e3       	ldi	r26, 0x37	; 55
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e3       	ldi	r30, 0x37	; 55
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 77       	andi	r24, 0x7F	; 127
  9c:	8c 93       	st	X, r24
	CLR_BIT(DDRB,SS);
  9e:	a7 e3       	ldi	r26, 0x37	; 55
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e7 e3       	ldi	r30, 0x37	; 55
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	8c 93       	st	X, r24


	/* Enable SPI */
	SET_BIT(SPCR,SPE);
  ac:	ad e2       	ldi	r26, 0x2D	; 45
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	ed e2       	ldi	r30, 0x2D	; 45
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8c 93       	st	X, r24
}
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <SPI_SlaveRecieve>:

u8 SPI_SlaveRecieve(void)
{
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
  c8:	ee e2       	ldi	r30, 0x2E	; 46
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	dc f7       	brge	.-10     	; 0xc8 <SPI_SlaveRecieve+0x8>

	/* Return Data Register */
	return SPDR;
  d2:	ef e2       	ldi	r30, 0x2F	; 47
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
}
  d8:	cf 91       	pop	r28
  da:	df 91       	pop	r29
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
  ea:	ea e3       	ldi	r30, 0x3A	; 58
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	80 83       	st	Z, r24
	SPI_SlaveInit();
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SlaveInit>
	while(1)
	{
		PORTA = SPI_SlaveRecieve();
  f6:	0b e3       	ldi	r16, 0x3B	; 59
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	0e 94 60 00 	call	0xc0	; 0xc0 <SPI_SlaveRecieve>
  fe:	f8 01       	movw	r30, r16
 100:	80 83       	st	Z, r24
 102:	f9 cf       	rjmp	.-14     	; 0xf6 <main+0x18>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
