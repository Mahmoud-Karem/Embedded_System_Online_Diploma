
Slave_Node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000171c  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000cfd  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 3f 09 	call	0x127e	; 0x127e <main>
      64:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
      6c:	df 93       	push	r29
      6e:	cf 93       	push	r28
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
      74:	28 97       	sbiw	r28, 0x08	; 8
      76:	0f b6       	in	r0, 0x3f	; 63
      78:	f8 94       	cli
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	0f be       	out	0x3f, r0	; 63
      7e:	cd bf       	out	0x3d, r28	; 61
      80:	8a 83       	std	Y+2, r24	; 0x02
      82:	6b 83       	std	Y+3, r22	; 0x03
      84:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
      86:	81 e0       	ldi	r24, 0x01	; 1
      88:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
      8a:	8a 81       	ldd	r24, Y+2	; 0x02
      8c:	84 30       	cpi	r24, 0x04	; 4
      8e:	08 f0       	brcs	.+2      	; 0x92 <DIO_enumSetPinDirection+0x26>
      90:	f1 c0       	rjmp	.+482    	; 0x274 <DIO_enumSetPinDirection+0x208>
      92:	8b 81       	ldd	r24, Y+3	; 0x03
      94:	88 30       	cpi	r24, 0x08	; 8
      96:	08 f0       	brcs	.+2      	; 0x9a <DIO_enumSetPinDirection+0x2e>
      98:	ed c0       	rjmp	.+474    	; 0x274 <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
      9a:	8c 81       	ldd	r24, Y+4	; 0x04
      9c:	81 30       	cpi	r24, 0x01	; 1
      9e:	09 f0       	breq	.+2      	; 0xa2 <DIO_enumSetPinDirection+0x36>
      a0:	6f c0       	rjmp	.+222    	; 0x180 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
      a2:	8a 81       	ldd	r24, Y+2	; 0x02
      a4:	28 2f       	mov	r18, r24
      a6:	30 e0       	ldi	r19, 0x00	; 0
      a8:	38 87       	std	Y+8, r19	; 0x08
      aa:	2f 83       	std	Y+7, r18	; 0x07
      ac:	8f 81       	ldd	r24, Y+7	; 0x07
      ae:	98 85       	ldd	r25, Y+8	; 0x08
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	91 05       	cpc	r25, r1
      b4:	49 f1       	breq	.+82     	; 0x108 <DIO_enumSetPinDirection+0x9c>
      b6:	2f 81       	ldd	r18, Y+7	; 0x07
      b8:	38 85       	ldd	r19, Y+8	; 0x08
      ba:	22 30       	cpi	r18, 0x02	; 2
      bc:	31 05       	cpc	r19, r1
      be:	2c f4       	brge	.+10     	; 0xca <DIO_enumSetPinDirection+0x5e>
      c0:	8f 81       	ldd	r24, Y+7	; 0x07
      c2:	98 85       	ldd	r25, Y+8	; 0x08
      c4:	00 97       	sbiw	r24, 0x00	; 0
      c6:	61 f0       	breq	.+24     	; 0xe0 <DIO_enumSetPinDirection+0x74>
      c8:	d6 c0       	rjmp	.+428    	; 0x276 <DIO_enumSetPinDirection+0x20a>
      ca:	2f 81       	ldd	r18, Y+7	; 0x07
      cc:	38 85       	ldd	r19, Y+8	; 0x08
      ce:	22 30       	cpi	r18, 0x02	; 2
      d0:	31 05       	cpc	r19, r1
      d2:	71 f1       	breq	.+92     	; 0x130 <DIO_enumSetPinDirection+0xc4>
      d4:	8f 81       	ldd	r24, Y+7	; 0x07
      d6:	98 85       	ldd	r25, Y+8	; 0x08
      d8:	83 30       	cpi	r24, 0x03	; 3
      da:	91 05       	cpc	r25, r1
      dc:	e9 f1       	breq	.+122    	; 0x158 <DIO_enumSetPinDirection+0xec>
      de:	cb c0       	rjmp	.+406    	; 0x276 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
      e0:	aa e3       	ldi	r26, 0x3A	; 58
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	ea e3       	ldi	r30, 0x3A	; 58
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	48 2f       	mov	r20, r24
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	28 2f       	mov	r18, r24
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	02 2e       	mov	r0, r18
      f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_enumSetPinDirection+0x92>
      fa:	88 0f       	add	r24, r24
      fc:	99 1f       	adc	r25, r25
      fe:	0a 94       	dec	r0
     100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_enumSetPinDirection+0x8e>
     102:	84 2b       	or	r24, r20
     104:	8c 93       	st	X, r24
     106:	b7 c0       	rjmp	.+366    	; 0x276 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
     108:	a7 e3       	ldi	r26, 0x37	; 55
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	e7 e3       	ldi	r30, 0x37	; 55
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	48 2f       	mov	r20, r24
     114:	8b 81       	ldd	r24, Y+3	; 0x03
     116:	28 2f       	mov	r18, r24
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	02 2e       	mov	r0, r18
     120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_enumSetPinDirection+0xba>
     122:	88 0f       	add	r24, r24
     124:	99 1f       	adc	r25, r25
     126:	0a 94       	dec	r0
     128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_enumSetPinDirection+0xb6>
     12a:	84 2b       	or	r24, r20
     12c:	8c 93       	st	X, r24
     12e:	a3 c0       	rjmp	.+326    	; 0x276 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
     130:	a4 e3       	ldi	r26, 0x34	; 52
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	e4 e3       	ldi	r30, 0x34	; 52
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	48 2f       	mov	r20, r24
     13c:	8b 81       	ldd	r24, Y+3	; 0x03
     13e:	28 2f       	mov	r18, r24
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	02 2e       	mov	r0, r18
     148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_enumSetPinDirection+0xe2>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	0a 94       	dec	r0
     150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_enumSetPinDirection+0xde>
     152:	84 2b       	or	r24, r20
     154:	8c 93       	st	X, r24
     156:	8f c0       	rjmp	.+286    	; 0x276 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
     158:	a1 e3       	ldi	r26, 0x31	; 49
     15a:	b0 e0       	ldi	r27, 0x00	; 0
     15c:	e1 e3       	ldi	r30, 0x31	; 49
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	48 2f       	mov	r20, r24
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	28 2f       	mov	r18, r24
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	02 2e       	mov	r0, r18
     170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_enumSetPinDirection+0x10a>
     172:	88 0f       	add	r24, r24
     174:	99 1f       	adc	r25, r25
     176:	0a 94       	dec	r0
     178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_enumSetPinDirection+0x106>
     17a:	84 2b       	or	r24, r20
     17c:	8c 93       	st	X, r24
     17e:	7b c0       	rjmp	.+246    	; 0x276 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
     180:	8c 81       	ldd	r24, Y+4	; 0x04
     182:	88 23       	and	r24, r24
     184:	09 f0       	breq	.+2      	; 0x188 <DIO_enumSetPinDirection+0x11c>
     186:	74 c0       	rjmp	.+232    	; 0x270 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	28 2f       	mov	r18, r24
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	3e 83       	std	Y+6, r19	; 0x06
     190:	2d 83       	std	Y+5, r18	; 0x05
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	9e 81       	ldd	r25, Y+6	; 0x06
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	91 05       	cpc	r25, r1
     19a:	59 f1       	breq	.+86     	; 0x1f2 <DIO_enumSetPinDirection+0x186>
     19c:	2d 81       	ldd	r18, Y+5	; 0x05
     19e:	3e 81       	ldd	r19, Y+6	; 0x06
     1a0:	22 30       	cpi	r18, 0x02	; 2
     1a2:	31 05       	cpc	r19, r1
     1a4:	2c f4       	brge	.+10     	; 0x1b0 <DIO_enumSetPinDirection+0x144>
     1a6:	8d 81       	ldd	r24, Y+5	; 0x05
     1a8:	9e 81       	ldd	r25, Y+6	; 0x06
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	69 f0       	breq	.+26     	; 0x1c8 <DIO_enumSetPinDirection+0x15c>
     1ae:	63 c0       	rjmp	.+198    	; 0x276 <DIO_enumSetPinDirection+0x20a>
     1b0:	2d 81       	ldd	r18, Y+5	; 0x05
     1b2:	3e 81       	ldd	r19, Y+6	; 0x06
     1b4:	22 30       	cpi	r18, 0x02	; 2
     1b6:	31 05       	cpc	r19, r1
     1b8:	89 f1       	breq	.+98     	; 0x21c <DIO_enumSetPinDirection+0x1b0>
     1ba:	8d 81       	ldd	r24, Y+5	; 0x05
     1bc:	9e 81       	ldd	r25, Y+6	; 0x06
     1be:	83 30       	cpi	r24, 0x03	; 3
     1c0:	91 05       	cpc	r25, r1
     1c2:	09 f4       	brne	.+2      	; 0x1c6 <DIO_enumSetPinDirection+0x15a>
     1c4:	40 c0       	rjmp	.+128    	; 0x246 <DIO_enumSetPinDirection+0x1da>
     1c6:	57 c0       	rjmp	.+174    	; 0x276 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
     1c8:	aa e3       	ldi	r26, 0x3A	; 58
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	ea e3       	ldi	r30, 0x3A	; 58
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	80 81       	ld	r24, Z
     1d2:	48 2f       	mov	r20, r24
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	28 2f       	mov	r18, r24
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	02 2e       	mov	r0, r18
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_enumSetPinDirection+0x17a>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	0a 94       	dec	r0
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_enumSetPinDirection+0x176>
     1ea:	80 95       	com	r24
     1ec:	84 23       	and	r24, r20
     1ee:	8c 93       	st	X, r24
     1f0:	42 c0       	rjmp	.+132    	; 0x276 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
     1f2:	a7 e3       	ldi	r26, 0x37	; 55
     1f4:	b0 e0       	ldi	r27, 0x00	; 0
     1f6:	e7 e3       	ldi	r30, 0x37	; 55
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	48 2f       	mov	r20, r24
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	28 2f       	mov	r18, r24
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 2e       	mov	r0, r18
     20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_enumSetPinDirection+0x1a4>
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	0a 94       	dec	r0
     212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_enumSetPinDirection+0x1a0>
     214:	80 95       	com	r24
     216:	84 23       	and	r24, r20
     218:	8c 93       	st	X, r24
     21a:	2d c0       	rjmp	.+90     	; 0x276 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
     21c:	a4 e3       	ldi	r26, 0x34	; 52
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e4 e3       	ldi	r30, 0x34	; 52
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	48 2f       	mov	r20, r24
     228:	8b 81       	ldd	r24, Y+3	; 0x03
     22a:	28 2f       	mov	r18, r24
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	02 2e       	mov	r0, r18
     234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_enumSetPinDirection+0x1ce>
     236:	88 0f       	add	r24, r24
     238:	99 1f       	adc	r25, r25
     23a:	0a 94       	dec	r0
     23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_enumSetPinDirection+0x1ca>
     23e:	80 95       	com	r24
     240:	84 23       	and	r24, r20
     242:	8c 93       	st	X, r24
     244:	18 c0       	rjmp	.+48     	; 0x276 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
     246:	a1 e3       	ldi	r26, 0x31	; 49
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	e1 e3       	ldi	r30, 0x31	; 49
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	48 2f       	mov	r20, r24
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	28 2f       	mov	r18, r24
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 2e       	mov	r0, r18
     25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_enumSetPinDirection+0x1f8>
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	0a 94       	dec	r0
     266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_enumSetPinDirection+0x1f4>
     268:	80 95       	com	r24
     26a:	84 23       	and	r24, r20
     26c:	8c 93       	st	X, r24
     26e:	03 c0       	rjmp	.+6      	; 0x276 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     270:	19 82       	std	Y+1, r1	; 0x01
     272:	01 c0       	rjmp	.+2      	; 0x276 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     274:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     276:	89 81       	ldd	r24, Y+1	; 0x01

}
     278:	28 96       	adiw	r28, 0x08	; 8
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	cf 91       	pop	r28
     286:	df 91       	pop	r29
     288:	08 95       	ret

0000028a <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	28 97       	sbiw	r28, 0x08	; 8
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	8a 83       	std	Y+2, r24	; 0x02
     2a0:	6b 83       	std	Y+3, r22	; 0x03
     2a2:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	84 30       	cpi	r24, 0x04	; 4
     2ac:	08 f0       	brcs	.+2      	; 0x2b0 <DIO_enumSetPinValue+0x26>
     2ae:	f1 c0       	rjmp	.+482    	; 0x492 <__stack+0x33>
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	88 30       	cpi	r24, 0x08	; 8
     2b4:	08 f0       	brcs	.+2      	; 0x2b8 <DIO_enumSetPinValue+0x2e>
     2b6:	ed c0       	rjmp	.+474    	; 0x492 <__stack+0x33>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
     2b8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	09 f0       	breq	.+2      	; 0x2c0 <DIO_enumSetPinValue+0x36>
     2be:	6f c0       	rjmp	.+222    	; 0x39e <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	28 2f       	mov	r18, r24
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	38 87       	std	Y+8, r19	; 0x08
     2c8:	2f 83       	std	Y+7, r18	; 0x07
     2ca:	8f 81       	ldd	r24, Y+7	; 0x07
     2cc:	98 85       	ldd	r25, Y+8	; 0x08
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	91 05       	cpc	r25, r1
     2d2:	49 f1       	breq	.+82     	; 0x326 <DIO_enumSetPinValue+0x9c>
     2d4:	2f 81       	ldd	r18, Y+7	; 0x07
     2d6:	38 85       	ldd	r19, Y+8	; 0x08
     2d8:	22 30       	cpi	r18, 0x02	; 2
     2da:	31 05       	cpc	r19, r1
     2dc:	2c f4       	brge	.+10     	; 0x2e8 <DIO_enumSetPinValue+0x5e>
     2de:	8f 81       	ldd	r24, Y+7	; 0x07
     2e0:	98 85       	ldd	r25, Y+8	; 0x08
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	61 f0       	breq	.+24     	; 0x2fe <DIO_enumSetPinValue+0x74>
     2e6:	d6 c0       	rjmp	.+428    	; 0x494 <__stack+0x35>
     2e8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ea:	38 85       	ldd	r19, Y+8	; 0x08
     2ec:	22 30       	cpi	r18, 0x02	; 2
     2ee:	31 05       	cpc	r19, r1
     2f0:	71 f1       	breq	.+92     	; 0x34e <DIO_enumSetPinValue+0xc4>
     2f2:	8f 81       	ldd	r24, Y+7	; 0x07
     2f4:	98 85       	ldd	r25, Y+8	; 0x08
     2f6:	83 30       	cpi	r24, 0x03	; 3
     2f8:	91 05       	cpc	r25, r1
     2fa:	e9 f1       	breq	.+122    	; 0x376 <DIO_enumSetPinValue+0xec>
     2fc:	cb c0       	rjmp	.+406    	; 0x494 <__stack+0x35>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
     2fe:	ab e3       	ldi	r26, 0x3B	; 59
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	eb e3       	ldi	r30, 0x3B	; 59
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	48 2f       	mov	r20, r24
     30a:	8b 81       	ldd	r24, Y+3	; 0x03
     30c:	28 2f       	mov	r18, r24
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	02 2e       	mov	r0, r18
     316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_enumSetPinValue+0x92>
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	0a 94       	dec	r0
     31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_enumSetPinValue+0x8e>
     320:	84 2b       	or	r24, r20
     322:	8c 93       	st	X, r24
     324:	b7 c0       	rjmp	.+366    	; 0x494 <__stack+0x35>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
     326:	a8 e3       	ldi	r26, 0x38	; 56
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	e8 e3       	ldi	r30, 0x38	; 56
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	48 2f       	mov	r20, r24
     332:	8b 81       	ldd	r24, Y+3	; 0x03
     334:	28 2f       	mov	r18, r24
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 2e       	mov	r0, r18
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_enumSetPinValue+0xba>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	0a 94       	dec	r0
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_enumSetPinValue+0xb6>
     348:	84 2b       	or	r24, r20
     34a:	8c 93       	st	X, r24
     34c:	a3 c0       	rjmp	.+326    	; 0x494 <__stack+0x35>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
     34e:	a5 e3       	ldi	r26, 0x35	; 53
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e5 e3       	ldi	r30, 0x35	; 53
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	48 2f       	mov	r20, r24
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	28 2f       	mov	r18, r24
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	02 2e       	mov	r0, r18
     366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_enumSetPinValue+0xe2>
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	0a 94       	dec	r0
     36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_enumSetPinValue+0xde>
     370:	84 2b       	or	r24, r20
     372:	8c 93       	st	X, r24
     374:	8f c0       	rjmp	.+286    	; 0x494 <__stack+0x35>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
     376:	a2 e3       	ldi	r26, 0x32	; 50
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e2 e3       	ldi	r30, 0x32	; 50
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	48 2f       	mov	r20, r24
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	28 2f       	mov	r18, r24
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	02 2e       	mov	r0, r18
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_enumSetPinValue+0x10a>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	0a 94       	dec	r0
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_enumSetPinValue+0x106>
     398:	84 2b       	or	r24, r20
     39a:	8c 93       	st	X, r24
     39c:	7b c0       	rjmp	.+246    	; 0x494 <__stack+0x35>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
     39e:	8c 81       	ldd	r24, Y+4	; 0x04
     3a0:	88 23       	and	r24, r24
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <DIO_enumSetPinValue+0x11c>
     3a4:	74 c0       	rjmp	.+232    	; 0x48e <__stack+0x2f>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     3a6:	8a 81       	ldd	r24, Y+2	; 0x02
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	3e 83       	std	Y+6, r19	; 0x06
     3ae:	2d 83       	std	Y+5, r18	; 0x05
     3b0:	8d 81       	ldd	r24, Y+5	; 0x05
     3b2:	9e 81       	ldd	r25, Y+6	; 0x06
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	91 05       	cpc	r25, r1
     3b8:	59 f1       	breq	.+86     	; 0x410 <DIO_enumSetPinValue+0x186>
     3ba:	2d 81       	ldd	r18, Y+5	; 0x05
     3bc:	3e 81       	ldd	r19, Y+6	; 0x06
     3be:	22 30       	cpi	r18, 0x02	; 2
     3c0:	31 05       	cpc	r19, r1
     3c2:	2c f4       	brge	.+10     	; 0x3ce <DIO_enumSetPinValue+0x144>
     3c4:	8d 81       	ldd	r24, Y+5	; 0x05
     3c6:	9e 81       	ldd	r25, Y+6	; 0x06
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	69 f0       	breq	.+26     	; 0x3e6 <DIO_enumSetPinValue+0x15c>
     3cc:	63 c0       	rjmp	.+198    	; 0x494 <__stack+0x35>
     3ce:	2d 81       	ldd	r18, Y+5	; 0x05
     3d0:	3e 81       	ldd	r19, Y+6	; 0x06
     3d2:	22 30       	cpi	r18, 0x02	; 2
     3d4:	31 05       	cpc	r19, r1
     3d6:	89 f1       	breq	.+98     	; 0x43a <DIO_enumSetPinValue+0x1b0>
     3d8:	8d 81       	ldd	r24, Y+5	; 0x05
     3da:	9e 81       	ldd	r25, Y+6	; 0x06
     3dc:	83 30       	cpi	r24, 0x03	; 3
     3de:	91 05       	cpc	r25, r1
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <DIO_enumSetPinValue+0x15a>
     3e2:	40 c0       	rjmp	.+128    	; 0x464 <__stack+0x5>
     3e4:	57 c0       	rjmp	.+174    	; 0x494 <__stack+0x35>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
     3e6:	ab e3       	ldi	r26, 0x3B	; 59
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	eb e3       	ldi	r30, 0x3B	; 59
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	48 2f       	mov	r20, r24
     3f2:	8b 81       	ldd	r24, Y+3	; 0x03
     3f4:	28 2f       	mov	r18, r24
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	02 2e       	mov	r0, r18
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_enumSetPinValue+0x17a>
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	0a 94       	dec	r0
     406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_enumSetPinValue+0x176>
     408:	80 95       	com	r24
     40a:	84 23       	and	r24, r20
     40c:	8c 93       	st	X, r24
     40e:	42 c0       	rjmp	.+132    	; 0x494 <__stack+0x35>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
     410:	a8 e3       	ldi	r26, 0x38	; 56
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e8 e3       	ldi	r30, 0x38	; 56
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	48 2f       	mov	r20, r24
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	28 2f       	mov	r18, r24
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 2e       	mov	r0, r18
     428:	02 c0       	rjmp	.+4      	; 0x42e <DIO_enumSetPinValue+0x1a4>
     42a:	88 0f       	add	r24, r24
     42c:	99 1f       	adc	r25, r25
     42e:	0a 94       	dec	r0
     430:	e2 f7       	brpl	.-8      	; 0x42a <DIO_enumSetPinValue+0x1a0>
     432:	80 95       	com	r24
     434:	84 23       	and	r24, r20
     436:	8c 93       	st	X, r24
     438:	2d c0       	rjmp	.+90     	; 0x494 <__stack+0x35>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
     43a:	a5 e3       	ldi	r26, 0x35	; 53
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	e5 e3       	ldi	r30, 0x35	; 53
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	48 2f       	mov	r20, r24
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	28 2f       	mov	r18, r24
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	02 2e       	mov	r0, r18
     452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_enumSetPinValue+0x1ce>
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	0a 94       	dec	r0
     45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_enumSetPinValue+0x1ca>
     45c:	80 95       	com	r24
     45e:	84 23       	and	r24, r20
     460:	8c 93       	st	X, r24
     462:	18 c0       	rjmp	.+48     	; 0x494 <__stack+0x35>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
     464:	a2 e3       	ldi	r26, 0x32	; 50
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	e2 e3       	ldi	r30, 0x32	; 50
     46a:	f0 e0       	ldi	r31, 0x00	; 0
     46c:	80 81       	ld	r24, Z
     46e:	48 2f       	mov	r20, r24
     470:	8b 81       	ldd	r24, Y+3	; 0x03
     472:	28 2f       	mov	r18, r24
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	02 2e       	mov	r0, r18
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__stack+0x23>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	0a 94       	dec	r0
     484:	e2 f7       	brpl	.-8      	; 0x47e <__stack+0x1f>
     486:	80 95       	com	r24
     488:	84 23       	and	r24, r20
     48a:	8c 93       	st	X, r24
     48c:	03 c0       	rjmp	.+6      	; 0x494 <__stack+0x35>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     48e:	19 82       	std	Y+1, r1	; 0x01
     490:	01 c0       	rjmp	.+2      	; 0x494 <__stack+0x35>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     492:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     494:	89 81       	ldd	r24, Y+1	; 0x01

}
     496:	28 96       	adiw	r28, 0x08	; 8
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
     4a2:	cf 91       	pop	r28
     4a4:	df 91       	pop	r29
     4a6:	08 95       	ret

000004a8 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
     4a8:	df 93       	push	r29
     4aa:	cf 93       	push	r28
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	27 97       	sbiw	r28, 0x07	; 7
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	8a 83       	std	Y+2, r24	; 0x02
     4be:	6b 83       	std	Y+3, r22	; 0x03
     4c0:	5d 83       	std	Y+5, r21	; 0x05
     4c2:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	84 30       	cpi	r24, 0x04	; 4
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <DIO_enumGetPinValue+0x28>
     4ce:	a6 c0       	rjmp	.+332    	; 0x61c <DIO_enumGetPinValue+0x174>
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	88 30       	cpi	r24, 0x08	; 8
     4d4:	08 f0       	brcs	.+2      	; 0x4d8 <DIO_enumGetPinValue+0x30>
     4d6:	a2 c0       	rjmp	.+324    	; 0x61c <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	28 2f       	mov	r18, r24
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	3f 83       	std	Y+7, r19	; 0x07
     4e0:	2e 83       	std	Y+6, r18	; 0x06
     4e2:	4e 81       	ldd	r20, Y+6	; 0x06
     4e4:	5f 81       	ldd	r21, Y+7	; 0x07
     4e6:	41 30       	cpi	r20, 0x01	; 1
     4e8:	51 05       	cpc	r21, r1
     4ea:	c1 f1       	breq	.+112    	; 0x55c <DIO_enumGetPinValue+0xb4>
     4ec:	8e 81       	ldd	r24, Y+6	; 0x06
     4ee:	9f 81       	ldd	r25, Y+7	; 0x07
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	91 05       	cpc	r25, r1
     4f4:	34 f4       	brge	.+12     	; 0x502 <DIO_enumGetPinValue+0x5a>
     4f6:	2e 81       	ldd	r18, Y+6	; 0x06
     4f8:	3f 81       	ldd	r19, Y+7	; 0x07
     4fa:	21 15       	cp	r18, r1
     4fc:	31 05       	cpc	r19, r1
     4fe:	71 f0       	breq	.+28     	; 0x51c <DIO_enumGetPinValue+0x74>
     500:	8e c0       	rjmp	.+284    	; 0x61e <DIO_enumGetPinValue+0x176>
     502:	4e 81       	ldd	r20, Y+6	; 0x06
     504:	5f 81       	ldd	r21, Y+7	; 0x07
     506:	42 30       	cpi	r20, 0x02	; 2
     508:	51 05       	cpc	r21, r1
     50a:	09 f4       	brne	.+2      	; 0x50e <DIO_enumGetPinValue+0x66>
     50c:	47 c0       	rjmp	.+142    	; 0x59c <DIO_enumGetPinValue+0xf4>
     50e:	8e 81       	ldd	r24, Y+6	; 0x06
     510:	9f 81       	ldd	r25, Y+7	; 0x07
     512:	83 30       	cpi	r24, 0x03	; 3
     514:	91 05       	cpc	r25, r1
     516:	09 f4       	brne	.+2      	; 0x51a <DIO_enumGetPinValue+0x72>
     518:	61 c0       	rjmp	.+194    	; 0x5dc <DIO_enumGetPinValue+0x134>
     51a:	81 c0       	rjmp	.+258    	; 0x61e <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
     51c:	e9 e3       	ldi	r30, 0x39	; 57
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	48 2f       	mov	r20, r24
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	28 2f       	mov	r18, r24
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_enumGetPinValue+0x8e>
     532:	88 0f       	add	r24, r24
     534:	99 1f       	adc	r25, r25
     536:	2a 95       	dec	r18
     538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_enumGetPinValue+0x8a>
     53a:	9a 01       	movw	r18, r20
     53c:	28 23       	and	r18, r24
     53e:	39 23       	and	r19, r25
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	88 2f       	mov	r24, r24
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a9 01       	movw	r20, r18
     548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_enumGetPinValue+0xa6>
     54a:	55 95       	asr	r21
     54c:	47 95       	ror	r20
     54e:	8a 95       	dec	r24
     550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_enumGetPinValue+0xa2>
     552:	ca 01       	movw	r24, r20
     554:	ec 81       	ldd	r30, Y+4	; 0x04
     556:	fd 81       	ldd	r31, Y+5	; 0x05
     558:	80 83       	st	Z, r24
     55a:	61 c0       	rjmp	.+194    	; 0x61e <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
     55c:	e6 e3       	ldi	r30, 0x36	; 54
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	48 2f       	mov	r20, r24
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_enumGetPinValue+0xce>
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	2a 95       	dec	r18
     578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_enumGetPinValue+0xca>
     57a:	9a 01       	movw	r18, r20
     57c:	28 23       	and	r18, r24
     57e:	39 23       	and	r19, r25
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a9 01       	movw	r20, r18
     588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_enumGetPinValue+0xe6>
     58a:	55 95       	asr	r21
     58c:	47 95       	ror	r20
     58e:	8a 95       	dec	r24
     590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_enumGetPinValue+0xe2>
     592:	ca 01       	movw	r24, r20
     594:	ec 81       	ldd	r30, Y+4	; 0x04
     596:	fd 81       	ldd	r31, Y+5	; 0x05
     598:	80 83       	st	Z, r24
     59a:	41 c0       	rjmp	.+130    	; 0x61e <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
     59c:	e3 e3       	ldi	r30, 0x33	; 51
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	48 2f       	mov	r20, r24
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	28 2f       	mov	r18, r24
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_enumGetPinValue+0x10e>
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	2a 95       	dec	r18
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_enumGetPinValue+0x10a>
     5ba:	9a 01       	movw	r18, r20
     5bc:	28 23       	and	r18, r24
     5be:	39 23       	and	r19, r25
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	a9 01       	movw	r20, r18
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_enumGetPinValue+0x126>
     5ca:	55 95       	asr	r21
     5cc:	47 95       	ror	r20
     5ce:	8a 95       	dec	r24
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_enumGetPinValue+0x122>
     5d2:	ca 01       	movw	r24, r20
     5d4:	ec 81       	ldd	r30, Y+4	; 0x04
     5d6:	fd 81       	ldd	r31, Y+5	; 0x05
     5d8:	80 83       	st	Z, r24
     5da:	21 c0       	rjmp	.+66     	; 0x61e <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
     5dc:	e0 e3       	ldi	r30, 0x30	; 48
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	48 2f       	mov	r20, r24
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	28 2f       	mov	r18, r24
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_enumGetPinValue+0x14e>
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	2a 95       	dec	r18
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_enumGetPinValue+0x14a>
     5fa:	9a 01       	movw	r18, r20
     5fc:	28 23       	and	r18, r24
     5fe:	39 23       	and	r19, r25
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	a9 01       	movw	r20, r18
     608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_enumGetPinValue+0x166>
     60a:	55 95       	asr	r21
     60c:	47 95       	ror	r20
     60e:	8a 95       	dec	r24
     610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_enumGetPinValue+0x162>
     612:	ca 01       	movw	r24, r20
     614:	ec 81       	ldd	r30, Y+4	; 0x04
     616:	fd 81       	ldd	r31, Y+5	; 0x05
     618:	80 83       	st	Z, r24
     61a:	01 c0       	rjmp	.+2      	; 0x61e <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
     61c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
     61e:	89 81       	ldd	r24, Y+1	; 0x01
}
     620:	27 96       	adiw	r28, 0x07	; 7
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	cf 91       	pop	r28
     62e:	df 91       	pop	r29
     630:	08 95       	ret

00000632 <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
     632:	df 93       	push	r29
     634:	cf 93       	push	r28
     636:	00 d0       	rcall	.+0      	; 0x638 <DIO_enumTogglePinValue+0x6>
     638:	00 d0       	rcall	.+0      	; 0x63a <DIO_enumTogglePinValue+0x8>
     63a:	0f 92       	push	r0
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	8a 83       	std	Y+2, r24	; 0x02
     642:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	88 30       	cpi	r24, 0x08	; 8
     64c:	08 f0       	brcs	.+2      	; 0x650 <DIO_enumTogglePinValue+0x1e>
     64e:	6f c0       	rjmp	.+222    	; 0x72e <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
     650:	8a 81       	ldd	r24, Y+2	; 0x02
     652:	28 2f       	mov	r18, r24
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	3d 83       	std	Y+5, r19	; 0x05
     658:	2c 83       	std	Y+4, r18	; 0x04
     65a:	8c 81       	ldd	r24, Y+4	; 0x04
     65c:	9d 81       	ldd	r25, Y+5	; 0x05
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	91 05       	cpc	r25, r1
     662:	49 f1       	breq	.+82     	; 0x6b6 <DIO_enumTogglePinValue+0x84>
     664:	2c 81       	ldd	r18, Y+4	; 0x04
     666:	3d 81       	ldd	r19, Y+5	; 0x05
     668:	22 30       	cpi	r18, 0x02	; 2
     66a:	31 05       	cpc	r19, r1
     66c:	2c f4       	brge	.+10     	; 0x678 <DIO_enumTogglePinValue+0x46>
     66e:	8c 81       	ldd	r24, Y+4	; 0x04
     670:	9d 81       	ldd	r25, Y+5	; 0x05
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	61 f0       	breq	.+24     	; 0x68e <DIO_enumTogglePinValue+0x5c>
     676:	5c c0       	rjmp	.+184    	; 0x730 <DIO_enumTogglePinValue+0xfe>
     678:	2c 81       	ldd	r18, Y+4	; 0x04
     67a:	3d 81       	ldd	r19, Y+5	; 0x05
     67c:	22 30       	cpi	r18, 0x02	; 2
     67e:	31 05       	cpc	r19, r1
     680:	71 f1       	breq	.+92     	; 0x6de <DIO_enumTogglePinValue+0xac>
     682:	8c 81       	ldd	r24, Y+4	; 0x04
     684:	9d 81       	ldd	r25, Y+5	; 0x05
     686:	83 30       	cpi	r24, 0x03	; 3
     688:	91 05       	cpc	r25, r1
     68a:	e9 f1       	breq	.+122    	; 0x706 <DIO_enumTogglePinValue+0xd4>
     68c:	51 c0       	rjmp	.+162    	; 0x730 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
     68e:	ab e3       	ldi	r26, 0x3B	; 59
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	eb e3       	ldi	r30, 0x3B	; 59
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	48 2f       	mov	r20, r24
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	02 2e       	mov	r0, r18
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_enumTogglePinValue+0x7a>
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	0a 94       	dec	r0
     6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_enumTogglePinValue+0x76>
     6b0:	84 27       	eor	r24, r20
     6b2:	8c 93       	st	X, r24
     6b4:	3d c0       	rjmp	.+122    	; 0x730 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
     6b6:	a8 e3       	ldi	r26, 0x38	; 56
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	e8 e3       	ldi	r30, 0x38	; 56
     6bc:	f0 e0       	ldi	r31, 0x00	; 0
     6be:	80 81       	ld	r24, Z
     6c0:	48 2f       	mov	r20, r24
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	28 2f       	mov	r18, r24
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	02 2e       	mov	r0, r18
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_enumTogglePinValue+0xa2>
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	0a 94       	dec	r0
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_enumTogglePinValue+0x9e>
     6d8:	84 27       	eor	r24, r20
     6da:	8c 93       	st	X, r24
     6dc:	29 c0       	rjmp	.+82     	; 0x730 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
     6de:	a5 e3       	ldi	r26, 0x35	; 53
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	e5 e3       	ldi	r30, 0x35	; 53
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	48 2f       	mov	r20, r24
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	28 2f       	mov	r18, r24
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	02 2e       	mov	r0, r18
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_enumTogglePinValue+0xca>
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	0a 94       	dec	r0
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_enumTogglePinValue+0xc6>
     700:	84 27       	eor	r24, r20
     702:	8c 93       	st	X, r24
     704:	15 c0       	rjmp	.+42     	; 0x730 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
     706:	a2 e3       	ldi	r26, 0x32	; 50
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	e2 e3       	ldi	r30, 0x32	; 50
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	48 2f       	mov	r20, r24
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	28 2f       	mov	r18, r24
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	02 2e       	mov	r0, r18
     71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_enumTogglePinValue+0xf2>
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_enumTogglePinValue+0xee>
     728:	84 27       	eor	r24, r20
     72a:	8c 93       	st	X, r24
     72c:	01 c0       	rjmp	.+2      	; 0x730 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
     72e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
     730:	89 81       	ldd	r24, Y+1	; 0x01
}
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	08 95       	ret

00000742 <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
     742:	df 93       	push	r29
     744:	cf 93       	push	r28
     746:	00 d0       	rcall	.+0      	; 0x748 <DIO_enumConnectPullup+0x6>
     748:	00 d0       	rcall	.+0      	; 0x74a <DIO_enumConnectPullup+0x8>
     74a:	00 d0       	rcall	.+0      	; 0x74c <DIO_enumConnectPullup+0xa>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
     750:	8a 83       	std	Y+2, r24	; 0x02
     752:	6b 83       	std	Y+3, r22	; 0x03
     754:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	08 f0       	brcs	.+2      	; 0x762 <DIO_enumConnectPullup+0x20>
     760:	3e c1       	rjmp	.+636    	; 0x9de <DIO_enumConnectPullup+0x29c>
     762:	8b 81       	ldd	r24, Y+3	; 0x03
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	08 f0       	brcs	.+2      	; 0x76a <DIO_enumConnectPullup+0x28>
     768:	3a c1       	rjmp	.+628    	; 0x9de <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	28 2f       	mov	r18, r24
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	3e 83       	std	Y+6, r19	; 0x06
     772:	2d 83       	std	Y+5, r18	; 0x05
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	9e 81       	ldd	r25, Y+6	; 0x06
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	91 05       	cpc	r25, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <DIO_enumConnectPullup+0x3e>
     77e:	5d c0       	rjmp	.+186    	; 0x83a <DIO_enumConnectPullup+0xf8>
     780:	2d 81       	ldd	r18, Y+5	; 0x05
     782:	3e 81       	ldd	r19, Y+6	; 0x06
     784:	22 30       	cpi	r18, 0x02	; 2
     786:	31 05       	cpc	r19, r1
     788:	2c f4       	brge	.+10     	; 0x794 <DIO_enumConnectPullup+0x52>
     78a:	8d 81       	ldd	r24, Y+5	; 0x05
     78c:	9e 81       	ldd	r25, Y+6	; 0x06
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	71 f0       	breq	.+28     	; 0x7ae <DIO_enumConnectPullup+0x6c>
     792:	26 c1       	rjmp	.+588    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
     794:	2d 81       	ldd	r18, Y+5	; 0x05
     796:	3e 81       	ldd	r19, Y+6	; 0x06
     798:	22 30       	cpi	r18, 0x02	; 2
     79a:	31 05       	cpc	r19, r1
     79c:	09 f4       	brne	.+2      	; 0x7a0 <DIO_enumConnectPullup+0x5e>
     79e:	93 c0       	rjmp	.+294    	; 0x8c6 <DIO_enumConnectPullup+0x184>
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	9e 81       	ldd	r25, Y+6	; 0x06
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	91 05       	cpc	r25, r1
     7a8:	09 f4       	brne	.+2      	; 0x7ac <DIO_enumConnectPullup+0x6a>
     7aa:	d3 c0       	rjmp	.+422    	; 0x952 <DIO_enumConnectPullup+0x210>
     7ac:	19 c1       	rjmp	.+562    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     7ae:	8c 81       	ldd	r24, Y+4	; 0x04
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	71 f5       	brne	.+92     	; 0x810 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
     7b4:	a0 e5       	ldi	r26, 0x50	; 80
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	e0 e5       	ldi	r30, 0x50	; 80
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	8b 7f       	andi	r24, 0xFB	; 251
     7c0:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
     7c2:	aa e3       	ldi	r26, 0x3A	; 58
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	ea e3       	ldi	r30, 0x3A	; 58
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	48 2f       	mov	r20, r24
     7ce:	8b 81       	ldd	r24, Y+3	; 0x03
     7d0:	28 2f       	mov	r18, r24
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_enumConnectPullup+0x9c>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	2a 95       	dec	r18
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_enumConnectPullup+0x98>
     7e2:	80 95       	com	r24
     7e4:	84 23       	and	r24, r20
     7e6:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
     7e8:	ab e3       	ldi	r26, 0x3B	; 59
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	eb e3       	ldi	r30, 0x3B	; 59
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	48 2f       	mov	r20, r24
     7f4:	8b 81       	ldd	r24, Y+3	; 0x03
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	02 2e       	mov	r0, r18
     800:	02 c0       	rjmp	.+4      	; 0x806 <DIO_enumConnectPullup+0xc4>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <DIO_enumConnectPullup+0xc0>
     80a:	84 2b       	or	r24, r20
     80c:	8c 93       	st	X, r24
     80e:	e8 c0       	rjmp	.+464    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
     810:	ab e3       	ldi	r26, 0x3B	; 59
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	eb e3       	ldi	r30, 0x3B	; 59
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	48 2f       	mov	r20, r24
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 2e       	mov	r0, r18
     828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_enumConnectPullup+0xec>
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	0a 94       	dec	r0
     830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_enumConnectPullup+0xe8>
     832:	80 95       	com	r24
     834:	84 23       	and	r24, r20
     836:	8c 93       	st	X, r24
     838:	d3 c0       	rjmp	.+422    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     83a:	8c 81       	ldd	r24, Y+4	; 0x04
     83c:	81 30       	cpi	r24, 0x01	; 1
     83e:	71 f5       	brne	.+92     	; 0x89c <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
     840:	a0 e5       	ldi	r26, 0x50	; 80
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	e0 e5       	ldi	r30, 0x50	; 80
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	8b 7f       	andi	r24, 0xFB	; 251
     84c:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
     84e:	a7 e3       	ldi	r26, 0x37	; 55
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e7 e3       	ldi	r30, 0x37	; 55
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	48 2f       	mov	r20, r24
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	28 2f       	mov	r18, r24
     85e:	30 e0       	ldi	r19, 0x00	; 0
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	02 c0       	rjmp	.+4      	; 0x86a <DIO_enumConnectPullup+0x128>
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	2a 95       	dec	r18
     86c:	e2 f7       	brpl	.-8      	; 0x866 <DIO_enumConnectPullup+0x124>
     86e:	80 95       	com	r24
     870:	84 23       	and	r24, r20
     872:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
     874:	a8 e3       	ldi	r26, 0x38	; 56
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e8 e3       	ldi	r30, 0x38	; 56
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	48 2f       	mov	r20, r24
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 2e       	mov	r0, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <DIO_enumConnectPullup+0x150>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <DIO_enumConnectPullup+0x14c>
     896:	84 2b       	or	r24, r20
     898:	8c 93       	st	X, r24
     89a:	a2 c0       	rjmp	.+324    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
     89c:	a8 e3       	ldi	r26, 0x38	; 56
     89e:	b0 e0       	ldi	r27, 0x00	; 0
     8a0:	e8 e3       	ldi	r30, 0x38	; 56
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
     8a4:	80 81       	ld	r24, Z
     8a6:	48 2f       	mov	r20, r24
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	28 2f       	mov	r18, r24
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	02 2e       	mov	r0, r18
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <DIO_enumConnectPullup+0x178>
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	0a 94       	dec	r0
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <DIO_enumConnectPullup+0x174>
     8be:	80 95       	com	r24
     8c0:	84 23       	and	r24, r20
     8c2:	8c 93       	st	X, r24
     8c4:	8d c0       	rjmp	.+282    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     8c6:	8c 81       	ldd	r24, Y+4	; 0x04
     8c8:	81 30       	cpi	r24, 0x01	; 1
     8ca:	71 f5       	brne	.+92     	; 0x928 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
     8cc:	a0 e5       	ldi	r26, 0x50	; 80
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	e0 e5       	ldi	r30, 0x50	; 80
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	8b 7f       	andi	r24, 0xFB	; 251
     8d8:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
     8da:	a4 e3       	ldi	r26, 0x34	; 52
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e4 e3       	ldi	r30, 0x34	; 52
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	48 2f       	mov	r20, r24
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <DIO_enumConnectPullup+0x1b4>
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	2a 95       	dec	r18
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <DIO_enumConnectPullup+0x1b0>
     8fa:	80 95       	com	r24
     8fc:	84 23       	and	r24, r20
     8fe:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
     900:	a5 e3       	ldi	r26, 0x35	; 53
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e5 e3       	ldi	r30, 0x35	; 53
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	48 2f       	mov	r20, r24
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	28 2f       	mov	r18, r24
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	02 2e       	mov	r0, r18
     918:	02 c0       	rjmp	.+4      	; 0x91e <DIO_enumConnectPullup+0x1dc>
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	0a 94       	dec	r0
     920:	e2 f7       	brpl	.-8      	; 0x91a <DIO_enumConnectPullup+0x1d8>
     922:	84 2b       	or	r24, r20
     924:	8c 93       	st	X, r24
     926:	5c c0       	rjmp	.+184    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
     928:	a5 e3       	ldi	r26, 0x35	; 53
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	e5 e3       	ldi	r30, 0x35	; 53
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	48 2f       	mov	r20, r24
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	28 2f       	mov	r18, r24
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	02 2e       	mov	r0, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <DIO_enumConnectPullup+0x204>
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	0a 94       	dec	r0
     948:	e2 f7       	brpl	.-8      	; 0x942 <DIO_enumConnectPullup+0x200>
     94a:	80 95       	com	r24
     94c:	84 23       	and	r24, r20
     94e:	8c 93       	st	X, r24
     950:	47 c0       	rjmp	.+142    	; 0x9e0 <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     952:	8c 81       	ldd	r24, Y+4	; 0x04
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	71 f5       	brne	.+92     	; 0x9b4 <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
     958:	a0 e5       	ldi	r26, 0x50	; 80
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	e0 e5       	ldi	r30, 0x50	; 80
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	8b 7f       	andi	r24, 0xFB	; 251
     964:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
     966:	a1 e3       	ldi	r26, 0x31	; 49
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e1 e3       	ldi	r30, 0x31	; 49
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	80 81       	ld	r24, Z
     970:	48 2f       	mov	r20, r24
     972:	8b 81       	ldd	r24, Y+3	; 0x03
     974:	28 2f       	mov	r18, r24
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	02 c0       	rjmp	.+4      	; 0x982 <DIO_enumConnectPullup+0x240>
     97e:	88 0f       	add	r24, r24
     980:	99 1f       	adc	r25, r25
     982:	2a 95       	dec	r18
     984:	e2 f7       	brpl	.-8      	; 0x97e <DIO_enumConnectPullup+0x23c>
     986:	80 95       	com	r24
     988:	84 23       	and	r24, r20
     98a:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
     98c:	a2 e3       	ldi	r26, 0x32	; 50
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e2 e3       	ldi	r30, 0x32	; 50
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	48 2f       	mov	r20, r24
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	28 2f       	mov	r18, r24
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	02 2e       	mov	r0, r18
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <DIO_enumConnectPullup+0x268>
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	0a 94       	dec	r0
     9ac:	e2 f7       	brpl	.-8      	; 0x9a6 <DIO_enumConnectPullup+0x264>
     9ae:	84 2b       	or	r24, r20
     9b0:	8c 93       	st	X, r24
     9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
     9b4:	a2 e3       	ldi	r26, 0x32	; 50
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e2 e3       	ldi	r30, 0x32	; 50
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	48 2f       	mov	r20, r24
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	02 2e       	mov	r0, r18
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_enumConnectPullup+0x290>
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	0a 94       	dec	r0
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_enumConnectPullup+0x28c>
     9d6:	80 95       	com	r24
     9d8:	84 23       	and	r24, r20
     9da:	8c 93       	st	X, r24
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     9de:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     9e0:	89 81       	ldd	r24, Y+1	; 0x01


}
     9e2:	26 96       	adiw	r28, 0x06	; 6
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	cf 91       	pop	r28
     9f0:	df 91       	pop	r29
     9f2:	08 95       	ret

000009f4 <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
     9f4:	df 93       	push	r29
     9f6:	cf 93       	push	r28
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <DIO_enumSetPortDirection+0x6>
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <DIO_enumSetPortDirection+0x8>
     9fc:	0f 92       	push	r0
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	8a 83       	std	Y+2, r24	; 0x02
     a04:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
     a0a:	8a 81       	ldd	r24, Y+2	; 0x02
     a0c:	84 30       	cpi	r24, 0x04	; 4
     a0e:	a8 f5       	brcc	.+106    	; 0xa7a <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	28 2f       	mov	r18, r24
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	3d 83       	std	Y+5, r19	; 0x05
     a18:	2c 83       	std	Y+4, r18	; 0x04
     a1a:	8c 81       	ldd	r24, Y+4	; 0x04
     a1c:	9d 81       	ldd	r25, Y+5	; 0x05
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	91 05       	cpc	r25, r1
     a22:	d1 f0       	breq	.+52     	; 0xa58 <DIO_enumSetPortDirection+0x64>
     a24:	2c 81       	ldd	r18, Y+4	; 0x04
     a26:	3d 81       	ldd	r19, Y+5	; 0x05
     a28:	22 30       	cpi	r18, 0x02	; 2
     a2a:	31 05       	cpc	r19, r1
     a2c:	2c f4       	brge	.+10     	; 0xa38 <DIO_enumSetPortDirection+0x44>
     a2e:	8c 81       	ldd	r24, Y+4	; 0x04
     a30:	9d 81       	ldd	r25, Y+5	; 0x05
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	61 f0       	breq	.+24     	; 0xa4e <DIO_enumSetPortDirection+0x5a>
     a36:	1f c0       	rjmp	.+62     	; 0xa76 <DIO_enumSetPortDirection+0x82>
     a38:	2c 81       	ldd	r18, Y+4	; 0x04
     a3a:	3d 81       	ldd	r19, Y+5	; 0x05
     a3c:	22 30       	cpi	r18, 0x02	; 2
     a3e:	31 05       	cpc	r19, r1
     a40:	81 f0       	breq	.+32     	; 0xa62 <DIO_enumSetPortDirection+0x6e>
     a42:	8c 81       	ldd	r24, Y+4	; 0x04
     a44:	9d 81       	ldd	r25, Y+5	; 0x05
     a46:	83 30       	cpi	r24, 0x03	; 3
     a48:	91 05       	cpc	r25, r1
     a4a:	81 f0       	breq	.+32     	; 0xa6c <DIO_enumSetPortDirection+0x78>
     a4c:	14 c0       	rjmp	.+40     	; 0xa76 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
     a4e:	ea e3       	ldi	r30, 0x3A	; 58
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	80 83       	st	Z, r24
     a56:	12 c0       	rjmp	.+36     	; 0xa7c <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
     a58:	e7 e3       	ldi	r30, 0x37	; 55
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	80 83       	st	Z, r24
     a60:	0d c0       	rjmp	.+26     	; 0xa7c <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
     a62:	e4 e3       	ldi	r30, 0x34	; 52
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	8b 81       	ldd	r24, Y+3	; 0x03
     a68:	80 83       	st	Z, r24
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
     a6c:	e1 e3       	ldi	r30, 0x31	; 49
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	8b 81       	ldd	r24, Y+3	; 0x03
     a72:	80 83       	st	Z, r24
     a74:	03 c0       	rjmp	.+6      	; 0xa7c <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
     a76:	19 82       	std	Y+1, r1	; 0x01
     a78:	01 c0       	rjmp	.+2      	; 0xa7c <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
     a7a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	00 d0       	rcall	.+0      	; 0xa94 <DIO_enumSetPortValue+0x6>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <DIO_enumSetPortValue+0x8>
     a96:	0f 92       	push	r0
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
     a9c:	8a 83       	std	Y+2, r24	; 0x02
     a9e:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
     aa4:	8a 81       	ldd	r24, Y+2	; 0x02
     aa6:	84 30       	cpi	r24, 0x04	; 4
     aa8:	a8 f5       	brcc	.+106    	; 0xb14 <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	28 2f       	mov	r18, r24
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	3d 83       	std	Y+5, r19	; 0x05
     ab2:	2c 83       	std	Y+4, r18	; 0x04
     ab4:	8c 81       	ldd	r24, Y+4	; 0x04
     ab6:	9d 81       	ldd	r25, Y+5	; 0x05
     ab8:	81 30       	cpi	r24, 0x01	; 1
     aba:	91 05       	cpc	r25, r1
     abc:	d1 f0       	breq	.+52     	; 0xaf2 <DIO_enumSetPortValue+0x64>
     abe:	2c 81       	ldd	r18, Y+4	; 0x04
     ac0:	3d 81       	ldd	r19, Y+5	; 0x05
     ac2:	22 30       	cpi	r18, 0x02	; 2
     ac4:	31 05       	cpc	r19, r1
     ac6:	2c f4       	brge	.+10     	; 0xad2 <DIO_enumSetPortValue+0x44>
     ac8:	8c 81       	ldd	r24, Y+4	; 0x04
     aca:	9d 81       	ldd	r25, Y+5	; 0x05
     acc:	00 97       	sbiw	r24, 0x00	; 0
     ace:	61 f0       	breq	.+24     	; 0xae8 <DIO_enumSetPortValue+0x5a>
     ad0:	1f c0       	rjmp	.+62     	; 0xb10 <DIO_enumSetPortValue+0x82>
     ad2:	2c 81       	ldd	r18, Y+4	; 0x04
     ad4:	3d 81       	ldd	r19, Y+5	; 0x05
     ad6:	22 30       	cpi	r18, 0x02	; 2
     ad8:	31 05       	cpc	r19, r1
     ada:	81 f0       	breq	.+32     	; 0xafc <DIO_enumSetPortValue+0x6e>
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	9d 81       	ldd	r25, Y+5	; 0x05
     ae0:	83 30       	cpi	r24, 0x03	; 3
     ae2:	91 05       	cpc	r25, r1
     ae4:	81 f0       	breq	.+32     	; 0xb06 <DIO_enumSetPortValue+0x78>
     ae6:	14 c0       	rjmp	.+40     	; 0xb10 <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
     ae8:	eb e3       	ldi	r30, 0x3B	; 59
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	80 83       	st	Z, r24
     af0:	12 c0       	rjmp	.+36     	; 0xb16 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
     af2:	e8 e3       	ldi	r30, 0x38	; 56
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	80 83       	st	Z, r24
     afa:	0d c0       	rjmp	.+26     	; 0xb16 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
     afc:	e5 e3       	ldi	r30, 0x35	; 53
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	80 83       	st	Z, r24
     b04:	08 c0       	rjmp	.+16     	; 0xb16 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
     b06:	e2 e3       	ldi	r30, 0x32	; 50
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	80 83       	st	Z, r24
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
     b10:	19 82       	std	Y+1, r1	; 0x01
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
     b14:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
     b16:	89 81       	ldd	r24, Y+1	; 0x01
}
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	cf 91       	pop	r28
     b24:	df 91       	pop	r29
     b26:	08 95       	ret

00000b28 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <DIO_enumTogglePortValue+0x6>
     b2e:	00 d0       	rcall	.+0      	; 0xb30 <DIO_enumTogglePortValue+0x8>
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	84 30       	cpi	r24, 0x04	; 4
     b3e:	08 f0       	brcs	.+2      	; 0xb42 <DIO_enumTogglePortValue+0x1a>
     b40:	3f c0       	rjmp	.+126    	; 0xbc0 <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	28 2f       	mov	r18, r24
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	3c 83       	std	Y+4, r19	; 0x04
     b4a:	2b 83       	std	Y+3, r18	; 0x03
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	9c 81       	ldd	r25, Y+4	; 0x04
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	91 05       	cpc	r25, r1
     b54:	e9 f0       	breq	.+58     	; 0xb90 <DIO_enumTogglePortValue+0x68>
     b56:	2b 81       	ldd	r18, Y+3	; 0x03
     b58:	3c 81       	ldd	r19, Y+4	; 0x04
     b5a:	22 30       	cpi	r18, 0x02	; 2
     b5c:	31 05       	cpc	r19, r1
     b5e:	2c f4       	brge	.+10     	; 0xb6a <DIO_enumTogglePortValue+0x42>
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	61 f0       	breq	.+24     	; 0xb80 <DIO_enumTogglePortValue+0x58>
     b68:	2c c0       	rjmp	.+88     	; 0xbc2 <DIO_enumTogglePortValue+0x9a>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	b1 f0       	breq	.+44     	; 0xba0 <DIO_enumTogglePortValue+0x78>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	91 05       	cpc	r25, r1
     b7c:	c9 f0       	breq	.+50     	; 0xbb0 <DIO_enumTogglePortValue+0x88>
     b7e:	21 c0       	rjmp	.+66     	; 0xbc2 <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
     b80:	ab e3       	ldi	r26, 0x3B	; 59
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	eb e3       	ldi	r30, 0x3B	; 59
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	80 95       	com	r24
     b8c:	8c 93       	st	X, r24
     b8e:	19 c0       	rjmp	.+50     	; 0xbc2 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
     b90:	a8 e3       	ldi	r26, 0x38	; 56
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e8 e3       	ldi	r30, 0x38	; 56
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	80 95       	com	r24
     b9c:	8c 93       	st	X, r24
     b9e:	11 c0       	rjmp	.+34     	; 0xbc2 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
     ba0:	a5 e3       	ldi	r26, 0x35	; 53
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e5 e3       	ldi	r30, 0x35	; 53
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 95       	com	r24
     bac:	8c 93       	st	X, r24
     bae:	09 c0       	rjmp	.+18     	; 0xbc2 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
     bb0:	a2 e3       	ldi	r26, 0x32	; 50
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e2 e3       	ldi	r30, 0x32	; 50
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 95       	com	r24
     bbc:	8c 93       	st	X, r24
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     bc0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
     bc4:	0f 90       	pop	r0
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <DIO_enumGetPortValue+0x6>
     bd8:	00 d0       	rcall	.+0      	; 0xbda <DIO_enumGetPortValue+0x8>
     bda:	00 d0       	rcall	.+0      	; 0xbdc <DIO_enumGetPortValue+0xa>
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	8a 83       	std	Y+2, r24	; 0x02
     be2:	7c 83       	std	Y+4, r23	; 0x04
     be4:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	84 30       	cpi	r24, 0x04	; 4
     bee:	e8 f5       	brcc	.+122    	; 0xc6a <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	3e 83       	std	Y+6, r19	; 0x06
     bf8:	2d 83       	std	Y+5, r18	; 0x05
     bfa:	8d 81       	ldd	r24, Y+5	; 0x05
     bfc:	9e 81       	ldd	r25, Y+6	; 0x06
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	91 05       	cpc	r25, r1
     c02:	e1 f0       	breq	.+56     	; 0xc3c <DIO_enumGetPortValue+0x6a>
     c04:	2d 81       	ldd	r18, Y+5	; 0x05
     c06:	3e 81       	ldd	r19, Y+6	; 0x06
     c08:	22 30       	cpi	r18, 0x02	; 2
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f4       	brge	.+10     	; 0xc18 <DIO_enumGetPortValue+0x46>
     c0e:	8d 81       	ldd	r24, Y+5	; 0x05
     c10:	9e 81       	ldd	r25, Y+6	; 0x06
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	61 f0       	breq	.+24     	; 0xc2e <DIO_enumGetPortValue+0x5c>
     c16:	27 c0       	rjmp	.+78     	; 0xc66 <DIO_enumGetPortValue+0x94>
     c18:	2d 81       	ldd	r18, Y+5	; 0x05
     c1a:	3e 81       	ldd	r19, Y+6	; 0x06
     c1c:	22 30       	cpi	r18, 0x02	; 2
     c1e:	31 05       	cpc	r19, r1
     c20:	a1 f0       	breq	.+40     	; 0xc4a <DIO_enumGetPortValue+0x78>
     c22:	8d 81       	ldd	r24, Y+5	; 0x05
     c24:	9e 81       	ldd	r25, Y+6	; 0x06
     c26:	83 30       	cpi	r24, 0x03	; 3
     c28:	91 05       	cpc	r25, r1
     c2a:	b1 f0       	breq	.+44     	; 0xc58 <DIO_enumGetPortValue+0x86>
     c2c:	1c c0       	rjmp	.+56     	; 0xc66 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
     c2e:	e9 e3       	ldi	r30, 0x39	; 57
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	eb 81       	ldd	r30, Y+3	; 0x03
     c36:	fc 81       	ldd	r31, Y+4	; 0x04
     c38:	80 83       	st	Z, r24
     c3a:	18 c0       	rjmp	.+48     	; 0xc6c <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
     c3c:	e6 e3       	ldi	r30, 0x36	; 54
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	eb 81       	ldd	r30, Y+3	; 0x03
     c44:	fc 81       	ldd	r31, Y+4	; 0x04
     c46:	80 83       	st	Z, r24
     c48:	11 c0       	rjmp	.+34     	; 0xc6c <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
     c4a:	e3 e3       	ldi	r30, 0x33	; 51
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	eb 81       	ldd	r30, Y+3	; 0x03
     c52:	fc 81       	ldd	r31, Y+4	; 0x04
     c54:	80 83       	st	Z, r24
     c56:	0a c0       	rjmp	.+20     	; 0xc6c <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
     c58:	e0 e3       	ldi	r30, 0x30	; 48
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	eb 81       	ldd	r30, Y+3	; 0x03
     c60:	fc 81       	ldd	r31, Y+4	; 0x04
     c62:	80 83       	st	Z, r24
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
     c66:	19 82       	std	Y+1, r1	; 0x01
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     c6a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6e:	26 96       	adiw	r28, 0x06	; 6
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <DIO_voidWriteHighNibbles+0x6>
     c86:	00 d0       	rcall	.+0      	; 0xc88 <DIO_voidWriteHighNibbles+0x8>
     c88:	0f 92       	push	r0
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	8a 83       	std	Y+2, r24	; 0x02
     c90:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	84 30       	cpi	r24, 0x04	; 4
     c9a:	08 f0       	brcs	.+2      	; 0xc9e <DIO_voidWriteHighNibbles+0x1e>
     c9c:	63 c0       	rjmp	.+198    	; 0xd64 <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	82 95       	swap	r24
     ca2:	80 7f       	andi	r24, 0xF0	; 240
     ca4:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	3d 83       	std	Y+5, r19	; 0x05
     cae:	2c 83       	std	Y+4, r18	; 0x04
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	9d 81       	ldd	r25, Y+5	; 0x05
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	91 05       	cpc	r25, r1
     cb8:	29 f1       	breq	.+74     	; 0xd04 <DIO_voidWriteHighNibbles+0x84>
     cba:	2c 81       	ldd	r18, Y+4	; 0x04
     cbc:	3d 81       	ldd	r19, Y+5	; 0x05
     cbe:	22 30       	cpi	r18, 0x02	; 2
     cc0:	31 05       	cpc	r19, r1
     cc2:	2c f4       	brge	.+10     	; 0xcce <DIO_voidWriteHighNibbles+0x4e>
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	61 f0       	breq	.+24     	; 0xce4 <DIO_voidWriteHighNibbles+0x64>
     ccc:	4c c0       	rjmp	.+152    	; 0xd66 <DIO_voidWriteHighNibbles+0xe6>
     cce:	2c 81       	ldd	r18, Y+4	; 0x04
     cd0:	3d 81       	ldd	r19, Y+5	; 0x05
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	31 f1       	breq	.+76     	; 0xd24 <DIO_voidWriteHighNibbles+0xa4>
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	9d 81       	ldd	r25, Y+5	; 0x05
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	91 05       	cpc	r25, r1
     ce0:	89 f1       	breq	.+98     	; 0xd44 <DIO_voidWriteHighNibbles+0xc4>
     ce2:	41 c0       	rjmp	.+130    	; 0xd66 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
     ce4:	ab e3       	ldi	r26, 0x3B	; 59
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	eb e3       	ldi	r30, 0x3B	; 59
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8f 70       	andi	r24, 0x0F	; 15
     cf0:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
     cf2:	ab e3       	ldi	r26, 0x3B	; 59
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	eb e3       	ldi	r30, 0x3B	; 59
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	90 81       	ld	r25, Z
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	89 2b       	or	r24, r25
     d00:	8c 93       	st	X, r24
     d02:	31 c0       	rjmp	.+98     	; 0xd66 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
     d04:	a8 e3       	ldi	r26, 0x38	; 56
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e8 e3       	ldi	r30, 0x38	; 56
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	8f 70       	andi	r24, 0x0F	; 15
     d10:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
     d12:	a8 e3       	ldi	r26, 0x38	; 56
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e8 e3       	ldi	r30, 0x38	; 56
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	90 81       	ld	r25, Z
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	89 2b       	or	r24, r25
     d20:	8c 93       	st	X, r24
     d22:	21 c0       	rjmp	.+66     	; 0xd66 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
     d24:	a5 e3       	ldi	r26, 0x35	; 53
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e5 e3       	ldi	r30, 0x35	; 53
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 70       	andi	r24, 0x0F	; 15
     d30:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
     d32:	a5 e3       	ldi	r26, 0x35	; 53
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e5 e3       	ldi	r30, 0x35	; 53
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	90 81       	ld	r25, Z
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	89 2b       	or	r24, r25
     d40:	8c 93       	st	X, r24
     d42:	11 c0       	rjmp	.+34     	; 0xd66 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
     d44:	a2 e3       	ldi	r26, 0x32	; 50
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e2 e3       	ldi	r30, 0x32	; 50
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 70       	andi	r24, 0x0F	; 15
     d50:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
     d52:	a2 e3       	ldi	r26, 0x32	; 50
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e2 e3       	ldi	r30, 0x32	; 50
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	90 81       	ld	r25, Z
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	89 2b       	or	r24, r25
     d60:	8c 93       	st	X, r24
     d62:	01 c0       	rjmp	.+2      	; 0xd66 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     d64:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     d66:	89 81       	ldd	r24, Y+1	; 0x01

}
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <DIO_voidWriteLowNibbles+0x6>
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_voidWriteLowNibbles+0x8>
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	84 30       	cpi	r24, 0x04	; 4
     d92:	08 f0       	brcs	.+2      	; 0xd96 <DIO_voidWriteLowNibbles+0x1e>
     d94:	62 c0       	rjmp	.+196    	; 0xe5a <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	8f 70       	andi	r24, 0x0F	; 15
     d9a:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	3d 83       	std	Y+5, r19	; 0x05
     da4:	2c 83       	std	Y+4, r18	; 0x04
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	91 05       	cpc	r25, r1
     dae:	29 f1       	breq	.+74     	; 0xdfa <DIO_voidWriteLowNibbles+0x82>
     db0:	2c 81       	ldd	r18, Y+4	; 0x04
     db2:	3d 81       	ldd	r19, Y+5	; 0x05
     db4:	22 30       	cpi	r18, 0x02	; 2
     db6:	31 05       	cpc	r19, r1
     db8:	2c f4       	brge	.+10     	; 0xdc4 <DIO_voidWriteLowNibbles+0x4c>
     dba:	8c 81       	ldd	r24, Y+4	; 0x04
     dbc:	9d 81       	ldd	r25, Y+5	; 0x05
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	61 f0       	breq	.+24     	; 0xdda <DIO_voidWriteLowNibbles+0x62>
     dc2:	4c c0       	rjmp	.+152    	; 0xe5c <DIO_voidWriteLowNibbles+0xe4>
     dc4:	2c 81       	ldd	r18, Y+4	; 0x04
     dc6:	3d 81       	ldd	r19, Y+5	; 0x05
     dc8:	22 30       	cpi	r18, 0x02	; 2
     dca:	31 05       	cpc	r19, r1
     dcc:	31 f1       	breq	.+76     	; 0xe1a <DIO_voidWriteLowNibbles+0xa2>
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	91 05       	cpc	r25, r1
     dd6:	89 f1       	breq	.+98     	; 0xe3a <DIO_voidWriteLowNibbles+0xc2>
     dd8:	41 c0       	rjmp	.+130    	; 0xe5c <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
     dda:	ab e3       	ldi	r26, 0x3B	; 59
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	eb e3       	ldi	r30, 0x3B	; 59
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	80 7f       	andi	r24, 0xF0	; 240
     de6:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
     de8:	ab e3       	ldi	r26, 0x3B	; 59
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	eb e3       	ldi	r30, 0x3B	; 59
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	90 81       	ld	r25, Z
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	89 2b       	or	r24, r25
     df6:	8c 93       	st	X, r24
     df8:	31 c0       	rjmp	.+98     	; 0xe5c <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
     dfa:	a8 e3       	ldi	r26, 0x38	; 56
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e8 e3       	ldi	r30, 0x38	; 56
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 7f       	andi	r24, 0xF0	; 240
     e06:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	90 81       	ld	r25, Z
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	89 2b       	or	r24, r25
     e16:	8c 93       	st	X, r24
     e18:	21 c0       	rjmp	.+66     	; 0xe5c <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
     e1a:	a5 e3       	ldi	r26, 0x35	; 53
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e5 e3       	ldi	r30, 0x35	; 53
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
     e28:	a5 e3       	ldi	r26, 0x35	; 53
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e3       	ldi	r30, 0x35	; 53
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	90 81       	ld	r25, Z
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	89 2b       	or	r24, r25
     e36:	8c 93       	st	X, r24
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
     e3a:	a2 e3       	ldi	r26, 0x32	; 50
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e2 e3       	ldi	r30, 0x32	; 50
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 7f       	andi	r24, 0xF0	; 240
     e46:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
     e48:	a2 e3       	ldi	r26, 0x32	; 50
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	90 81       	ld	r25, Z
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	89 2b       	or	r24, r25
     e56:	8c 93       	st	X, r24
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     e5c:	89 81       	ldd	r24, Y+1	; 0x01

}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <TWI_voidInitMaster>:

//-------------------------------------------------------------------------------------------------------------------------------

/*Set master address to 0 if master will not be addressed*/
void TWI_voidInitMaster(u8 Copy_u8Address)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01

	/*Set SCL frequency to 400kHz, with 8Mhz system frequency*/
	/*1- Set TWBR to 2 => [0:255] */

	TWBR= (u8) (((F_CPU/SCL_Clock)-16) / (2*TWI_PRESCALLER));
     e7a:	e0 e2       	ldi	r30, 0x20	; 32
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	80 83       	st	Z, r24

	/* Set the prescaler */
	/*2- Clear the prescaler bits (TWPS)*/
	if (TWI_PRESCALLER==PRESCALLER_BY_1)
	{
		TWSR=0;
     e82:	e1 e2       	ldi	r30, 0x21	; 33
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	10 82       	st	Z, r1
	{
		TWSR=3;
	}

	/*Check if the master node will be addressed & set the Master Address */
	if(Copy_u8Address != 0)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	88 23       	and	r24, r24
     e8c:	29 f0       	breq	.+10     	; 0xe98 <TWI_voidInitMaster+0x2a>
	{
		/*Set the required address in the 7 MSB of TWAR*/
		TWAR = Copy_u8Address<<1;
     e8e:	e2 e2       	ldi	r30, 0x22	; 34
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	88 0f       	add	r24, r24
     e96:	80 83       	st	Z, r24
	}

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
     e98:	a6 e5       	ldi	r26, 0x56	; 86
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e5       	ldi	r30, 0x56	; 86
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	8c 93       	st	X, r24

	/*Enable TWI Peripheral*/
	SET_BIT(TWCR,TWCR_TWEN);
     ea6:	a6 e5       	ldi	r26, 0x56	; 86
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e6 e5       	ldi	r30, 0x56	; 86
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	8c 93       	st	X, r24
}
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	0f 92       	push	r0
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	89 83       	std	Y+1, r24	; 0x01
	/*Set the slave address*/
	TWAR = Copy_u8Address<<1;
     ec8:	e2 e2       	ldi	r30, 0x22	; 34
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	88 0f       	add	r24, r24
     ed0:	80 83       	st	Z, r24

	/************** Enable *******************/

	/*Enable Acknowledge bit*/
	SET_BIT(TWCR,TWCR_TWEA);
     ed2:	a6 e5       	ldi	r26, 0x56	; 86
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e6 e5       	ldi	r30, 0x56	; 86
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	8c 93       	st	X, r24

	/*Enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
     ee0:	a6 e5       	ldi	r26, 0x56	; 86
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e6 e5       	ldi	r30, 0x56	; 86
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	84 60       	ori	r24, 0x04	; 4
     eec:	8c 93       	st	X, r24
}
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <TWI_SendStartCondition>:

TWI_ErrStatus TWI_SendStartCondition(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
     f00:	19 82       	std	Y+1, r1	; 0x01


	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
     f02:	a6 e5       	ldi	r26, 0x56	; 86
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e6 e5       	ldi	r30, 0x56	; 86
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     f10:	a6 e5       	ldi	r26, 0x56	; 86
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e6 e5       	ldi	r30, 0x56	; 86
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 68       	ori	r24, 0x80	; 128
     f1c:	8c 93       	st	X, r24
	Hint : we could use 
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     f1e:	e6 e5       	ldi	r30, 0x56	; 86
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	88 1f       	adc	r24, r24
     f26:	88 27       	eor	r24, r24
     f28:	88 1f       	adc	r24, r24
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	90 70       	andi	r25, 0x00	; 0
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	a9 f3       	breq	.-22     	; 0xf1e <TWI_SendStartCondition+0x28>

	/*Check the operation status (Bit Masking) */
	if((TWSR & 0xF8) != START_ACK )
     f34:	e1 e2       	ldi	r30, 0x21	; 33
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	88 7f       	andi	r24, 0xF8	; 248
     f40:	90 70       	andi	r25, 0x00	; 0
     f42:	88 30       	cpi	r24, 0x08	; 8
     f44:	91 05       	cpc	r25, r1
     f46:	11 f0       	breq	.+4      	; 0xf4c <TWI_SendStartCondition+0x56>
	{
		Local_Error = StartConditionErr;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <TWI_SendRepeatedStart>:

TWI_ErrStatus TWI_SendRepeatedStart(void)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrStatus Local_Error= NoError;
     f60:	19 82       	std	Y+1, r1	; 0x01

	/*Send start condition*/
	SET_BIT(TWCR, TWCR_TWSTA);
     f62:	a6 e5       	ldi	r26, 0x56	; 86
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e6 e5       	ldi	r30, 0x56	; 86
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	8c 93       	st	X, r24
	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     f70:	a6 e5       	ldi	r26, 0x56	; 86
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e6 e5       	ldi	r30, 0x56	; 86
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	80 68       	ori	r24, 0x80	; 128
     f7c:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
	 */


	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     f7e:	e6 e5       	ldi	r30, 0x56	; 86
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 1f       	adc	r24, r24
     f86:	88 27       	eor	r24, r24
     f88:	88 1f       	adc	r24, r24
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 70       	andi	r25, 0x00	; 0
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	a9 f3       	breq	.-22     	; 0xf7e <TWI_SendRepeatedStart+0x28>

	/*Check the operation status*/
	if((TWSR & 0xF8) != REP_START_ACK )
     f94:	e1 e2       	ldi	r30, 0x21	; 33
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 7f       	andi	r24, 0xF8	; 248
     fa0:	90 70       	andi	r25, 0x00	; 0
     fa2:	80 31       	cpi	r24, 0x10	; 16
     fa4:	91 05       	cpc	r25, r1
     fa6:	11 f0       	breq	.+4      	; 0xfac <TWI_SendRepeatedStart+0x56>
	{
		Local_Error = RepeatedStartError;
     fa8:	82 e0       	ldi	r24, 0x02	; 2
     faa:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
     fac:	89 81       	ldd	r24, Y+1	; 0x01
}
     fae:	0f 90       	pop	r0
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <TWI_SendSlaveAddressWithWrite>:

TWI_ErrStatus TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <TWI_SendSlaveAddressWithWrite+0x6>
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
     fc2:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = (Copy_u8SlaveAddress<<1) ;
     fc4:	e3 e2       	ldi	r30, 0x23	; 35
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	88 0f       	add	r24, r24
     fcc:	80 83       	st	Z, r24
	/*set the write request in the LSB in the data register*/
	CLR_BIT(TWDR,0);
     fce:	a3 e2       	ldi	r26, 0x23	; 35
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e3 e2       	ldi	r30, 0x23	; 35
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	8e 7f       	andi	r24, 0xFE	; 254
     fda:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
     fdc:	a6 e5       	ldi	r26, 0x56	; 86
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e6 e5       	ldi	r30, 0x56	; 86
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 7d       	andi	r24, 0xDF	; 223
     fe8:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
     fea:	a6 e5       	ldi	r26, 0x56	; 86
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e6 e5       	ldi	r30, 0x56	; 86
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 68       	ori	r24, 0x80	; 128
     ff6:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
     ff8:	e6 e5       	ldi	r30, 0x56	; 86
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	88 1f       	adc	r24, r24
    1000:	88 27       	eor	r24, r24
    1002:	88 1f       	adc	r24, r24
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	a9 f3       	breq	.-22     	; 0xff8 <TWI_SendSlaveAddressWithWrite+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
    100e:	e1 e2       	ldi	r30, 0x21	; 33
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 2f       	mov	r24, r24
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	90 70       	andi	r25, 0x00	; 0
    101c:	88 31       	cpi	r24, 0x18	; 24
    101e:	91 05       	cpc	r25, r1
    1020:	11 f0       	breq	.+4      	; 0x1026 <TWI_SendSlaveAddressWithWrite+0x70>
	{
		Local_Error = SlaveAddressWithWriteErr;
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <TWI_SendSlaveAddressWithRead>:

TWI_ErrStatus TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <TWI_SendSlaveAddressWithRead+0x6>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    103e:	19 82       	std	Y+1, r1	; 0x01

	/*send the 7bit slave address to the bus*/
	TWDR = Copy_u8SlaveAddress <<1;
    1040:	e3 e2       	ldi	r30, 0x23	; 35
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	88 0f       	add	r24, r24
    1048:	80 83       	st	Z, r24
	/*set the read request in the LSB in the data register*/
	SET_BIT(TWDR,0);
    104a:	a3 e2       	ldi	r26, 0x23	; 35
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e3 e2       	ldi	r30, 0x23	; 35
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	81 60       	ori	r24, 0x01	; 1
    1056:	8c 93       	st	X, r24

	/*Clear the start condition bit*/
	CLR_BIT(TWCR,TWCR_TWSTA);
    1058:	a6 e5       	ldi	r26, 0x56	; 86
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e6 e5       	ldi	r30, 0x56	; 86
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7d       	andi	r24, 0xDF	; 223
    1064:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    1066:	a6 e5       	ldi	r26, 0x56	; 86
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    1074:	e6 e5       	ldi	r30, 0x56	; 86
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	88 1f       	adc	r24, r24
    107c:	88 27       	eor	r24, r24
    107e:	88 1f       	adc	r24, r24
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	90 70       	andi	r25, 0x00	; 0
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	a9 f3       	breq	.-22     	; 0x1074 <TWI_SendSlaveAddressWithRead+0x42>

	/*Check the operation status*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK )
    108a:	e1 e2       	ldi	r30, 0x21	; 33
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 7f       	andi	r24, 0xF8	; 248
    1096:	90 70       	andi	r25, 0x00	; 0
    1098:	80 34       	cpi	r24, 0x40	; 64
    109a:	91 05       	cpc	r25, r1
    109c:	11 f0       	breq	.+4      	; 0x10a2 <TWI_SendSlaveAddressWithRead+0x70>
	{
		Local_Error = SlaveAddressWithReadErr;
    109e:	84 e0       	ldi	r24, 0x04	; 4
    10a0:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <TWI_MasterWriteDataByte>:

TWI_ErrStatus TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <TWI_MasterWriteDataByte+0x6>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    10ba:	19 82       	std	Y+1, r1	; 0x01

	/*Write the data byte on the bus*/
	TWDR = Copy_u8DataByte;
    10bc:	e3 e2       	ldi	r30, 0x23	; 35
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	80 83       	st	Z, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    10c4:	a6 e5       	ldi	r26, 0x56	; 86
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e6 e5       	ldi	r30, 0x56	; 86
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	80 68       	ori	r24, 0x80	; 128
    10d0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    10d2:	e6 e5       	ldi	r30, 0x56	; 86
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 1f       	adc	r24, r24
    10da:	88 27       	eor	r24, r24
    10dc:	88 1f       	adc	r24, r24
    10de:	88 2f       	mov	r24, r24
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	90 70       	andi	r25, 0x00	; 0
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	a9 f3       	breq	.-22     	; 0x10d2 <TWI_MasterWriteDataByte+0x24>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
    10e8:	e1 e2       	ldi	r30, 0x21	; 33
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	88 7f       	andi	r24, 0xF8	; 248
    10f4:	90 70       	andi	r25, 0x00	; 0
    10f6:	88 32       	cpi	r24, 0x28	; 40
    10f8:	91 05       	cpc	r25, r1
    10fa:	11 f0       	breq	.+4      	; 0x1100 <TWI_MasterWriteDataByte+0x52>
	{
		Local_Error = MasterWriteByteErr;
    10fc:	85 e0       	ldi	r24, 0x05	; 5
    10fe:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return Local_Error;
    1100:	89 81       	ldd	r24, Y+1	; 0x01
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <TWI_MasterReadDataByte>:

TWI_ErrStatus TWI_MasterReadDataByte(u8* Copy_pu8DataByte)
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <TWI_MasterReadDataByte+0x6>
    1112:	0f 92       	push	r0
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9b 83       	std	Y+3, r25	; 0x03
    111a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    111c:	19 82       	std	Y+1, r1	; 0x01

	/*Clear the interrupt flag to allow the slave send the data*/
	SET_BIT(TWCR,TWCR_TWINT);
    111e:	a6 e5       	ldi	r26, 0x56	; 86
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e6 e5       	ldi	r30, 0x56	; 86
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 68       	ori	r24, 0x80	; 128
    112a:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    112c:	e6 e5       	ldi	r30, 0x56	; 86
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	88 1f       	adc	r24, r24
    1134:	88 27       	eor	r24, r24
    1136:	88 1f       	adc	r24, r24
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	90 70       	andi	r25, 0x00	; 0
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	a9 f3       	breq	.-22     	; 0x112c <TWI_MasterReadDataByte+0x20>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
    1142:	e1 e2       	ldi	r30, 0x21	; 33
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	88 7f       	andi	r24, 0xF8	; 248
    114e:	90 70       	andi	r25, 0x00	; 0
    1150:	80 35       	cpi	r24, 0x50	; 80
    1152:	91 05       	cpc	r25, r1
    1154:	19 f0       	breq	.+6      	; 0x115c <TWI_MasterReadDataByte+0x50>
	{
		Local_Error = MasterReadByteErr;
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	06 c0       	rjmp	.+12     	; 0x1168 <TWI_MasterReadDataByte+0x5c>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    115c:	e3 e2       	ldi	r30, 0x23	; 35
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	ea 81       	ldd	r30, Y+2	; 0x02
    1164:	fb 81       	ldd	r31, Y+3	; 0x03
    1166:	80 83       	st	Z, r24
	}

	return Local_Error;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <TWI_SlaveReadDataByte>:

TWI_ErrStatus TWI_SlaveReadDataByte(u8* Copy_pu8DataByte)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <TWI_SlaveReadDataByte+0x6>
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrStatus Local_Error= NoError;
    1186:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(TWCR,TWCR_TWINT);
    1188:	a6 e5       	ldi	r26, 0x56	; 86
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e6 e5       	ldi	r30, 0x56	; 86
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 68       	ori	r24, 0x80	; 128
    1194:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
    1196:	a6 e5       	ldi	r26, 0x56	; 86
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e6 e5       	ldi	r30, 0x56	; 86
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	84 60       	ori	r24, 0x04	; 4
    11a2:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEA);
    11a4:	a6 e5       	ldi	r26, 0x56	; 86
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e6 e5       	ldi	r30, 0x56	; 86
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	80 64       	ori	r24, 0x40	; 64
    11b0:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    11b2:	e6 e5       	ldi	r30, 0x56	; 86
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	88 1f       	adc	r24, r24
    11ba:	88 27       	eor	r24, r24
    11bc:	88 1f       	adc	r24, r24
    11be:	88 2f       	mov	r24, r24
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	90 70       	andi	r25, 0x00	; 0
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	a9 f3       	breq	.-22     	; 0x11b2 <TWI_SlaveReadDataByte+0x3c>

	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_ADD_RCVD_WR_REQ)
    11c8:	e1 e2       	ldi	r30, 0x21	; 33
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	88 7f       	andi	r24, 0xF8	; 248
    11d4:	90 70       	andi	r25, 0x00	; 0
    11d6:	80 36       	cpi	r24, 0x60	; 96
    11d8:	91 05       	cpc	r25, r1
    11da:	11 f0       	breq	.+4      	; 0x11e0 <TWI_SlaveReadDataByte+0x6a>
	{
		Local_Error = MasterReadByteErr;
    11dc:	86 e0       	ldi	r24, 0x06	; 6
    11de:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(TWCR,TWCR_TWINT);
    11e0:	a6 e5       	ldi	r26, 0x56	; 86
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 e5       	ldi	r30, 0x56	; 86
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	80 68       	ori	r24, 0x80	; 128
    11ec:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
    11ee:	a6 e5       	ldi	r26, 0x56	; 86
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e6 e5       	ldi	r30, 0x56	; 86
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	84 60       	ori	r24, 0x04	; 4
    11fa:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEA);
    11fc:	a6 e5       	ldi	r26, 0x56	; 86
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e6 e5       	ldi	r30, 0x56	; 86
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	80 64       	ori	r24, 0x40	; 64
    1208:	8c 93       	st	X, r24

	/*wait until the operation finishes and the flag is raised*/
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
    120a:	e6 e5       	ldi	r30, 0x56	; 86
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	88 1f       	adc	r24, r24
    1212:	88 27       	eor	r24, r24
    1214:	88 1f       	adc	r24, r24
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	90 70       	andi	r25, 0x00	; 0
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	a9 f3       	breq	.-22     	; 0x120a <TWI_SlaveReadDataByte+0x94>
	/*Check the operation status*/
	if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
    1220:	e1 e2       	ldi	r30, 0x21	; 33
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	88 7f       	andi	r24, 0xF8	; 248
    122c:	90 70       	andi	r25, 0x00	; 0
    122e:	80 38       	cpi	r24, 0x80	; 128
    1230:	91 05       	cpc	r25, r1
    1232:	19 f0       	breq	.+6      	; 0x123a <TWI_SlaveReadDataByte+0xc4>
	{
		Local_Error = MasterReadByteErr;
    1234:	86 e0       	ldi	r24, 0x06	; 6
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <TWI_SlaveReadDataByte+0xd0>
	}
	else
	{
		/*Read the received data*/
		*Copy_pu8DataByte = TWDR;
    123a:	e3 e2       	ldi	r30, 0x23	; 35
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	ea 81       	ldd	r30, Y+2	; 0x02
    1242:	fb 81       	ldd	r31, Y+3	; 0x03
    1244:	80 83       	st	Z, r24
	}

	return Local_Error;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
	/*Sent a stop condition on the bus*/
	SET_BIT(TWCR,TWCR_TWSTO);
    125c:	a6 e5       	ldi	r26, 0x56	; 86
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e6 e5       	ldi	r30, 0x56	; 86
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	80 61       	ori	r24, 0x10	; 16
    1268:	8c 93       	st	X, r24

	/*Clear the interrupt flag to start the previous operation*/
	SET_BIT(TWCR,TWCR_TWINT);
    126a:	a6 e5       	ldi	r26, 0x56	; 86
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e6 e5       	ldi	r30, 0x56	; 86
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	80 68       	ori	r24, 0x80	; 128
    1276:	8c 93       	st	X, r24

}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <main>:
#include "DIO_interface.h"
#include "TWI_interface.h"


int main(void)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	0f 92       	push	r0
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	u8 Data_Rx;
	DIO_enumSetPortDirection(DIO_PORTA,DIO_PORT_OUTPUT);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	6f ef       	ldi	r22, 0xFF	; 255
    128c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <DIO_enumSetPortDirection>

	TWI_voidInitSlave(0b10101010);
    1290:	8a ea       	ldi	r24, 0xAA	; 170
    1292:	0e 94 5e 07 	call	0xebc	; 0xebc <TWI_voidInitSlave>
	while (1)
	{
		TWI_SlaveReadDataByte(& Data_Rx);
    1296:	ce 01       	movw	r24, r28
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_SlaveReadDataByte>
		DIO_enumSetPortValue(DIO_PORTA,Data_Rx);
    129e:	99 81       	ldd	r25, Y+1	; 0x01
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	69 2f       	mov	r22, r25
    12a4:	0e 94 47 05 	call	0xa8e	; 0xa8e <DIO_enumSetPortValue>
    12a8:	f6 cf       	rjmp	.-20     	; 0x1296 <main+0x18>

000012aa <_exit>:
    12aa:	f8 94       	cli

000012ac <__stop_program>:
    12ac:	ff cf       	rjmp	.-2      	; 0x12ac <__stop_program>
