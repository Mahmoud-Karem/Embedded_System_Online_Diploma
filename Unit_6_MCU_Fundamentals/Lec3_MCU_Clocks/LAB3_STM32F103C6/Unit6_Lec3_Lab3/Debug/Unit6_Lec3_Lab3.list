
Unit6_Lec3_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e4  080002ec  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e4  080002e4  000102ec  2**0
                  CONTENTS
  4 .ARM          00000000  080002e4  080002e4  000102ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e4  080002ec  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e4  080002e4  000102e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002ec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002ec  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000930  00000000  00000000  00010315  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b2  00000000  00000000  00010c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d43  00000000  00000000  00010e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000079e  00000000  00000000  00012bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008037  00000000  00000000  00013351  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b388  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001b404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002cc 	.word	0x080002cc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002cc 	.word	0x080002cc

08000170 <main>:
#define RCC_CFGR    *(vuint32_t *)(RCC_BASE + 0x04)
#define RCC_CR      *(vuint32_t *)(RCC_BASE + 0x00)


int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
    RCC_CFGR    |= (0b10<<0);       // System clock switch to PLL
 8000176:	4b29      	ldr	r3, [pc, #164]	; (800021c <main+0xac>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a28      	ldr	r2, [pc, #160]	; (800021c <main+0xac>)
 800017c:	f043 0302 	orr.w	r3, r3, #2
 8000180:	6013      	str	r3, [r2, #0]
    RCC_CFGR    |= (0b0110<<18);    // PLL multiplication factor * 8
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <main+0xac>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a25      	ldr	r2, [pc, #148]	; (800021c <main+0xac>)
 8000188:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800018c:	6013      	str	r3, [r2, #0]
    RCC_CFGR    |= (0b100<<8);      // Set APB1 Prescale to \2
 800018e:	4b23      	ldr	r3, [pc, #140]	; (800021c <main+0xac>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a22      	ldr	r2, [pc, #136]	; (800021c <main+0xac>)
 8000194:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000198:	6013      	str	r3, [r2, #0]
    RCC_CFGR    |= (0b101<<11);     // Set APB2 Prescale to \4
 800019a:	4b20      	ldr	r3, [pc, #128]	; (800021c <main+0xac>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a1f      	ldr	r2, [pc, #124]	; (800021c <main+0xac>)
 80001a0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80001a4:	6013      	str	r3, [r2, #0]
    RCC_APB2ENR |= (1<<2);          // Enable Clock for GPIOA
 80001a6:	4b1e      	ldr	r3, [pc, #120]	; (8000220 <main+0xb0>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a1d      	ldr	r2, [pc, #116]	; (8000220 <main+0xb0>)
 80001ac:	f043 0304 	orr.w	r3, r3, #4
 80001b0:	6013      	str	r3, [r2, #0]
    RCC_CR      |= (1<<24);         // PLL Enable
 80001b2:	4b1c      	ldr	r3, [pc, #112]	; (8000224 <main+0xb4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a1b      	ldr	r2, [pc, #108]	; (8000224 <main+0xb4>)
 80001b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001bc:	6013      	str	r3, [r2, #0]

    /* Init GPIOA */
    GPIOA_CRH &= 0xFF0FFFFF;
 80001be:	4b1a      	ldr	r3, [pc, #104]	; (8000228 <main+0xb8>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a19      	ldr	r2, [pc, #100]	; (8000228 <main+0xb8>)
 80001c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001c8:	6013      	str	r3, [r2, #0]
    GPIOA_CRH |= 0x00200000;
 80001ca:	4b17      	ldr	r3, [pc, #92]	; (8000228 <main+0xb8>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a16      	ldr	r2, [pc, #88]	; (8000228 <main+0xb8>)
 80001d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001d4:	6013      	str	r3, [r2, #0]
    while(1)
    {
        GPIOA_ODR |= 1<<13 ;
 80001d6:	4b15      	ldr	r3, [pc, #84]	; (800022c <main+0xbc>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a14      	ldr	r2, [pc, #80]	; (800022c <main+0xbc>)
 80001dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001e0:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 5000; i++); // arbitrary delay
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e002      	b.n	80001ee <main+0x7e>
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3301      	adds	r3, #1
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80001f4:	4293      	cmp	r3, r2
 80001f6:	ddf7      	ble.n	80001e8 <main+0x78>
        GPIOA_ODR &= ~(1<<13) ;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <main+0xbc>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a0b      	ldr	r2, [pc, #44]	; (800022c <main+0xbc>)
 80001fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000202:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 5000; i++); // arbitrary delay
 8000204:	2300      	movs	r3, #0
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	e002      	b.n	8000210 <main+0xa0>
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	3301      	adds	r3, #1
 800020e:	603b      	str	r3, [r7, #0]
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	f241 3287 	movw	r2, #4999	; 0x1387
 8000216:	4293      	cmp	r3, r2
 8000218:	ddf7      	ble.n	800020a <main+0x9a>
        GPIOA_ODR |= 1<<13 ;
 800021a:	e7dc      	b.n	80001d6 <main+0x66>
 800021c:	40021004 	.word	0x40021004
 8000220:	40021018 	.word	0x40021018
 8000224:	40021000 	.word	0x40021000
 8000228:	40010804 	.word	0x40010804
 800022c:	4001080c 	.word	0x4001080c

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000234:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 f811 	bl	8000284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ff85 	bl	8000170 <main>

08000266 <LoopForever>:

LoopForever:
    b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000274:	080002ec 	.word	0x080002ec
  ldr r2, =_sbss
 8000278:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800027c:	2000001c 	.word	0x2000001c

08000280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_2_IRQHandler>
	...

08000284 <__libc_init_array>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	2500      	movs	r5, #0
 8000288:	4e0c      	ldr	r6, [pc, #48]	; (80002bc <__libc_init_array+0x38>)
 800028a:	4c0d      	ldr	r4, [pc, #52]	; (80002c0 <__libc_init_array+0x3c>)
 800028c:	1ba4      	subs	r4, r4, r6
 800028e:	10a4      	asrs	r4, r4, #2
 8000290:	42a5      	cmp	r5, r4
 8000292:	d109      	bne.n	80002a8 <__libc_init_array+0x24>
 8000294:	f000 f81a 	bl	80002cc <_init>
 8000298:	2500      	movs	r5, #0
 800029a:	4e0a      	ldr	r6, [pc, #40]	; (80002c4 <__libc_init_array+0x40>)
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <__libc_init_array+0x44>)
 800029e:	1ba4      	subs	r4, r4, r6
 80002a0:	10a4      	asrs	r4, r4, #2
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d105      	bne.n	80002b2 <__libc_init_array+0x2e>
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002ac:	4798      	blx	r3
 80002ae:	3501      	adds	r5, #1
 80002b0:	e7ee      	b.n	8000290 <__libc_init_array+0xc>
 80002b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002b6:	4798      	blx	r3
 80002b8:	3501      	adds	r5, #1
 80002ba:	e7f2      	b.n	80002a2 <__libc_init_array+0x1e>
 80002bc:	080002e4 	.word	0x080002e4
 80002c0:	080002e4 	.word	0x080002e4
 80002c4:	080002e4 	.word	0x080002e4
 80002c8:	080002e8 	.word	0x080002e8

080002cc <_init>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr

080002d8 <_fini>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr
